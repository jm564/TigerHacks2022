// Compiled shader for Windows, Mac, Linux

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Nature/Terrain/Standard" {
Properties {
[HideInInspector]  _MainTex ("BaseMap (RGB)", 2D) = "white" { }
[HideInInspector]  _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
[HideInInspector]  _TerrainHolesTexture ("Holes Map (RGB)", 2D) = "white" { }
}
SubShader { 
 Tags { "QUEUE"="Geometry-100" "RenderType"="Opaque" "TerrainCompatible"="true" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="FORWARDBASE" "QUEUE"="Geometry-100" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "TerrainCompatible"="true" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords: DIRECTIONAL
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (128 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set CUBE Texture "unity_SpecCube0" to slot 5 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 6 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 1

Constant Buffer "FGlobals" (416 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_SpecCube0_BoxMax at 48
  Vector4 unity_SpecCube0_BoxMin at 64
  Vector4 unity_SpecCube0_ProbePosition at 80
  Vector4 unity_SpecCube0_HDR at 96
  Vector4 unity_SpecCube1_BoxMax at 112
  Vector4 unity_SpecCube1_BoxMin at 128
  Vector4 unity_SpecCube1_ProbePosition at 144
  Vector4 unity_SpecCube1_HDR at 160
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 304
  Vector4 _Splat0_ST at 320
  Vector4 _Splat1_ST at 336
  Vector4 _Splat2_ST at 352
  Vector4 _Splat3_ST at 368
  Float _Metallic0 at 384
  Float _Metallic1 at 388
  Float _Metallic2 at 392
  Float _Metallic3 at 396
  Float _Smoothness0 at 400
  Float _Smoothness1 at 404
  Float _Smoothness2 at 408
  Float _Smoothness3 at 412
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(5) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    bool u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    bool3 u_xlatb9;
    float3 u_xlat10;
    bool3 u_xlatb11;
    float3 u_xlat12;
    float u_xlat13;
    float3 u_xlat14;
    bool u_xlatb14;
    float u_xlat24;
    float u_xlat25;
    float u_xlat26;
    float2 u_xlat27;
    float2 u_xlat28;
    float u_xlat36;
    float u_xlat37;
    float u_xlat38;
    float u_xlat40;
    bool u_xlatb40;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat1.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat37 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat37 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat27.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat28.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat27.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat28.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb14 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb14 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat14.xyz = (bool(u_xlatb14)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat14.xyz = u_xlat14.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat14.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat14.x = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat26 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat26, u_xlat14.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat14.x = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat14.x = clamp(u_xlat14.x, 0.0f, 1.0f);
    u_xlat26 = (-u_xlat3.w) + 1.0;
    u_xlat38 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat38 = u_xlat38 + u_xlat38;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat38)), (-u_xlat1.xyz));
    u_xlat5.xyz = u_xlat14.xxx * FGlobals._LightColor0.xyz;
    u_xlatb14 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb14){
        u_xlat14.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat14.x = rsqrt(u_xlat14.x);
        u_xlat6.xyz = u_xlat14.xxx * u_xlat4.xyz;
        u_xlat7.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = (float3(0.0, 0.0, 0.0)<u_xlat6.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat14.x = min(u_xlat7.y, u_xlat7.x);
        u_xlat14.x = min(u_xlat7.z, u_xlat14.x);
        u_xlat7.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    } else {
        u_xlat6.xyz = u_xlat4.xyz;
    }
    u_xlat14.x = fma((-u_xlat26), 0.699999988, 1.70000005);
    u_xlat14.x = u_xlat14.x * u_xlat26;
    u_xlat14.x = u_xlat14.x * 6.0;
    u_xlat6 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat6.xyz, level(u_xlat14.x));
    u_xlat38 = u_xlat6.w + -1.0;
    u_xlat38 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat38, 1.0);
    u_xlat38 = u_xlat38 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * float3(u_xlat38);
    u_xlatb40 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat40 = rsqrt(u_xlat40);
            u_xlat8.xyz = float3(u_xlat40) * u_xlat4.xyz;
            u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat8.xyz, float3(u_xlat40), u_xlat9.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat14.x));
        u_xlat14.x = u_xlat4.w + -1.0;
        u_xlat14.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat14.x, 1.0);
        u_xlat14.x = u_xlat14.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * u_xlat14.xxx;
        u_xlat6.xyz = fma(float3(u_xlat38), u_xlat6.xyz, (-u_xlat4.xyz));
        u_xlat7.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat6.xyz, u_xlat4.xyz);
    }
    u_xlat14.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat14.x = rsqrt(u_xlat14.x);
    u_xlat4.xyz = u_xlat14.xxx * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(u_xlat2.xxx, u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat36), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat0.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, float2(u_xlat26));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = fma(u_xlat12.x, u_xlat24, 1.0);
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat14.x = u_xlat25 * u_xlat25;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat25 = u_xlat25 * u_xlat14.x;
    u_xlat12.x = fma(u_xlat12.x, u_xlat25, 1.0);
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat26 * u_xlat26;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat14.x = (-u_xlat24) + 1.0;
    u_xlat38 = fma(abs(u_xlat36), u_xlat14.x, u_xlat24);
    u_xlat14.x = fma(u_xlat1.x, u_xlat14.x, u_xlat24);
    u_xlat36 = abs(u_xlat36) * u_xlat14.x;
    u_xlat36 = fma(u_xlat1.x, u_xlat38, u_xlat36);
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat14.x = u_xlat24 * u_xlat24;
    u_xlat38 = fma(u_xlat13, u_xlat14.x, (-u_xlat13));
    u_xlat13 = fma(u_xlat38, u_xlat13, 1.0);
    u_xlat14.x = u_xlat14.x * 0.318309873;
    u_xlat13 = fma(u_xlat13, u_xlat13, 1.00000001e-07);
    u_xlat13 = u_xlat14.x / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat36 = u_xlat36 * 3.14159274;
    u_xlat36 = max(u_xlat36, 9.99999975e-05);
    u_xlat12.z = sqrt(u_xlat36);
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat24 = u_xlat24 * u_xlat26;
    u_xlat24 = fma((-u_xlat24), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat12.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat5.xyz * float3(u_xlat36);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat5.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat2.xyz, u_xlat0.xyw);
    u_xlat2.xyz = u_xlat7.xyz * float3(u_xlat24);
    u_xlat3.xyz = (-u_xlat6.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat25), u_xlat3.xyz, u_xlat6.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = float3(u_xlat37) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat6));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat6), u_xlat0.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set CUBE Texture "unity_SpecCube0" to slot 5 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 6 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 1

Constant Buffer "FGlobals" (464 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Control_TexelSize at 352
  Vector4 _Splat0_ST at 368
  Vector4 _Splat1_ST at 384
  Vector4 _Splat2_ST at 400
  Vector4 _Splat3_ST at 416
  Float _Metallic0 at 432
  Float _Metallic1 at 436
  Float _Metallic2 at 440
  Float _Metallic3 at 444
  Float _Smoothness0 at 448
  Float _Smoothness1 at 452
  Float _Smoothness2 at 456
  Float _Smoothness3 at 460
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(5) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    bool u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat26;
    float u_xlat27;
    float u_xlat28;
    bool u_xlatb28;
    float2 u_xlat29;
    float2 u_xlat30;
    float u_xlat39;
    float u_xlat40;
    float u_xlat41;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat40 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat40 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat29.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat29.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat30.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb15 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb28 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb28)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat28 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat41 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat41, u_xlat28);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat28 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat28 = clamp(u_xlat28, 0.0f, 1.0f);
    u_xlat41 = (-u_xlat3.w) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat28) * FGlobals._LightColor0.xyz;
    if(u_xlatb15){
        u_xlatb15 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat15 = u_xlat6.y * 0.25;
        u_xlat28 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat15 = max(u_xlat28, u_xlat15);
        u_xlat6.x = min(u_xlat43, u_xlat15);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb15 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb15){
        u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat15 = rsqrt(u_xlat15);
        u_xlat7.xyz = float3(u_xlat15) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat15 = min(u_xlat8.y, u_xlat8.x);
        u_xlat15 = min(u_xlat8.z, u_xlat15);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat15 = fma((-u_xlat41), 0.699999988, 1.70000005);
    u_xlat15 = u_xlat15 * u_xlat41;
    u_xlat15 = u_xlat15 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat15));
    u_xlat28 = u_xlat7.w + -1.0;
    u_xlat28 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat28, 1.0);
    u_xlat28 = u_xlat28 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat28);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat15));
        u_xlat15 = u_xlat4.w + -1.0;
        u_xlat15 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat15, 1.0);
        u_xlat15 = u_xlat15 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat15);
        u_xlat7.xyz = fma(float3(u_xlat28), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat15 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * input.TEXCOORD0.xyz;
    u_xlat7.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat7.xyz = fma(u_xlat2.xxx, u_xlat7.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat15 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat15;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat15 = (-u_xlat26) + 1.0;
    u_xlat28 = fma(abs(u_xlat39), u_xlat15, u_xlat26);
    u_xlat15 = fma(u_xlat1.x, u_xlat15, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat15;
    u_xlat39 = fma(u_xlat1.x, u_xlat28, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat28 = fma(u_xlat14, u_xlat15, (-u_xlat14));
    u_xlat14 = fma(u_xlat28, u_xlat14, 1.0);
    u_xlat15 = u_xlat15 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat15 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat41;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat2.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat4.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat7.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat2.xyz, u_xlat0.xyw);
    u_xlat2.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat3.xyz, u_xlat7.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL SHADOWS_SCREEN
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    output.TEXCOORD0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD4.zw = u_xlat0.zw;
    output.TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 5 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 6 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 7 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 1

Constant Buffer "FGlobals" (512 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_SpecCube0_BoxMax at 144
  Vector4 unity_SpecCube0_BoxMin at 160
  Vector4 unity_SpecCube0_ProbePosition at 176
  Vector4 unity_SpecCube0_HDR at 192
  Vector4 unity_SpecCube1_BoxMax at 208
  Vector4 unity_SpecCube1_BoxMin at 224
  Vector4 unity_SpecCube1_ProbePosition at 240
  Vector4 unity_SpecCube1_HDR at 256
  Vector4 unity_ProbeVolumeParams at 272
  Vector3 unity_ProbeVolumeSizeInv at 352
  Vector3 unity_ProbeVolumeMin at 368
  Vector4 _LightColor0 at 384
  Vector4 _Control_TexelSize at 400
  Vector4 _Splat0_ST at 416
  Vector4 _Splat1_ST at 432
  Vector4 _Splat2_ST at 448
  Vector4 _Splat3_ST at 464
  Float _Metallic0 at 480
  Float _Metallic1 at 484
  Float _Metallic2 at 488
  Float _Metallic3 at 492
  Float _Smoothness0 at 496
  Float _Smoothness1 at 500
  Float _Smoothness2 at 504
  Float _Smoothness3 at 508
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(5) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(6) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    bool u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    bool3 u_xlatb9;
    float3 u_xlat10;
    bool3 u_xlatb11;
    float3 u_xlat12;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb14;
    float u_xlat24;
    float u_xlat25;
    float u_xlat26;
    bool u_xlatb26;
    float2 u_xlat27;
    float2 u_xlat28;
    float u_xlat36;
    float u_xlat37;
    float u_xlat38;
    float u_xlat40;
    bool u_xlatb40;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat1.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat37 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat37 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat27.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat28.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat27.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat28.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat14 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat26 = (-u_xlat14) + u_xlat26;
    u_xlat14 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat26, u_xlat14);
    u_xlat14 = fma(u_xlat14, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlatb26 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb26){
        u_xlatb26 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb26)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat26 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat38 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat38, u_xlat26);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat26 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD4.xy / input.TEXCOORD4.ww;
    u_xlat38 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat26 = (-u_xlat38) + u_xlat26;
    u_xlat14 = fma(u_xlat14, u_xlat26, u_xlat38);
    u_xlat26 = (-u_xlat3.w) + 1.0;
    u_xlat38 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat38 = u_xlat38 + u_xlat38;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat38)), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat14) * FGlobals._LightColor0.xyz;
    u_xlatb14 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb14){
        u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat14 = rsqrt(u_xlat14);
        u_xlat6.xyz = float3(u_xlat14) * u_xlat4.xyz;
        u_xlat7.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = (float3(0.0, 0.0, 0.0)<u_xlat6.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat14 = min(u_xlat7.y, u_xlat7.x);
        u_xlat14 = min(u_xlat7.z, u_xlat14);
        u_xlat7.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat14), u_xlat7.xyz);
    } else {
        u_xlat6.xyz = u_xlat4.xyz;
    }
    u_xlat14 = fma((-u_xlat26), 0.699999988, 1.70000005);
    u_xlat14 = u_xlat14 * u_xlat26;
    u_xlat14 = u_xlat14 * 6.0;
    u_xlat6 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat6.xyz, level(u_xlat14));
    u_xlat38 = u_xlat6.w + -1.0;
    u_xlat38 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat38, 1.0);
    u_xlat38 = u_xlat38 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * float3(u_xlat38);
    u_xlatb40 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat40 = rsqrt(u_xlat40);
            u_xlat8.xyz = float3(u_xlat40) * u_xlat4.xyz;
            u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat8.xyz, float3(u_xlat40), u_xlat9.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat14));
        u_xlat14 = u_xlat4.w + -1.0;
        u_xlat14 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat14, 1.0);
        u_xlat14 = u_xlat14 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat14);
        u_xlat6.xyz = fma(float3(u_xlat38), u_xlat6.xyz, (-u_xlat4.xyz));
        u_xlat7.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat6.xyz, u_xlat4.xyz);
    }
    u_xlat14 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat14 = rsqrt(u_xlat14);
    u_xlat4.xyz = float3(u_xlat14) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(u_xlat2.xxx, u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat36), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat0.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, float2(u_xlat26));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = fma(u_xlat12.x, u_xlat24, 1.0);
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat14 = u_xlat25 * u_xlat25;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat25 = u_xlat25 * u_xlat14;
    u_xlat12.x = fma(u_xlat12.x, u_xlat25, 1.0);
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat26 * u_xlat26;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat14 = (-u_xlat24) + 1.0;
    u_xlat38 = fma(abs(u_xlat36), u_xlat14, u_xlat24);
    u_xlat14 = fma(u_xlat1.x, u_xlat14, u_xlat24);
    u_xlat36 = abs(u_xlat36) * u_xlat14;
    u_xlat36 = fma(u_xlat1.x, u_xlat38, u_xlat36);
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat14 = u_xlat24 * u_xlat24;
    u_xlat38 = fma(u_xlat13, u_xlat14, (-u_xlat13));
    u_xlat13 = fma(u_xlat38, u_xlat13, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat13 = fma(u_xlat13, u_xlat13, 1.00000001e-07);
    u_xlat13 = u_xlat14 / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat36 = u_xlat36 * 3.14159274;
    u_xlat36 = max(u_xlat36, 9.99999975e-05);
    u_xlat12.z = sqrt(u_xlat36);
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat24 = u_xlat24 * u_xlat26;
    u_xlat24 = fma((-u_xlat24), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat12.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat5.xyz * float3(u_xlat36);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat5.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat2.xyz, u_xlat0.xyw);
    u_xlat2.xyz = u_xlat7.xyz * float3(u_xlat24);
    u_xlat3.xyz = (-u_xlat6.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat25), u_xlat3.xyz, u_xlat6.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = float3(u_xlat37) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_MatrixVP at 144
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    u_xlat1.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD0.xyz = u_xlat1.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat10 = u_xlat1.y * u_xlat1.y;
    u_xlat10 = fma(u_xlat1.x, u_xlat1.x, (-u_xlat10));
    u_xlat2 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat1.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat1.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat1.z = dot(VGlobals.unity_SHBb, u_xlat2);
    output.TEXCOORD3.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat10), u_xlat1.xyz);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD4.zw = u_xlat0.zw;
    output.TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 5 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 6 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 7 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 1

Constant Buffer "FGlobals" (560 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Control_TexelSize at 448
  Vector4 _Splat0_ST at 464
  Vector4 _Splat1_ST at 480
  Vector4 _Splat2_ST at 496
  Vector4 _Splat3_ST at 512
  Float _Metallic0 at 528
  Float _Metallic1 at 532
  Float _Metallic2 at 536
  Float _Metallic3 at 540
  Float _Smoothness0 at 544
  Float _Smoothness1 at 548
  Float _Smoothness2 at 552
  Float _Smoothness3 at 556
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(5) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(6) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    bool u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat26;
    float u_xlat27;
    float u_xlat28;
    bool u_xlatb28;
    float2 u_xlat29;
    float2 u_xlat30;
    float u_xlat39;
    float u_xlat40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat40 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat40 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat29.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat29.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat30.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = sqrt(u_xlat28);
    u_xlat28 = (-u_xlat15) + u_xlat28;
    u_xlat15 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat28, u_xlat15);
    u_xlat15 = fma(u_xlat15, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlatb28 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb28){
        u_xlatb41 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat41 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat17 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat41, u_xlat17);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat41 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat41 = clamp(u_xlat41, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD4.xy / input.TEXCOORD4.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat41 = u_xlat41 + (-u_xlat4.x);
    u_xlat15 = fma(u_xlat15, u_xlat41, u_xlat4.x);
    u_xlat41 = (-u_xlat3.w) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat15) * FGlobals._LightColor0.xyz;
    if(u_xlatb28){
        u_xlatb15 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat15 = u_xlat6.y * 0.25;
        u_xlat28 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat15 = max(u_xlat28, u_xlat15);
        u_xlat6.x = min(u_xlat43, u_xlat15);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb15 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb15){
        u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat15 = rsqrt(u_xlat15);
        u_xlat7.xyz = float3(u_xlat15) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat15 = min(u_xlat8.y, u_xlat8.x);
        u_xlat15 = min(u_xlat8.z, u_xlat15);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat15 = fma((-u_xlat41), 0.699999988, 1.70000005);
    u_xlat15 = u_xlat15 * u_xlat41;
    u_xlat15 = u_xlat15 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat15));
    u_xlat28 = u_xlat7.w + -1.0;
    u_xlat28 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat28, 1.0);
    u_xlat28 = u_xlat28 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat28);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat15));
        u_xlat15 = u_xlat4.w + -1.0;
        u_xlat15 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat15, 1.0);
        u_xlat15 = u_xlat15 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat15);
        u_xlat7.xyz = fma(float3(u_xlat28), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat15 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * input.TEXCOORD0.xyz;
    u_xlat7.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat7.xyz = fma(u_xlat2.xxx, u_xlat7.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat15 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat15;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat15 = (-u_xlat26) + 1.0;
    u_xlat28 = fma(abs(u_xlat39), u_xlat15, u_xlat26);
    u_xlat15 = fma(u_xlat1.x, u_xlat15, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat15;
    u_xlat39 = fma(u_xlat1.x, u_xlat28, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat28 = fma(u_xlat14, u_xlat15, (-u_xlat14));
    u_xlat14 = fma(u_xlat28, u_xlat14, 1.0);
    u_xlat15 = u_xlat15 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat15 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat41;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat2.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat4.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat7.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat2.xyz, u_xlat0.xyw);
    u_xlat2.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat3.xyz, u_xlat7.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 7
Set 2D Texture "_Normal1" to slot 6 sampler slot 8
Set 2D Texture "_Normal2" to slot 7 sampler slot 9
Set 2D Texture "_Normal3" to slot 8 sampler slot 10
Set CUBE Texture "unity_SpecCube0" to slot 9 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 10 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 1

Constant Buffer "FGlobals" (432 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_SpecCube0_BoxMax at 48
  Vector4 unity_SpecCube0_BoxMin at 64
  Vector4 unity_SpecCube0_ProbePosition at 80
  Vector4 unity_SpecCube0_HDR at 96
  Vector4 unity_SpecCube1_BoxMax at 112
  Vector4 unity_SpecCube1_BoxMin at 128
  Vector4 unity_SpecCube1_ProbePosition at 144
  Vector4 unity_SpecCube1_HDR at 160
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 304
  Vector4 _Splat0_ST at 320
  Vector4 _Splat1_ST at 336
  Vector4 _Splat2_ST at 352
  Vector4 _Splat3_ST at 368
  Float _NormalScale0 at 384
  Float _NormalScale1 at 388
  Float _NormalScale2 at 392
  Float _NormalScale3 at 396
  Float _Metallic0 at 400
  Float _Metallic1 at 404
  Float _Metallic2 at 408
  Float _Metallic3 at 412
  Float _Smoothness0 at 416
  Float _Smoothness1 at 420
  Float _Smoothness2 at 424
  Float _Smoothness3 at 428
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(9) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float u_xlat14;
    float u_xlat15;
    float3 u_xlat16;
    float3 u_xlat17;
    float u_xlat27;
    float u_xlat28;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat39;
    float u_xlat40;
    float u_xlat41;
    float u_xlat44;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat2.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat40 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat41);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat30.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat31.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat30.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat4.z = sqrt(u_xlat41);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat31.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat41 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat5.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat41 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb3 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat16.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat16.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat16.xyz);
        u_xlat16.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat16.xyz);
        u_xlat16.xyz = u_xlat16.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat16.xyz : u_xlat0.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16.x = fma(u_xlat3.y, 0.25, 0.75);
        u_xlat5.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat3.x = max(u_xlat16.x, u_xlat5.x);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    }
    u_xlat3.x = dot(u_xlat3, FGlobals.unity_OcclusionMaskSelector);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat16.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16.x = rsqrt(u_xlat16.x);
    u_xlat16.xyz = u_xlat16.xxx * u_xlat5.xyz;
    u_xlat4.x = (-u_xlat6.w) + 1.0;
    u_xlat17.x = dot((-u_xlat2.xyz), u_xlat16.xyz);
    u_xlat17.x = u_xlat17.x + u_xlat17.x;
    u_xlat17.xyz = fma(u_xlat16.xyz, (-u_xlat17.xxx), (-u_xlat2.xyz));
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlatb3 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb3){
        u_xlat3.x = dot(u_xlat17.xyz, u_xlat17.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        u_xlat7.xyz = u_xlat3.xxx * u_xlat17.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
        u_xlat8.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat17.xyz;
    }
    u_xlat3.x = fma((-u_xlat4.x), 0.699999988, 1.70000005);
    u_xlat3.x = u_xlat3.x * u_xlat4.x;
    u_xlat3.x = u_xlat3.x * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat3.x));
    u_xlat44 = u_xlat7.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat17.xyz, u_xlat17.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat9.xyz = u_xlat17.xyz * float3(u_xlat46);
            u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat17.xyz = fma(u_xlat9.xyz, float3(u_xlat46), u_xlat0.xyz);
        }
        u_xlat9 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat17.xyz, level(u_xlat3.x));
        u_xlat0.x = u_xlat9.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx;
        u_xlat17.xyz = fma(float3(u_xlat44), u_xlat7.xyz, (-u_xlat0.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat17.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat41), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat17.xyz = float3(u_xlat41) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat39 = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat16.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat16.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = dot(float2(u_xlat14), u_xlat4.xx);
    u_xlat14 = u_xlat14 + -0.5;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    u_xlat28 = u_xlat27 * u_xlat27;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat27 = u_xlat27 * u_xlat28;
    u_xlat27 = fma(u_xlat14, u_xlat27, 1.0);
    u_xlat28 = -abs(u_xlat39) + 1.0;
    u_xlat3.x = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat14 = fma(u_xlat14, u_xlat28, 1.0);
    u_xlat14 = u_xlat14 * u_xlat27;
    u_xlat14 = u_xlat2.x * u_xlat14;
    u_xlat27 = u_xlat4.x * u_xlat4.x;
    u_xlat27 = max(u_xlat27, 0.00200000009);
    u_xlat3.x = (-u_xlat27) + 1.0;
    u_xlat16.x = fma(abs(u_xlat39), u_xlat3.x, u_xlat27);
    u_xlat3.x = fma(u_xlat2.x, u_xlat3.x, u_xlat27);
    u_xlat39 = abs(u_xlat39) * u_xlat3.x;
    u_xlat39 = fma(u_xlat2.x, u_xlat16.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat3.x = u_xlat27 * u_xlat27;
    u_xlat16.x = fma(u_xlat15, u_xlat3.x, (-u_xlat15));
    u_xlat15 = fma(u_xlat16.x, u_xlat15, 1.0);
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat3.x / u_xlat15;
    u_xlat39 = u_xlat39 * u_xlat15;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat39 = sqrt(u_xlat39);
    u_xlat39 = u_xlat2.x * u_xlat39;
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat27 = fma((-u_xlat27), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat2.x = (-u_xlat41) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat39 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat39 * u_xlat39;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat39), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat17.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat28), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 7
Set 2D Texture "_Normal1" to slot 6 sampler slot 8
Set 2D Texture "_Normal2" to slot 7 sampler slot 9
Set 2D Texture "_Normal3" to slot 8 sampler slot 10
Set CUBE Texture "unity_SpecCube0" to slot 9 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 10 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 1

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Control_TexelSize at 352
  Vector4 _Splat0_ST at 368
  Vector4 _Splat1_ST at 384
  Vector4 _Splat2_ST at 400
  Vector4 _Splat3_ST at 416
  Float _NormalScale0 at 432
  Float _NormalScale1 at 436
  Float _NormalScale2 at 440
  Float _NormalScale3 at 444
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(9) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float u_xlat18;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    float2 u_xlat32;
    float2 u_xlat33;
    float u_xlat42;
    float u_xlat43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    float u_xlat47;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat33.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat32.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat33.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat32.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat44 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat4.z = sqrt(u_xlat44);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat33.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat44 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb3 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb17 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat17.xyz = (bool(u_xlatb17)) ? u_xlat5.xyz : u_xlat0.xyz;
        u_xlat17.xyz = u_xlat17.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat17.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat17.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat31 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat31, u_xlat17.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat17.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat17.x = clamp(u_xlat17.x, 0.0f, 1.0f);
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat4.xyz = float3(u_xlat31) * u_xlat5.xyz;
    u_xlat31 = (-u_xlat6.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat4.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = fma(u_xlat4.xyz, (-float3(u_xlat45)), (-u_xlat2.xyz));
    u_xlat7.xyz = u_xlat17.xxx * FGlobals._LightColor0.xyz;
    if(u_xlatb3){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat4);
        u_xlat9.y = dot(u_xlat10, u_xlat4);
        u_xlat9.z = dot(u_xlat8, u_xlat4);
    } else {
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(FGlobals.unity_SHAr, u_xlat4);
        u_xlat9.y = dot(FGlobals.unity_SHAg, u_xlat4);
        u_xlat9.z = dot(FGlobals.unity_SHAb, u_xlat4);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD4.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = fma(u_xlat3.xyw, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb46 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb46){
        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat46 = rsqrt(u_xlat46);
        u_xlat8.xyz = float3(u_xlat46) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
        u_xlat46 = min(u_xlat9.z, u_xlat46);
        u_xlat9.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat46), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat46 = fma((-u_xlat31), 0.699999988, 1.70000005);
    u_xlat46 = u_xlat31 * u_xlat46;
    u_xlat46 = u_xlat46 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat46));
    u_xlat47 = u_xlat8.w + -1.0;
    u_xlat47 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat47, 1.0);
    u_xlat47 = u_xlat47 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat47);
    u_xlatb49 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat49), u_xlat0.xyz);
        }
        u_xlat10 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat46));
        u_xlat0.x = u_xlat10.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx;
        u_xlat5.xyz = fma(float3(u_xlat47), u_xlat8.xyz, (-u_xlat0.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat5.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat44), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat44 = fma((-u_xlat44), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(float2(u_xlat15), float2(u_xlat31));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat29 = (-u_xlat2.x) + 1.0;
    u_xlat30 = u_xlat29 * u_xlat29;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat29 = u_xlat29 * u_xlat30;
    u_xlat29 = fma(u_xlat15, u_xlat29, 1.0);
    u_xlat30 = -abs(u_xlat42) + 1.0;
    u_xlat4.x = u_xlat30 * u_xlat30;
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat15 = fma(u_xlat15, u_xlat30, 1.0);
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat15 = u_xlat2.x * u_xlat15;
    u_xlat29 = u_xlat31 * u_xlat31;
    u_xlat29 = max(u_xlat29, 0.00200000009);
    u_xlat4.x = (-u_xlat29) + 1.0;
    u_xlat18 = fma(abs(u_xlat42), u_xlat4.x, u_xlat29);
    u_xlat4.x = fma(u_xlat2.x, u_xlat4.x, u_xlat29);
    u_xlat42 = abs(u_xlat42) * u_xlat4.x;
    u_xlat42 = fma(u_xlat2.x, u_xlat18, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat4.x = u_xlat29 * u_xlat29;
    u_xlat18 = fma(u_xlat16, u_xlat4.x, (-u_xlat16));
    u_xlat16 = fma(u_xlat18, u_xlat16, 1.0);
    u_xlat4.x = u_xlat4.x * 0.318309873;
    u_xlat16 = fma(u_xlat16, u_xlat16, 1.00000001e-07);
    u_xlat16 = u_xlat4.x / u_xlat16;
    u_xlat42 = u_xlat42 * u_xlat16;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = u_xlat2.x * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat31;
    u_xlat29 = fma((-u_xlat29), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat42 * u_xlat2.x;
    u_xlat2.x = (-u_xlat44) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat3.xyw);
    u_xlat4.xyz = u_xlat7.xyz * float3(u_xlat42);
    u_xlat42 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat42 * u_xlat42;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat42 = u_xlat42 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat5.xyz, u_xlat3.xyz, u_xlat4.xyz);
    u_xlat1.xyz = u_xlat9.xyz * float3(u_xlat29);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat30), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL SHADOWS_SCREEN _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 10 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 11 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 1

Constant Buffer "FGlobals" (528 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_SpecCube0_BoxMax at 144
  Vector4 unity_SpecCube0_BoxMin at 160
  Vector4 unity_SpecCube0_ProbePosition at 176
  Vector4 unity_SpecCube0_HDR at 192
  Vector4 unity_SpecCube1_BoxMax at 208
  Vector4 unity_SpecCube1_BoxMin at 224
  Vector4 unity_SpecCube1_ProbePosition at 240
  Vector4 unity_SpecCube1_HDR at 256
  Vector4 unity_ProbeVolumeParams at 272
  Vector3 unity_ProbeVolumeSizeInv at 352
  Vector3 unity_ProbeVolumeMin at 368
  Vector4 _LightColor0 at 384
  Vector4 _Control_TexelSize at 400
  Vector4 _Splat0_ST at 416
  Vector4 _Splat1_ST at 432
  Vector4 _Splat2_ST at 448
  Vector4 _Splat3_ST at 464
  Float _NormalScale0 at 480
  Float _NormalScale1 at 484
  Float _NormalScale2 at 488
  Float _NormalScale3 at 492
  Float _Metallic0 at 496
  Float _Metallic1 at 500
  Float _Metallic2 at 504
  Float _Metallic3 at 508
  Float _Smoothness0 at 512
  Float _Smoothness1 at 516
  Float _Smoothness2 at 520
  Float _Smoothness3 at 524
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(10) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float u_xlat14;
    float u_xlat15;
    float3 u_xlat16;
    bool u_xlatb16;
    float3 u_xlat17;
    float u_xlat27;
    float u_xlat28;
    float2 u_xlat29;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat39;
    float u_xlat40;
    float u_xlat41;
    float u_xlat44;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat2.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat40 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat41);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat30.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat31.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat30.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat4.z = sqrt(u_xlat41);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat31.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat41 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat5.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat41 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat16.xyz = u_xlat0.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat16.x = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = (-u_xlat3.x) + u_xlat16.x;
    u_xlat3.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat16.x, u_xlat3.x);
    u_xlat3.x = fma(u_xlat3.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlatb16 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb16){
        u_xlatb16 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat16.xyz = (bool(u_xlatb16)) ? u_xlat5.xyz : u_xlat0.xyz;
        u_xlat16.xyz = u_xlat16.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat16.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat29.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat29.x, u_xlat16.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat16.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16.x = clamp(u_xlat16.x, 0.0f, 1.0f);
    u_xlat29.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat29.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat29.xy).x;
    u_xlat16.x = (-u_xlat29.x) + u_xlat16.x;
    u_xlat3.x = fma(u_xlat3.x, u_xlat16.x, u_xlat29.x);
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat16.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16.x = rsqrt(u_xlat16.x);
    u_xlat16.xyz = u_xlat16.xxx * u_xlat5.xyz;
    u_xlat4.x = (-u_xlat6.w) + 1.0;
    u_xlat17.x = dot((-u_xlat2.xyz), u_xlat16.xyz);
    u_xlat17.x = u_xlat17.x + u_xlat17.x;
    u_xlat17.xyz = fma(u_xlat16.xyz, (-u_xlat17.xxx), (-u_xlat2.xyz));
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlatb3 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb3){
        u_xlat3.x = dot(u_xlat17.xyz, u_xlat17.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        u_xlat7.xyz = u_xlat3.xxx * u_xlat17.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
        u_xlat8.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat17.xyz;
    }
    u_xlat3.x = fma((-u_xlat4.x), 0.699999988, 1.70000005);
    u_xlat3.x = u_xlat3.x * u_xlat4.x;
    u_xlat3.x = u_xlat3.x * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat3.x));
    u_xlat44 = u_xlat7.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat17.xyz, u_xlat17.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat9.xyz = u_xlat17.xyz * float3(u_xlat46);
            u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat17.xyz = fma(u_xlat9.xyz, float3(u_xlat46), u_xlat0.xyz);
        }
        u_xlat9 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat17.xyz, level(u_xlat3.x));
        u_xlat0.x = u_xlat9.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx;
        u_xlat17.xyz = fma(float3(u_xlat44), u_xlat7.xyz, (-u_xlat0.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat17.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat41), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat17.xyz = float3(u_xlat41) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat39 = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat16.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat16.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = dot(float2(u_xlat14), u_xlat4.xx);
    u_xlat14 = u_xlat14 + -0.5;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    u_xlat28 = u_xlat27 * u_xlat27;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat27 = u_xlat27 * u_xlat28;
    u_xlat27 = fma(u_xlat14, u_xlat27, 1.0);
    u_xlat28 = -abs(u_xlat39) + 1.0;
    u_xlat3.x = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat14 = fma(u_xlat14, u_xlat28, 1.0);
    u_xlat14 = u_xlat14 * u_xlat27;
    u_xlat14 = u_xlat2.x * u_xlat14;
    u_xlat27 = u_xlat4.x * u_xlat4.x;
    u_xlat27 = max(u_xlat27, 0.00200000009);
    u_xlat3.x = (-u_xlat27) + 1.0;
    u_xlat16.x = fma(abs(u_xlat39), u_xlat3.x, u_xlat27);
    u_xlat3.x = fma(u_xlat2.x, u_xlat3.x, u_xlat27);
    u_xlat39 = abs(u_xlat39) * u_xlat3.x;
    u_xlat39 = fma(u_xlat2.x, u_xlat16.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat3.x = u_xlat27 * u_xlat27;
    u_xlat16.x = fma(u_xlat15, u_xlat3.x, (-u_xlat15));
    u_xlat15 = fma(u_xlat16.x, u_xlat15, 1.0);
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat3.x / u_xlat15;
    u_xlat39 = u_xlat39 * u_xlat15;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat39 = sqrt(u_xlat39);
    u_xlat39 = u_xlat2.x * u_xlat39;
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat27 = fma((-u_xlat27), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat2.x = (-u_xlat41) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat39 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat39 * u_xlat39;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat39), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat17.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat28), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 10 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 11 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 1

Constant Buffer "FGlobals" (576 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Control_TexelSize at 448
  Vector4 _Splat0_ST at 464
  Vector4 _Splat1_ST at 480
  Vector4 _Splat2_ST at 496
  Vector4 _Splat3_ST at 512
  Float _NormalScale0 at 528
  Float _NormalScale1 at 532
  Float _NormalScale2 at 536
  Float _NormalScale3 at 540
  Float _Metallic0 at 544
  Float _Metallic1 at 548
  Float _Metallic2 at 552
  Float _Metallic3 at 556
  Float _Smoothness0 at 560
  Float _Smoothness1 at 564
  Float _Smoothness2 at 568
  Float _Smoothness3 at 572
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(10) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float u_xlat18;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    bool u_xlatb31;
    float2 u_xlat32;
    float2 u_xlat33;
    float u_xlat42;
    float u_xlat43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    float u_xlat47;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat33.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat32.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat33.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat32.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat44 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat4.z = sqrt(u_xlat44);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat33.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat44 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat17.xyz = u_xlat0.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat17.x = (-u_xlat3.x) + u_xlat17.x;
    u_xlat3.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat17.x, u_xlat3.x);
    u_xlat3.x = fma(u_xlat3.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlatb17 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb17){
        u_xlatb31 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb31)) ? u_xlat5.xyz : u_xlat0.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat31 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat45, u_xlat31);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat31 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat31 = clamp(u_xlat31, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat45 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat31 = (-u_xlat45) + u_xlat31;
    u_xlat3.x = fma(u_xlat3.x, u_xlat31, u_xlat45);
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat4.xyz = float3(u_xlat31) * u_xlat5.xyz;
    u_xlat31 = (-u_xlat6.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat4.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = fma(u_xlat4.xyz, (-float3(u_xlat45)), (-u_xlat2.xyz));
    u_xlat7.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    if(u_xlatb17){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat4);
        u_xlat9.y = dot(u_xlat10, u_xlat4);
        u_xlat9.z = dot(u_xlat8, u_xlat4);
    } else {
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(FGlobals.unity_SHAr, u_xlat4);
        u_xlat9.y = dot(FGlobals.unity_SHAg, u_xlat4);
        u_xlat9.z = dot(FGlobals.unity_SHAb, u_xlat4);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD4.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = fma(u_xlat3.xyw, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb46 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb46){
        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat46 = rsqrt(u_xlat46);
        u_xlat8.xyz = float3(u_xlat46) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
        u_xlat46 = min(u_xlat9.z, u_xlat46);
        u_xlat9.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat46), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat46 = fma((-u_xlat31), 0.699999988, 1.70000005);
    u_xlat46 = u_xlat31 * u_xlat46;
    u_xlat46 = u_xlat46 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat46));
    u_xlat47 = u_xlat8.w + -1.0;
    u_xlat47 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat47, 1.0);
    u_xlat47 = u_xlat47 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat47);
    u_xlatb49 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat49), u_xlat0.xyz);
        }
        u_xlat10 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat46));
        u_xlat0.x = u_xlat10.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx;
        u_xlat5.xyz = fma(float3(u_xlat47), u_xlat8.xyz, (-u_xlat0.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat5.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat44), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat44 = fma((-u_xlat44), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(float2(u_xlat15), float2(u_xlat31));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat29 = (-u_xlat2.x) + 1.0;
    u_xlat30 = u_xlat29 * u_xlat29;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat29 = u_xlat29 * u_xlat30;
    u_xlat29 = fma(u_xlat15, u_xlat29, 1.0);
    u_xlat30 = -abs(u_xlat42) + 1.0;
    u_xlat4.x = u_xlat30 * u_xlat30;
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat15 = fma(u_xlat15, u_xlat30, 1.0);
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat15 = u_xlat2.x * u_xlat15;
    u_xlat29 = u_xlat31 * u_xlat31;
    u_xlat29 = max(u_xlat29, 0.00200000009);
    u_xlat4.x = (-u_xlat29) + 1.0;
    u_xlat18 = fma(abs(u_xlat42), u_xlat4.x, u_xlat29);
    u_xlat4.x = fma(u_xlat2.x, u_xlat4.x, u_xlat29);
    u_xlat42 = abs(u_xlat42) * u_xlat4.x;
    u_xlat42 = fma(u_xlat2.x, u_xlat18, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat4.x = u_xlat29 * u_xlat29;
    u_xlat18 = fma(u_xlat16, u_xlat4.x, (-u_xlat16));
    u_xlat16 = fma(u_xlat18, u_xlat16, 1.0);
    u_xlat4.x = u_xlat4.x * 0.318309873;
    u_xlat16 = fma(u_xlat16, u_xlat16, 1.00000001e-07);
    u_xlat16 = u_xlat4.x / u_xlat16;
    u_xlat42 = u_xlat42 * u_xlat16;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = u_xlat2.x * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat31;
    u_xlat29 = fma((-u_xlat29), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat42 * u_xlat2.x;
    u_xlat2.x = (-u_xlat44) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat3.xyw);
    u_xlat4.xyz = u_xlat7.xyz * float3(u_xlat42);
    u_xlat42 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat42 * u_xlat42;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat42 = u_xlat42 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat5.xyz, u_xlat3.xyz, u_xlat4.xyz);
    u_xlat1.xyz = u_xlat9.xyz * float3(u_xlat29);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat30), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL VERTEXLIGHT_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (128 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH VERTEXLIGHT_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (384 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 256
  Matrix4x4 unity_MatrixVP at 320
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_LightColor[8] at 64
  Vector4 unity_SHBr at 192
  Vector4 unity_SHBg at 208
  Vector4 unity_SHBb at 224
  Vector4 unity_SHC at 240
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float u_xlat15;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat1.xyz = float3(u_xlat15) * u_xlat1.xyz;
    output.TEXCOORD0.xyz = u_xlat1.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat2 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat4 = u_xlat1.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = fma(u_xlat2, u_xlat2, u_xlat3);
    u_xlat2 = fma(u_xlat2, u_xlat1.xxxx, u_xlat4);
    u_xlat2 = fma(u_xlat0, u_xlat1.zzzz, u_xlat2);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat3);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat3;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat2.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat15 = u_xlat1.y * u_xlat1.y;
    u_xlat15 = fma(u_xlat1.x, u_xlat1.x, (-u_xlat15));
    u_xlat1 = u_xlat1.yzzx * u_xlat1.xyzz;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat1);
    u_xlat1.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat15), u_xlat3.xyz);
    output.TEXCOORD3.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, u_xlat1.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL SHADOWS_SCREEN VERTEXLIGHT_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    output.TEXCOORD0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD4.zw = u_xlat0.zw;
    output.TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN VERTEXLIGHT_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (400 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_MatrixVP at 336
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float u_xlat18;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat1;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat2.xyz = float3(u_xlat18) * u_xlat2.xyz;
    output.TEXCOORD0.xyz = u_xlat2.xyz;
    output.TEXCOORD1.xyz = u_xlat0.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat3 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat5 = u_xlat2.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = fma(u_xlat3, u_xlat3, u_xlat4);
    u_xlat3 = fma(u_xlat3, u_xlat2.xxxx, u_xlat5);
    u_xlat3 = fma(u_xlat0, u_xlat2.zzzz, u_xlat3);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat4);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat3 = u_xlat3 * u_xlat4;
    u_xlat3 = max(u_xlat3, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat3;
    u_xlat3.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat3.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat3.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat3.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat3.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat3.xyz = fma(u_xlat0.xyz, u_xlat3.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat18 = u_xlat2.y * u_xlat2.y;
    u_xlat18 = fma(u_xlat2.x, u_xlat2.x, (-u_xlat18));
    u_xlat2 = u_xlat2.yzzx * u_xlat2.xyzz;
    u_xlat4.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat4.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat4.z = dot(VGlobals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat18), u_xlat4.xyz);
    output.TEXCOORD3.xyz = fma(u_xlat0.xyz, u_xlat3.xyz, u_xlat2.xyz);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD4.zw = u_xlat1.zw;
    output.TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat0.xw));
    u_xlat1.xyz = u_xlat0.www * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xy = input.TEXCOORD0.xy;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_WorldTransformParams at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat0.xw));
    u_xlat1.xyz = u_xlat0.www * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD0.x = u_xlat1.z;
    u_xlat2 = input.NORMAL0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyzz, input.NORMAL0.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyzz, input.NORMAL0.zzzz, u_xlat2);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * u_xlat2;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = fma(u_xlat2.ywx, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.z = u_xlat2.x;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD1.z = u_xlat2.y;
    output.TEXCOORD2.z = u_xlat2.w;
    output.TEXCOORD3.xy = input.TEXCOORD0.xy;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = fma(u_xlat2.x, u_xlat2.x, (-u_xlat0.x));
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL SHADOWS_SCREEN _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (160 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 80
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat0.xw));
    u_xlat2.xyz = u_xlat0.www * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = fma(u_xlat3.zxy, u_xlat2.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat3.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat3.z;
    output.TEXCOORD2.z = u_xlat3.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    output.TEXCOORD3.xy = input.TEXCOORD0.xy;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_WorldTransformParams at 144
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat0.xw));
    u_xlat2.xyz = u_xlat0.www * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    output.TEXCOORD0.x = u_xlat2.z;
    u_xlat3 = input.NORMAL0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyzz, input.NORMAL0.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyzz, input.NORMAL0.zzzz, u_xlat3);
    u_xlat0.x = dot(u_xlat3.xyw, u_xlat3.xyw);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * u_xlat3;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = fma(u_xlat3.ywx, u_xlat2.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.z = u_xlat3.x;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    output.TEXCOORD1.z = u_xlat3.y;
    output.TEXCOORD2.z = u_xlat3.w;
    output.TEXCOORD3.xy = input.TEXCOORD0.xy;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat3.y * u_xlat3.y;
    u_xlat0.x = fma(u_xlat3.x, u_xlat3.x, (-u_xlat0.x));
    u_xlat2 = u_xlat3.ywzx * u_xlat3;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat2);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat3.xyz);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL VERTEXLIGHT_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat0.xw));
    u_xlat1.xyz = u_xlat0.www * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xy = input.TEXCOORD0.xy;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH VERTEXLIGHT_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (400 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 256
  Matrix4x4 unity_MatrixVP at 336
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_LightColor[8] at 64
  Vector4 unity_SHBr at 192
  Vector4 unity_SHBg at 208
  Vector4 unity_SHBb at 224
  Vector4 unity_SHC at 240
  Vector4 unity_WorldTransformParams at 320
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat6;
    float u_xlat15;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat1.xy));
    u_xlat6.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat1.xxx, u_xlat6.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat1.xyz = float3(u_xlat15) * u_xlat1.xyz;
    output.TEXCOORD0.x = u_xlat1.z;
    u_xlat2 = input.NORMAL0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyzz, input.NORMAL0.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyzz, input.NORMAL0.zzzz, u_xlat2);
    u_xlat15 = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat2 = float4(u_xlat15) * u_xlat2;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = fma(u_xlat2.ywx, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.w = u_xlat0.x;
    output.TEXCOORD0.z = u_xlat2.x;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD1.z = u_xlat2.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat2.w;
    output.TEXCOORD3.xy = input.TEXCOORD0.xy;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat1 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = fma(u_xlat1, u_xlat1, u_xlat3);
    u_xlat1 = fma(u_xlat1, u_xlat2.xxxx, u_xlat4);
    u_xlat1 = fma(u_xlat0, u_xlat2.wwzw, u_xlat1);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat3);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat1.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat15 = u_xlat2.y * u_xlat2.y;
    u_xlat15 = fma(u_xlat2.x, u_xlat2.x, (-u_xlat15));
    u_xlat2 = u_xlat2.ywzx * u_xlat2;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat15), u_xlat3.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, u_xlat2.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL SHADOWS_SCREEN VERTEXLIGHT_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (160 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 80
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat0.xw));
    u_xlat2.xyz = u_xlat0.www * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = fma(u_xlat3.zxy, u_xlat2.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat3.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat3.z;
    output.TEXCOORD2.z = u_xlat3.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    output.TEXCOORD3.xy = input.TEXCOORD0.xy;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN VERTEXLIGHT_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (416 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_MatrixVP at 352
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 unity_WorldTransformParams at 336
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat8;
    float u_xlat18;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat1;
    u_xlat2.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat2.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat2.xy));
    u_xlat8.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat2.xxx, u_xlat8.xyz);
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat2.xyz = float3(u_xlat18) * u_xlat2.xyz;
    output.TEXCOORD0.x = u_xlat2.z;
    u_xlat3 = input.NORMAL0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyzz, input.NORMAL0.xxxx, u_xlat3);
    u_xlat3 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyzz, input.NORMAL0.zzzz, u_xlat3);
    u_xlat18 = dot(u_xlat3.xyw, u_xlat3.xyw);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3 = float4(u_xlat18) * u_xlat3;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = fma(u_xlat3.ywx, u_xlat2.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.w = u_xlat0.x;
    output.TEXCOORD0.z = u_xlat3.x;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD1.z = u_xlat3.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat3.w;
    output.TEXCOORD3.xy = input.TEXCOORD0.xy;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    u_xlat2 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat5 = u_xlat3.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = fma(u_xlat2, u_xlat2, u_xlat4);
    u_xlat2 = fma(u_xlat2, u_xlat3.xxxx, u_xlat5);
    u_xlat2 = fma(u_xlat0, u_xlat3.wwzw, u_xlat2);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat4);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat2.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat18 = u_xlat3.y * u_xlat3.y;
    u_xlat18 = fma(u_xlat3.x, u_xlat3.x, (-u_xlat18));
    u_xlat3 = u_xlat3.ywzx * u_xlat3;
    u_xlat4.x = dot(VGlobals.unity_SHBr, u_xlat3);
    u_xlat4.y = dot(VGlobals.unity_SHBg, u_xlat3);
    u_xlat4.z = dot(VGlobals.unity_SHBb, u_xlat3);
    u_xlat3.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat18), u_xlat4.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, u_xlat3.xyz);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 144
  Vector4 _TerrainHeightmapScale at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_WorldTransformParams at 128
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    output.TEXCOORD0.x = u_xlat1.z;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = fma(u_xlat2.ywx, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.z = u_xlat2.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD1.z = u_xlat2.y;
    output.TEXCOORD2.z = u_xlat2.w;
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = fma(u_xlat2.x, u_xlat2.x, (-u_xlat0.x));
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 80
  Vector4 _TerrainHeightmapRecipSize at 160
  Vector4 _TerrainHeightmapScale at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float2 u_xlat5;
    float u_xlat15;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat5.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat5.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat5.xy);
    u_xlat15 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat5.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat5.xy;
    u_xlat5.x = u_xlat15 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat5.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat5.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat5.xy = u_xlat5.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat5.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.x = u_xlat3.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat3.x;
    output.TEXCOORD2.x = u_xlat3.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH SHADOWS_SCREEN
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (256 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_WorldTransformParams at 144
  Vector4 _TerrainHeightmapRecipSize at 224
  Vector4 _TerrainHeightmapScale at 240
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float2 u_xlat5;
    float u_xlat15;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat5.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat5.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat5.xy);
    u_xlat15 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat5.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat5.xy;
    u_xlat5.x = u_xlat15 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat5.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat5.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat5.xy = u_xlat5.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat5.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    output.TEXCOORD0.x = u_xlat2.z;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = fma(u_xlat3.ywx, u_xlat2.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.z = u_xlat3.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    output.TEXCOORD1.z = u_xlat3.y;
    output.TEXCOORD2.z = u_xlat3.w;
    u_xlat0.x = u_xlat3.y * u_xlat3.y;
    u_xlat0.x = fma(u_xlat3.x, u_xlat3.x, (-u_xlat0.x));
    u_xlat2 = u_xlat3.ywzx * u_xlat3;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat2);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat3.xyz);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON VERTEXLIGHT_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 144
  Vector4 _TerrainHeightmapScale at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH VERTEXLIGHT_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (432 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 256
  Matrix4x4 unity_MatrixVP at 336
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_LightColor[8] at 64
  Vector4 unity_SHBr at 192
  Vector4 unity_SHBg at 208
  Vector4 unity_SHBb at 224
  Vector4 unity_SHC at 240
  Vector4 unity_WorldTransformParams at 320
  Vector4 _TerrainHeightmapRecipSize at 400
  Vector4 _TerrainHeightmapScale at 416
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float2 u_xlat5;
    float u_xlat15;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat5.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat5.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat5.xy);
    u_xlat15 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat5.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat5.xy;
    u_xlat5.x = u_xlat15 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat5.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat5.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat5.xy = u_xlat5.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat5.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat15 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat1.xyz = float3(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    output.TEXCOORD0.x = u_xlat1.z;
    u_xlat15 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat2 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = fma(u_xlat2.ywx, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.z = u_xlat2.x;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD1.z = u_xlat2.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat2.w;
    u_xlat1 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = fma(u_xlat1, u_xlat1, u_xlat3);
    u_xlat1 = fma(u_xlat1, u_xlat2.xxxx, u_xlat4);
    u_xlat1 = fma(u_xlat0, u_xlat2.wwzw, u_xlat1);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat3);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat1.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat15 = u_xlat2.y * u_xlat2.y;
    u_xlat15 = fma(u_xlat2.x, u_xlat2.x, (-u_xlat15));
    u_xlat2 = u_xlat2.ywzx * u_xlat2;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat15), u_xlat3.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, u_xlat2.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN VERTEXLIGHT_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 80
  Vector4 _TerrainHeightmapRecipSize at 160
  Vector4 _TerrainHeightmapScale at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float2 u_xlat5;
    float u_xlat15;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat5.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat5.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat5.xy);
    u_xlat15 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat5.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat5.xy;
    u_xlat5.x = u_xlat15 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat5.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat5.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat5.xy = u_xlat5.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat5.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.x = u_xlat3.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat3.x;
    output.TEXCOORD2.x = u_xlat3.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH SHADOWS_SCREEN VERTEXLIGHT_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (448 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_MatrixVP at 352
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 unity_WorldTransformParams at 336
  Vector4 _TerrainHeightmapRecipSize at 416
  Vector4 _TerrainHeightmapScale at 432
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float2 u_xlat6;
    float u_xlat18;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat6.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat6.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat6.xy);
    u_xlat18 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat6.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat6.xy;
    u_xlat6.x = u_xlat18 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat6.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat6.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat6.xy = u_xlat6.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat6.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat18 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat2.xyz = float3(u_xlat18) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    output.TEXCOORD0.x = u_xlat2.z;
    u_xlat18 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3 = float4(u_xlat18) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = fma(u_xlat3.ywx, u_xlat2.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.z = u_xlat3.x;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    output.TEXCOORD1.z = u_xlat3.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat3.w;
    u_xlat2 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat5 = u_xlat3.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = fma(u_xlat2, u_xlat2, u_xlat4);
    u_xlat2 = fma(u_xlat2, u_xlat3.xxxx, u_xlat5);
    u_xlat2 = fma(u_xlat0, u_xlat3.wwzw, u_xlat2);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat4);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat2.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat18 = u_xlat3.y * u_xlat3.y;
    u_xlat18 = fma(u_xlat3.x, u_xlat3.x, (-u_xlat18));
    u_xlat3 = u_xlat3.ywzx * u_xlat3;
    u_xlat4.x = dot(VGlobals.unity_SHBr, u_xlat3);
    u_xlat4.y = dot(VGlobals.unity_SHBg, u_xlat3);
    u_xlat4.z = dot(VGlobals.unity_SHBb, u_xlat3);
    u_xlat3.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat18), u_xlat4.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, u_xlat3.xyz);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 144
  Vector4 _TerrainHeightmapScale at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_WorldTransformParams at 128
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    output.TEXCOORD0.x = u_xlat1.z;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = fma(u_xlat2.ywx, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.z = u_xlat2.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD1.z = u_xlat2.y;
    output.TEXCOORD2.z = u_xlat2.w;
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = fma(u_xlat2.x, u_xlat2.x, (-u_xlat0.x));
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 80
  Vector4 _TerrainHeightmapRecipSize at 160
  Vector4 _TerrainHeightmapScale at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float2 u_xlat5;
    float u_xlat15;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat5.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat5.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat5.xy);
    u_xlat15 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat5.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat5.xy;
    u_xlat5.x = u_xlat15 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat5.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat5.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat5.xy = u_xlat5.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat5.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.x = u_xlat3.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat3.x;
    output.TEXCOORD2.x = u_xlat3.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH SHADOWS_SCREEN _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (256 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 80
  Matrix4x4 unity_MatrixVP at 160
  Vector4 _ProjectionParams at 0
  Vector4 unity_SHBr at 16
  Vector4 unity_SHBg at 32
  Vector4 unity_SHBb at 48
  Vector4 unity_SHC at 64
  Vector4 unity_WorldTransformParams at 144
  Vector4 _TerrainHeightmapRecipSize at 224
  Vector4 _TerrainHeightmapScale at 240
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float2 u_xlat5;
    float u_xlat15;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat5.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat5.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat5.xy);
    u_xlat15 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat5.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat5.xy;
    u_xlat5.x = u_xlat15 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat5.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat5.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat5.xy = u_xlat5.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat5.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    output.TEXCOORD0.x = u_xlat2.z;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = fma(u_xlat3.ywx, u_xlat2.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.z = u_xlat3.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    output.TEXCOORD1.z = u_xlat3.y;
    output.TEXCOORD2.z = u_xlat3.w;
    u_xlat0.x = u_xlat3.y * u_xlat3.y;
    u_xlat0.x = fma(u_xlat3.x, u_xlat3.x, (-u_xlat0.x));
    u_xlat2 = u_xlat3.ywzx * u_xlat3;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat2);
    output.TEXCOORD4.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat3.xyz);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON VERTEXLIGHT_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 144
  Vector4 _TerrainHeightmapScale at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH VERTEXLIGHT_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (432 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 256
  Matrix4x4 unity_MatrixVP at 336
  Vector4 unity_4LightPosX0 at 0
  Vector4 unity_4LightPosY0 at 16
  Vector4 unity_4LightPosZ0 at 32
  Vector4 unity_4LightAtten0 at 48
  Vector4 unity_LightColor[8] at 64
  Vector4 unity_SHBr at 192
  Vector4 unity_SHBg at 208
  Vector4 unity_SHBb at 224
  Vector4 unity_SHC at 240
  Vector4 unity_WorldTransformParams at 320
  Vector4 _TerrainHeightmapRecipSize at 400
  Vector4 _TerrainHeightmapScale at 416
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float2 u_xlat5;
    float u_xlat15;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat5.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat5.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat5.xy);
    u_xlat15 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat5.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat5.xy;
    u_xlat5.x = u_xlat15 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat5.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat5.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat5.xy = u_xlat5.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat5.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat15 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat1.xyz = float3(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    output.TEXCOORD0.x = u_xlat1.z;
    u_xlat15 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat2 = float4(u_xlat15) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = fma(u_xlat2.ywx, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.z = u_xlat2.x;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD1.z = u_xlat2.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat2.w;
    u_xlat1 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat3 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat4 = u_xlat2.yyyy * u_xlat3;
    u_xlat3 = u_xlat3 * u_xlat3;
    u_xlat3 = fma(u_xlat1, u_xlat1, u_xlat3);
    u_xlat1 = fma(u_xlat1, u_xlat2.xxxx, u_xlat4);
    u_xlat1 = fma(u_xlat0, u_xlat2.wwzw, u_xlat1);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat3);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat3 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat1 = max(u_xlat1, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat1;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat1.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat1.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat1.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat15 = u_xlat2.y * u_xlat2.y;
    u_xlat15 = fma(u_xlat2.x, u_xlat2.x, (-u_xlat15));
    u_xlat2 = u_xlat2.ywzx * u_xlat2;
    u_xlat3.x = dot(VGlobals.unity_SHBr, u_xlat2);
    u_xlat3.y = dot(VGlobals.unity_SHBg, u_xlat2);
    u_xlat3.z = dot(VGlobals.unity_SHBb, u_xlat2);
    u_xlat2.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat15), u_xlat3.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat0.xyz, u_xlat1.xyz, u_xlat2.xyz);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN VERTEXLIGHT_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 80
  Vector4 _TerrainHeightmapRecipSize at 160
  Vector4 _TerrainHeightmapScale at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float2 u_xlat5;
    float u_xlat15;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat5.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat5.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat5.xy);
    u_xlat15 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat5.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat5.xy;
    u_xlat5.x = u_xlat15 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat5.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat5.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat5.xy = u_xlat5.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat5.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.x = u_xlat3.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat3.x;
    output.TEXCOORD2.x = u_xlat3.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH SHADOWS_SCREEN VERTEXLIGHT_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (448 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 272
  Matrix4x4 unity_MatrixVP at 352
  Vector4 _ProjectionParams at 0
  Vector4 unity_4LightPosX0 at 16
  Vector4 unity_4LightPosY0 at 32
  Vector4 unity_4LightPosZ0 at 48
  Vector4 unity_4LightAtten0 at 64
  Vector4 unity_LightColor[8] at 80
  Vector4 unity_SHBr at 208
  Vector4 unity_SHBg at 224
  Vector4 unity_SHBb at 240
  Vector4 unity_SHC at 256
  Vector4 unity_WorldTransformParams at 336
  Vector4 _TerrainHeightmapRecipSize at 416
  Vector4 _TerrainHeightmapScale at 432
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float2 u_xlat6;
    float u_xlat18;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat6.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat6.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat6.xy);
    u_xlat18 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat6.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat6.xy;
    u_xlat6.x = u_xlat18 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat6.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat6.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat6.xy = u_xlat6.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat6.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat18 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat2.xyz = float3(u_xlat18) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    output.TEXCOORD0.x = u_xlat2.z;
    u_xlat18 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3 = float4(u_xlat18) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
    u_xlat4.xyz = fma(u_xlat3.ywx, u_xlat2.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.z = u_xlat3.x;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    output.TEXCOORD1.z = u_xlat3.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat3.w;
    u_xlat2 = (-u_xlat0.xxxx) + VGlobals.unity_4LightPosX0;
    u_xlat4 = (-u_xlat0.yyyy) + VGlobals.unity_4LightPosY0;
    u_xlat0 = (-u_xlat0.zzzz) + VGlobals.unity_4LightPosZ0;
    u_xlat5 = u_xlat3.yyyy * u_xlat4;
    u_xlat4 = u_xlat4 * u_xlat4;
    u_xlat4 = fma(u_xlat2, u_xlat2, u_xlat4);
    u_xlat2 = fma(u_xlat2, u_xlat3.xxxx, u_xlat5);
    u_xlat2 = fma(u_xlat0, u_xlat3.wwzw, u_xlat2);
    u_xlat0 = fma(u_xlat0, u_xlat0, u_xlat4);
    u_xlat0 = max(u_xlat0, float4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
    u_xlat4 = rsqrt(u_xlat0);
    u_xlat0 = fma(u_xlat0, VGlobals.unity_4LightAtten0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat0 = float4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
    u_xlat2 = u_xlat2 * u_xlat4;
    u_xlat2 = max(u_xlat2, float4(0.0, 0.0, 0.0, 0.0));
    u_xlat0 = u_xlat0 * u_xlat2;
    u_xlat2.xyz = u_xlat0.yyy * VGlobals.unity_LightColor[1].xyz;
    u_xlat2.xyz = fma(VGlobals.unity_LightColor[0].xyz, u_xlat0.xxx, u_xlat2.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[2].xyz, u_xlat0.zzz, u_xlat2.xyz);
    u_xlat0.xyz = fma(VGlobals.unity_LightColor[3].xyz, u_xlat0.www, u_xlat0.xyz);
    u_xlat2.xyz = fma(u_xlat0.xyz, float3(0.305306017, 0.305306017, 0.305306017), float3(0.682171106, 0.682171106, 0.682171106));
    u_xlat2.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, float3(0.0125228781, 0.0125228781, 0.0125228781));
    u_xlat18 = u_xlat3.y * u_xlat3.y;
    u_xlat18 = fma(u_xlat3.x, u_xlat3.x, (-u_xlat18));
    u_xlat3 = u_xlat3.ywzx * u_xlat3;
    u_xlat4.x = dot(VGlobals.unity_SHBr, u_xlat3);
    u_xlat4.y = dot(VGlobals.unity_SHBg, u_xlat3);
    u_xlat4.z = dot(VGlobals.unity_SHBb, u_xlat3);
    u_xlat3.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat18), u_xlat4.xyz);
    output.TEXCOORD4.xyz = fma(u_xlat0.xyz, u_xlat2.xyz, u_xlat3.xyz);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD5.zw = u_xlat1.zw;
    output.TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 7
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set CUBE Texture "unity_SpecCube0" to slot 6 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 7 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 1

Constant Buffer "FGlobals" (416 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_SpecCube0_BoxMax at 48
  Vector4 unity_SpecCube0_BoxMin at 64
  Vector4 unity_SpecCube0_ProbePosition at 80
  Vector4 unity_SpecCube0_HDR at 96
  Vector4 unity_SpecCube1_BoxMax at 112
  Vector4 unity_SpecCube1_BoxMin at 128
  Vector4 unity_SpecCube1_ProbePosition at 144
  Vector4 unity_SpecCube1_HDR at 160
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 304
  Vector4 _Splat0_ST at 320
  Vector4 _Splat1_ST at 336
  Vector4 _Splat2_ST at 352
  Vector4 _Splat3_ST at 368
  Float _Metallic0 at 384
  Float _Metallic1 at 388
  Float _Metallic2 at 392
  Float _Metallic3 at 396
  Float _Smoothness0 at 400
  Float _Smoothness1 at 404
  Float _Smoothness2 at 408
  Float _Smoothness3 at 412
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (7) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(6) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    bool u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    bool3 u_xlatb9;
    float3 u_xlat10;
    bool3 u_xlatb11;
    float3 u_xlat12;
    float u_xlat13;
    float3 u_xlat14;
    bool u_xlatb14;
    float u_xlat24;
    float u_xlat25;
    float u_xlat26;
    float2 u_xlat27;
    float2 u_xlat28;
    float u_xlat36;
    float u_xlat37;
    bool u_xlatb37;
    float u_xlat38;
    float u_xlat40;
    bool u_xlatb40;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat1.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat37 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb37 = u_xlat37==0.0;
    if(((int(u_xlatb37) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat37 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat37 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat27.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat28.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat27.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat28.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb14 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb14 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat14.xyz = (bool(u_xlatb14)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat14.xyz = u_xlat14.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat14.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat14.x = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat26 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat26, u_xlat14.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat14.x = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat14.x = clamp(u_xlat14.x, 0.0f, 1.0f);
    u_xlat26 = (-u_xlat3.w) + 1.0;
    u_xlat38 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat38 = u_xlat38 + u_xlat38;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat38)), (-u_xlat1.xyz));
    u_xlat5.xyz = u_xlat14.xxx * FGlobals._LightColor0.xyz;
    u_xlatb14 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb14){
        u_xlat14.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat14.x = rsqrt(u_xlat14.x);
        u_xlat6.xyz = u_xlat14.xxx * u_xlat4.xyz;
        u_xlat7.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = (float3(0.0, 0.0, 0.0)<u_xlat6.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat14.x = min(u_xlat7.y, u_xlat7.x);
        u_xlat14.x = min(u_xlat7.z, u_xlat14.x);
        u_xlat7.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = fma(u_xlat6.xyz, u_xlat14.xxx, u_xlat7.xyz);
    } else {
        u_xlat6.xyz = u_xlat4.xyz;
    }
    u_xlat14.x = fma((-u_xlat26), 0.699999988, 1.70000005);
    u_xlat14.x = u_xlat14.x * u_xlat26;
    u_xlat14.x = u_xlat14.x * 6.0;
    u_xlat6 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat6.xyz, level(u_xlat14.x));
    u_xlat38 = u_xlat6.w + -1.0;
    u_xlat38 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat38, 1.0);
    u_xlat38 = u_xlat38 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * float3(u_xlat38);
    u_xlatb40 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat40 = rsqrt(u_xlat40);
            u_xlat8.xyz = float3(u_xlat40) * u_xlat4.xyz;
            u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat8.xyz, float3(u_xlat40), u_xlat9.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat14.x));
        u_xlat14.x = u_xlat4.w + -1.0;
        u_xlat14.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat14.x, 1.0);
        u_xlat14.x = u_xlat14.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * u_xlat14.xxx;
        u_xlat6.xyz = fma(float3(u_xlat38), u_xlat6.xyz, (-u_xlat4.xyz));
        u_xlat7.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat6.xyz, u_xlat4.xyz);
    }
    u_xlat14.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat14.x = rsqrt(u_xlat14.x);
    u_xlat4.xyz = u_xlat14.xxx * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(u_xlat2.xxx, u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat36), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat0.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, float2(u_xlat26));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = fma(u_xlat12.x, u_xlat24, 1.0);
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat14.x = u_xlat25 * u_xlat25;
    u_xlat14.x = u_xlat14.x * u_xlat14.x;
    u_xlat25 = u_xlat25 * u_xlat14.x;
    u_xlat12.x = fma(u_xlat12.x, u_xlat25, 1.0);
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat26 * u_xlat26;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat14.x = (-u_xlat24) + 1.0;
    u_xlat38 = fma(abs(u_xlat36), u_xlat14.x, u_xlat24);
    u_xlat14.x = fma(u_xlat1.x, u_xlat14.x, u_xlat24);
    u_xlat36 = abs(u_xlat36) * u_xlat14.x;
    u_xlat36 = fma(u_xlat1.x, u_xlat38, u_xlat36);
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat14.x = u_xlat24 * u_xlat24;
    u_xlat38 = fma(u_xlat13, u_xlat14.x, (-u_xlat13));
    u_xlat13 = fma(u_xlat38, u_xlat13, 1.0);
    u_xlat14.x = u_xlat14.x * 0.318309873;
    u_xlat13 = fma(u_xlat13, u_xlat13, 1.00000001e-07);
    u_xlat13 = u_xlat14.x / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat36 = u_xlat36 * 3.14159274;
    u_xlat36 = max(u_xlat36, 9.99999975e-05);
    u_xlat12.z = sqrt(u_xlat36);
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat24 = u_xlat24 * u_xlat26;
    u_xlat24 = fma((-u_xlat24), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat12.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat5.xyz * float3(u_xlat36);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat5.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat2.xyz, u_xlat0.xyw);
    u_xlat2.xyz = u_xlat7.xyz * float3(u_xlat24);
    u_xlat3.xyz = (-u_xlat6.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat25), u_xlat3.xyz, u_xlat6.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = float3(u_xlat37) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 7
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set CUBE Texture "unity_SpecCube0" to slot 6 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 7 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 1

Constant Buffer "FGlobals" (464 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Control_TexelSize at 352
  Vector4 _Splat0_ST at 368
  Vector4 _Splat1_ST at 384
  Vector4 _Splat2_ST at 400
  Vector4 _Splat3_ST at 416
  Float _Metallic0 at 432
  Float _Metallic1 at 436
  Float _Metallic2 at 440
  Float _Metallic3 at 444
  Float _Smoothness0 at 448
  Float _Smoothness1 at 452
  Float _Smoothness2 at 456
  Float _Smoothness3 at 460
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (7) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(6) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    bool u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat26;
    float u_xlat27;
    float u_xlat28;
    bool u_xlatb28;
    float2 u_xlat29;
    float2 u_xlat30;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat40 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb40 = u_xlat40==0.0;
    if(((int(u_xlatb40) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat40 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat40 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat29.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat29.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat30.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb15 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb28 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb28)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat28 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat41 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat41, u_xlat28);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat28 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat28 = clamp(u_xlat28, 0.0f, 1.0f);
    u_xlat41 = (-u_xlat3.w) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat28) * FGlobals._LightColor0.xyz;
    if(u_xlatb15){
        u_xlatb15 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat15 = u_xlat6.y * 0.25;
        u_xlat28 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat15 = max(u_xlat28, u_xlat15);
        u_xlat6.x = min(u_xlat43, u_xlat15);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb15 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb15){
        u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat15 = rsqrt(u_xlat15);
        u_xlat7.xyz = float3(u_xlat15) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat15 = min(u_xlat8.y, u_xlat8.x);
        u_xlat15 = min(u_xlat8.z, u_xlat15);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat15 = fma((-u_xlat41), 0.699999988, 1.70000005);
    u_xlat15 = u_xlat15 * u_xlat41;
    u_xlat15 = u_xlat15 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat15));
    u_xlat28 = u_xlat7.w + -1.0;
    u_xlat28 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat28, 1.0);
    u_xlat28 = u_xlat28 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat28);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat15));
        u_xlat15 = u_xlat4.w + -1.0;
        u_xlat15 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat15, 1.0);
        u_xlat15 = u_xlat15 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat15);
        u_xlat7.xyz = fma(float3(u_xlat28), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat15 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * input.TEXCOORD0.xyz;
    u_xlat7.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat7.xyz = fma(u_xlat2.xxx, u_xlat7.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat15 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat15;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat15 = (-u_xlat26) + 1.0;
    u_xlat28 = fma(abs(u_xlat39), u_xlat15, u_xlat26);
    u_xlat15 = fma(u_xlat1.x, u_xlat15, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat15;
    u_xlat39 = fma(u_xlat1.x, u_xlat28, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat28 = fma(u_xlat14, u_xlat15, (-u_xlat14));
    u_xlat14 = fma(u_xlat28, u_xlat14, 1.0);
    u_xlat15 = u_xlat15 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat15 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat41;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat2.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat4.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat7.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat2.xyz, u_xlat0.xyw);
    u_xlat2.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat3.xyz, u_xlat7.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL SHADOWS_SCREEN _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 8
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 6 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 7 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 8 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 9 sampler slot 1

Constant Buffer "FGlobals" (512 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_SpecCube0_BoxMax at 144
  Vector4 unity_SpecCube0_BoxMin at 160
  Vector4 unity_SpecCube0_ProbePosition at 176
  Vector4 unity_SpecCube0_HDR at 192
  Vector4 unity_SpecCube1_BoxMax at 208
  Vector4 unity_SpecCube1_BoxMin at 224
  Vector4 unity_SpecCube1_ProbePosition at 240
  Vector4 unity_SpecCube1_HDR at 256
  Vector4 unity_ProbeVolumeParams at 272
  Vector3 unity_ProbeVolumeSizeInv at 352
  Vector3 unity_ProbeVolumeMin at 368
  Vector4 _LightColor0 at 384
  Vector4 _Control_TexelSize at 400
  Vector4 _Splat0_ST at 416
  Vector4 _Splat1_ST at 432
  Vector4 _Splat2_ST at 448
  Vector4 _Splat3_ST at 464
  Float _Metallic0 at 480
  Float _Metallic1 at 484
  Float _Metallic2 at 488
  Float _Metallic3 at 492
  Float _Smoothness0 at 496
  Float _Smoothness1 at 500
  Float _Smoothness2 at 504
  Float _Smoothness3 at 508
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(6) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(7) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(8) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    bool u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    bool3 u_xlatb9;
    float3 u_xlat10;
    bool3 u_xlatb11;
    float3 u_xlat12;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb14;
    float u_xlat24;
    float u_xlat25;
    float u_xlat26;
    bool u_xlatb26;
    float2 u_xlat27;
    float2 u_xlat28;
    float u_xlat36;
    float u_xlat37;
    bool u_xlatb37;
    float u_xlat38;
    float u_xlat40;
    bool u_xlatb40;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat1.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat37 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb37 = u_xlat37==0.0;
    if(((int(u_xlatb37) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat37 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat37 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat27.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat28.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat27.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat28.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat14 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = sqrt(u_xlat26);
    u_xlat26 = (-u_xlat14) + u_xlat26;
    u_xlat14 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat26, u_xlat14);
    u_xlat14 = fma(u_xlat14, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlatb26 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb26){
        u_xlatb26 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb26)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat26 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat38 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat38, u_xlat26);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat26 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD4.xy / input.TEXCOORD4.ww;
    u_xlat38 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat26 = (-u_xlat38) + u_xlat26;
    u_xlat14 = fma(u_xlat14, u_xlat26, u_xlat38);
    u_xlat26 = (-u_xlat3.w) + 1.0;
    u_xlat38 = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat38 = u_xlat38 + u_xlat38;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-float3(u_xlat38)), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat14) * FGlobals._LightColor0.xyz;
    u_xlatb14 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb14){
        u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat14 = rsqrt(u_xlat14);
        u_xlat6.xyz = float3(u_xlat14) * u_xlat4.xyz;
        u_xlat7.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;
        u_xlatb9.xyz = (float3(0.0, 0.0, 0.0)<u_xlat6.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat7;
            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;
            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;
            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;
            u_xlat7 = hlslcc_movcTemp;
        }
        u_xlat14 = min(u_xlat7.y, u_xlat7.x);
        u_xlat14 = min(u_xlat7.z, u_xlat14);
        u_xlat7.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat14), u_xlat7.xyz);
    } else {
        u_xlat6.xyz = u_xlat4.xyz;
    }
    u_xlat14 = fma((-u_xlat26), 0.699999988, 1.70000005);
    u_xlat14 = u_xlat14 * u_xlat26;
    u_xlat14 = u_xlat14 * 6.0;
    u_xlat6 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat6.xyz, level(u_xlat14));
    u_xlat38 = u_xlat6.w + -1.0;
    u_xlat38 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat38, 1.0);
    u_xlat38 = u_xlat38 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat7.xyz = u_xlat6.xyz * float3(u_xlat38);
    u_xlatb40 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb40){
        u_xlatb40 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb40){
            u_xlat40 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat40 = rsqrt(u_xlat40);
            u_xlat8.xyz = float3(u_xlat40) * u_xlat4.xyz;
            u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
            u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat9;
                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
                u_xlat9 = hlslcc_movcTemp;
            }
            u_xlat40 = min(u_xlat9.y, u_xlat9.x);
            u_xlat40 = min(u_xlat9.z, u_xlat40);
            u_xlat9.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat8.xyz, float3(u_xlat40), u_xlat9.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat14));
        u_xlat14 = u_xlat4.w + -1.0;
        u_xlat14 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat14, 1.0);
        u_xlat14 = u_xlat14 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat14);
        u_xlat6.xyz = fma(float3(u_xlat38), u_xlat6.xyz, (-u_xlat4.xyz));
        u_xlat7.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat6.xyz, u_xlat4.xyz);
    }
    u_xlat14 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat14 = rsqrt(u_xlat14);
    u_xlat4.xyz = float3(u_xlat14) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(u_xlat2.xxx, u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat36), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat0.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, float2(u_xlat26));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat1.x) + 1.0;
    u_xlat25 = u_xlat24 * u_xlat24;
    u_xlat25 = u_xlat25 * u_xlat25;
    u_xlat24 = u_xlat24 * u_xlat25;
    u_xlat24 = fma(u_xlat12.x, u_xlat24, 1.0);
    u_xlat25 = -abs(u_xlat36) + 1.0;
    u_xlat14 = u_xlat25 * u_xlat25;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat25 = u_xlat25 * u_xlat14;
    u_xlat12.x = fma(u_xlat12.x, u_xlat25, 1.0);
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat26 * u_xlat26;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat14 = (-u_xlat24) + 1.0;
    u_xlat38 = fma(abs(u_xlat36), u_xlat14, u_xlat24);
    u_xlat14 = fma(u_xlat1.x, u_xlat14, u_xlat24);
    u_xlat36 = abs(u_xlat36) * u_xlat14;
    u_xlat36 = fma(u_xlat1.x, u_xlat38, u_xlat36);
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat14 = u_xlat24 * u_xlat24;
    u_xlat38 = fma(u_xlat13, u_xlat14, (-u_xlat13));
    u_xlat13 = fma(u_xlat38, u_xlat13, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat13 = fma(u_xlat13, u_xlat13, 1.00000001e-07);
    u_xlat13 = u_xlat14 / u_xlat13;
    u_xlat36 = u_xlat36 * u_xlat13;
    u_xlat36 = u_xlat36 * 3.14159274;
    u_xlat36 = max(u_xlat36, 9.99999975e-05);
    u_xlat12.z = sqrt(u_xlat36);
    u_xlat12.xz = u_xlat1.xx * u_xlat12.xz;
    u_xlat24 = u_xlat24 * u_xlat26;
    u_xlat24 = fma((-u_xlat24), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat36 = u_xlat12.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat5.xyz * float3(u_xlat36);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat0.x = u_xlat0.x * u_xlat12.x;
    u_xlat5.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat2.xyz, u_xlat0.xyw);
    u_xlat2.xyz = u_xlat7.xyz * float3(u_xlat24);
    u_xlat3.xyz = (-u_xlat6.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat25), u_xlat3.xyz, u_xlat6.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = float3(u_xlat37) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 8
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 6 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 7 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 8 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 9 sampler slot 1

Constant Buffer "FGlobals" (560 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Control_TexelSize at 448
  Vector4 _Splat0_ST at 464
  Vector4 _Splat1_ST at 480
  Vector4 _Splat2_ST at 496
  Vector4 _Splat3_ST at 512
  Float _Metallic0 at 528
  Float _Metallic1 at 532
  Float _Metallic2 at 536
  Float _Metallic3 at 540
  Float _Smoothness0 at 544
  Float _Smoothness1 at 548
  Float _Smoothness2 at 552
  Float _Smoothness3 at 556
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(6) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(7) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(8) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float3 u_xlat1;
    bool u_xlatb1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat17;
    float u_xlat26;
    float u_xlat27;
    float u_xlat28;
    bool u_xlatb28;
    float2 u_xlat29;
    float2 u_xlat30;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    bool u_xlatb41;
    float u_xlat43;
    bool u_xlatb43;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat40 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb40 = u_xlat40==0.0;
    if(((int(u_xlatb40) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat40 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat40 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat29.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat29.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat30.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = sqrt(u_xlat28);
    u_xlat28 = (-u_xlat15) + u_xlat28;
    u_xlat15 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat28, u_xlat15);
    u_xlat15 = fma(u_xlat15, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlatb28 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb28){
        u_xlatb41 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat41 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat17 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat41, u_xlat17);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat41 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat41 = clamp(u_xlat41, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD4.xy / input.TEXCOORD4.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat41 = u_xlat41 + (-u_xlat4.x);
    u_xlat15 = fma(u_xlat15, u_xlat41, u_xlat4.x);
    u_xlat41 = (-u_xlat3.w) + 1.0;
    u_xlat4.x = dot((-u_xlat1.xyz), input.TEXCOORD0.xyz);
    u_xlat4.x = u_xlat4.x + u_xlat4.x;
    u_xlat4.xyz = fma(input.TEXCOORD0.xyz, (-u_xlat4.xxx), (-u_xlat1.xyz));
    u_xlat5.xyz = float3(u_xlat15) * FGlobals._LightColor0.xyz;
    if(u_xlatb28){
        u_xlatb15 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat15 = u_xlat6.y * 0.25;
        u_xlat28 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat43 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat15 = max(u_xlat28, u_xlat15);
        u_xlat6.x = min(u_xlat43, u_xlat15);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
        u_xlat8.xyz = u_xlat6.xzw + float3(0.25, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xyz);
        u_xlat6.xyz = u_xlat6.xzw + float3(0.5, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xyz);
        u_xlat9.xyz = input.TEXCOORD0.xyz;
        u_xlat9.w = 1.0;
        u_xlat7.x = dot(u_xlat7, u_xlat9);
        u_xlat7.y = dot(u_xlat8, u_xlat9);
        u_xlat7.z = dot(u_xlat6, u_xlat9);
    } else {
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat7.x = dot(FGlobals.unity_SHAr, u_xlat6);
        u_xlat7.y = dot(FGlobals.unity_SHAg, u_xlat6);
        u_xlat7.z = dot(FGlobals.unity_SHAb, u_xlat6);
    }
    u_xlat6.xyz = u_xlat7.xyz + input.TEXCOORD3.xyz;
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlat6.xyz = log2(u_xlat6.xyz);
    u_xlat6.xyz = u_xlat6.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat6.xyz = exp2(u_xlat6.xyz);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat6.xyz = max(u_xlat6.xyz, float3(0.0, 0.0, 0.0));
    u_xlatb15 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb15){
        u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat15 = rsqrt(u_xlat15);
        u_xlat7.xyz = float3(u_xlat15) * u_xlat4.xyz;
        u_xlat8.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat15 = min(u_xlat8.y, u_xlat8.x);
        u_xlat15 = min(u_xlat8.z, u_xlat15);
        u_xlat8.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat4.xyz;
    }
    u_xlat15 = fma((-u_xlat41), 0.699999988, 1.70000005);
    u_xlat15 = u_xlat15 * u_xlat41;
    u_xlat15 = u_xlat15 * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat15));
    u_xlat28 = u_xlat7.w + -1.0;
    u_xlat28 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat28, 1.0);
    u_xlat28 = u_xlat28 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat28);
    u_xlatb43 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb43){
        u_xlatb43 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb43){
            u_xlat43 = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat43 = rsqrt(u_xlat43);
            u_xlat9.xyz = float3(u_xlat43) * u_xlat4.xyz;
            u_xlat10.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-input.TEXCOORD1.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat43 = min(u_xlat10.y, u_xlat10.x);
            u_xlat43 = min(u_xlat10.z, u_xlat43);
            u_xlat10.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat4.xyz = fma(u_xlat9.xyz, float3(u_xlat43), u_xlat10.xyz);
        }
        u_xlat4 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat4.xyz, level(u_xlat15));
        u_xlat15 = u_xlat4.w + -1.0;
        u_xlat15 = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat15, 1.0);
        u_xlat15 = u_xlat15 * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat4.xyz = u_xlat4.xyz * float3(u_xlat15);
        u_xlat7.xyz = fma(float3(u_xlat28), u_xlat7.xyz, (-u_xlat4.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat7.xyz, u_xlat4.xyz);
    }
    u_xlat15 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * input.TEXCOORD0.xyz;
    u_xlat7.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat7.xyz = fma(u_xlat2.xxx, u_xlat7.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat1.x) + 1.0;
    u_xlat27 = u_xlat26 * u_xlat26;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat26 = u_xlat26 * u_xlat27;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat27 = -abs(u_xlat39) + 1.0;
    u_xlat15 = u_xlat27 * u_xlat27;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat27 = u_xlat27 * u_xlat15;
    u_xlat13.x = fma(u_xlat13.x, u_xlat27, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat15 = (-u_xlat26) + 1.0;
    u_xlat28 = fma(abs(u_xlat39), u_xlat15, u_xlat26);
    u_xlat15 = fma(u_xlat1.x, u_xlat15, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat15;
    u_xlat39 = fma(u_xlat1.x, u_xlat28, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat15 = u_xlat26 * u_xlat26;
    u_xlat28 = fma(u_xlat14, u_xlat15, (-u_xlat14));
    u_xlat14 = fma(u_xlat28, u_xlat14, 1.0);
    u_xlat15 = u_xlat15 * 0.318309873;
    u_xlat14 = fma(u_xlat14, u_xlat14, 1.00000001e-07);
    u_xlat14 = u_xlat15 / u_xlat14;
    u_xlat39 = u_xlat39 * u_xlat14;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat13.z = sqrt(u_xlat39);
    u_xlat13.xz = u_xlat1.xx * u_xlat13.xz;
    u_xlat26 = u_xlat26 * u_xlat41;
    u_xlat26 = fma((-u_xlat26), 0.280000001, 1.0);
    u_xlat1.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat13.z * u_xlat1.x;
    u_xlat1.x = (-u_xlat2.x) + u_xlat3.w;
    u_xlat1.x = u_xlat1.x + 1.0;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat2.xyz = fma(u_xlat5.xyz, u_xlat13.xxx, u_xlat6.xyz);
    u_xlat4.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat0.x = u_xlat0.x * u_xlat13.x;
    u_xlat5.xyz = (-u_xlat7.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat0.xyw = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat7.xyz);
    u_xlat0.xyw = u_xlat0.xyw * u_xlat4.xyz;
    u_xlat0.xyw = fma(u_xlat3.xyz, u_xlat2.xyz, u_xlat0.xyw);
    u_xlat2.xyz = u_xlat8.xyz * float3(u_xlat26);
    u_xlat3.xyz = (-u_xlat7.xyz) + u_xlat1.xxx;
    u_xlat1.xyz = fma(float3(u_xlat27), u_xlat3.xyz, u_xlat7.xyz);
    u_xlat0.xyz = fma(u_xlat2.xyz, u_xlat1.xyz, u_xlat0.xyw);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 11
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_Normal0" to slot 6 sampler slot 7
Set 2D Texture "_Normal1" to slot 7 sampler slot 8
Set 2D Texture "_Normal2" to slot 8 sampler slot 9
Set 2D Texture "_Normal3" to slot 9 sampler slot 10
Set CUBE Texture "unity_SpecCube0" to slot 10 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 11 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 1

Constant Buffer "FGlobals" (432 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_SpecCube0_BoxMax at 48
  Vector4 unity_SpecCube0_BoxMin at 64
  Vector4 unity_SpecCube0_ProbePosition at 80
  Vector4 unity_SpecCube0_HDR at 96
  Vector4 unity_SpecCube1_BoxMax at 112
  Vector4 unity_SpecCube1_BoxMin at 128
  Vector4 unity_SpecCube1_ProbePosition at 144
  Vector4 unity_SpecCube1_HDR at 160
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 304
  Vector4 _Splat0_ST at 320
  Vector4 _Splat1_ST at 336
  Vector4 _Splat2_ST at 352
  Vector4 _Splat3_ST at 368
  Float _NormalScale0 at 384
  Float _NormalScale1 at 388
  Float _NormalScale2 at 392
  Float _NormalScale3 at 396
  Float _Metallic0 at 400
  Float _Metallic1 at 404
  Float _Metallic2 at 408
  Float _Metallic3 at 412
  Float _Smoothness0 at 416
  Float _Smoothness1 at 420
  Float _Smoothness2 at 424
  Float _Smoothness3 at 428
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (11) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(10) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float u_xlat14;
    float u_xlat15;
    float3 u_xlat16;
    float3 u_xlat17;
    float u_xlat27;
    float u_xlat28;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    float u_xlat44;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat2.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb40 = u_xlat40==0.0;
    if(((int(u_xlatb40) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat40 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat41);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat30.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat31.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat30.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat4.z = sqrt(u_xlat41);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat31.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat41 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat5.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat41 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb3 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat16.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat16.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat16.xyz);
        u_xlat16.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat16.xyz);
        u_xlat16.xyz = u_xlat16.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat16.xyz : u_xlat0.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16.x = fma(u_xlat3.y, 0.25, 0.75);
        u_xlat5.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat3.x = max(u_xlat16.x, u_xlat5.x);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    }
    u_xlat3.x = dot(u_xlat3, FGlobals.unity_OcclusionMaskSelector);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat16.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16.x = rsqrt(u_xlat16.x);
    u_xlat16.xyz = u_xlat16.xxx * u_xlat5.xyz;
    u_xlat4.x = (-u_xlat6.w) + 1.0;
    u_xlat17.x = dot((-u_xlat2.xyz), u_xlat16.xyz);
    u_xlat17.x = u_xlat17.x + u_xlat17.x;
    u_xlat17.xyz = fma(u_xlat16.xyz, (-u_xlat17.xxx), (-u_xlat2.xyz));
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlatb3 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb3){
        u_xlat3.x = dot(u_xlat17.xyz, u_xlat17.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        u_xlat7.xyz = u_xlat3.xxx * u_xlat17.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
        u_xlat8.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat17.xyz;
    }
    u_xlat3.x = fma((-u_xlat4.x), 0.699999988, 1.70000005);
    u_xlat3.x = u_xlat3.x * u_xlat4.x;
    u_xlat3.x = u_xlat3.x * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat3.x));
    u_xlat44 = u_xlat7.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat17.xyz, u_xlat17.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat9.xyz = u_xlat17.xyz * float3(u_xlat46);
            u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat17.xyz = fma(u_xlat9.xyz, float3(u_xlat46), u_xlat0.xyz);
        }
        u_xlat9 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat17.xyz, level(u_xlat3.x));
        u_xlat0.x = u_xlat9.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx;
        u_xlat17.xyz = fma(float3(u_xlat44), u_xlat7.xyz, (-u_xlat0.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat17.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat41), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat17.xyz = float3(u_xlat41) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat39 = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat16.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat16.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = dot(float2(u_xlat14), u_xlat4.xx);
    u_xlat14 = u_xlat14 + -0.5;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    u_xlat28 = u_xlat27 * u_xlat27;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat27 = u_xlat27 * u_xlat28;
    u_xlat27 = fma(u_xlat14, u_xlat27, 1.0);
    u_xlat28 = -abs(u_xlat39) + 1.0;
    u_xlat3.x = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat14 = fma(u_xlat14, u_xlat28, 1.0);
    u_xlat14 = u_xlat14 * u_xlat27;
    u_xlat14 = u_xlat2.x * u_xlat14;
    u_xlat27 = u_xlat4.x * u_xlat4.x;
    u_xlat27 = max(u_xlat27, 0.00200000009);
    u_xlat3.x = (-u_xlat27) + 1.0;
    u_xlat16.x = fma(abs(u_xlat39), u_xlat3.x, u_xlat27);
    u_xlat3.x = fma(u_xlat2.x, u_xlat3.x, u_xlat27);
    u_xlat39 = abs(u_xlat39) * u_xlat3.x;
    u_xlat39 = fma(u_xlat2.x, u_xlat16.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat3.x = u_xlat27 * u_xlat27;
    u_xlat16.x = fma(u_xlat15, u_xlat3.x, (-u_xlat15));
    u_xlat15 = fma(u_xlat16.x, u_xlat15, 1.0);
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat3.x / u_xlat15;
    u_xlat39 = u_xlat39 * u_xlat15;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat39 = sqrt(u_xlat39);
    u_xlat39 = u_xlat2.x * u_xlat39;
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat27 = fma((-u_xlat27), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat2.x = (-u_xlat41) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat39 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat39 * u_xlat39;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat39), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat17.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat28), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 11
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_Normal0" to slot 6 sampler slot 7
Set 2D Texture "_Normal1" to slot 7 sampler slot 8
Set 2D Texture "_Normal2" to slot 8 sampler slot 9
Set 2D Texture "_Normal3" to slot 9 sampler slot 10
Set CUBE Texture "unity_SpecCube0" to slot 10 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 11 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 1

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Control_TexelSize at 352
  Vector4 _Splat0_ST at 368
  Vector4 _Splat1_ST at 384
  Vector4 _Splat2_ST at 400
  Vector4 _Splat3_ST at 416
  Float _NormalScale0 at 432
  Float _NormalScale1 at 436
  Float _NormalScale2 at 440
  Float _NormalScale3 at 444
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (11) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(10) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float u_xlat18;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    float2 u_xlat32;
    float2 u_xlat33;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    float u_xlat47;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat43 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb43 = u_xlat43==0.0;
    if(((int(u_xlatb43) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat33.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat32.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat33.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat32.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat44 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat4.z = sqrt(u_xlat44);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat33.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat44 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb3 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb17 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat17.xyz = (bool(u_xlatb17)) ? u_xlat5.xyz : u_xlat0.xyz;
        u_xlat17.xyz = u_xlat17.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat17.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat17.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat31 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat31, u_xlat17.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat17.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat17.x = clamp(u_xlat17.x, 0.0f, 1.0f);
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat4.xyz = float3(u_xlat31) * u_xlat5.xyz;
    u_xlat31 = (-u_xlat6.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat4.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = fma(u_xlat4.xyz, (-float3(u_xlat45)), (-u_xlat2.xyz));
    u_xlat7.xyz = u_xlat17.xxx * FGlobals._LightColor0.xyz;
    if(u_xlatb3){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat4);
        u_xlat9.y = dot(u_xlat10, u_xlat4);
        u_xlat9.z = dot(u_xlat8, u_xlat4);
    } else {
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(FGlobals.unity_SHAr, u_xlat4);
        u_xlat9.y = dot(FGlobals.unity_SHAg, u_xlat4);
        u_xlat9.z = dot(FGlobals.unity_SHAb, u_xlat4);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD4.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = fma(u_xlat3.xyw, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb46 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb46){
        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat46 = rsqrt(u_xlat46);
        u_xlat8.xyz = float3(u_xlat46) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
        u_xlat46 = min(u_xlat9.z, u_xlat46);
        u_xlat9.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat46), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat46 = fma((-u_xlat31), 0.699999988, 1.70000005);
    u_xlat46 = u_xlat31 * u_xlat46;
    u_xlat46 = u_xlat46 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat46));
    u_xlat47 = u_xlat8.w + -1.0;
    u_xlat47 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat47, 1.0);
    u_xlat47 = u_xlat47 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat47);
    u_xlatb49 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat49), u_xlat0.xyz);
        }
        u_xlat10 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat46));
        u_xlat0.x = u_xlat10.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx;
        u_xlat5.xyz = fma(float3(u_xlat47), u_xlat8.xyz, (-u_xlat0.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat5.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat44), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat44 = fma((-u_xlat44), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(float2(u_xlat15), float2(u_xlat31));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat29 = (-u_xlat2.x) + 1.0;
    u_xlat30 = u_xlat29 * u_xlat29;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat29 = u_xlat29 * u_xlat30;
    u_xlat29 = fma(u_xlat15, u_xlat29, 1.0);
    u_xlat30 = -abs(u_xlat42) + 1.0;
    u_xlat4.x = u_xlat30 * u_xlat30;
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat15 = fma(u_xlat15, u_xlat30, 1.0);
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat15 = u_xlat2.x * u_xlat15;
    u_xlat29 = u_xlat31 * u_xlat31;
    u_xlat29 = max(u_xlat29, 0.00200000009);
    u_xlat4.x = (-u_xlat29) + 1.0;
    u_xlat18 = fma(abs(u_xlat42), u_xlat4.x, u_xlat29);
    u_xlat4.x = fma(u_xlat2.x, u_xlat4.x, u_xlat29);
    u_xlat42 = abs(u_xlat42) * u_xlat4.x;
    u_xlat42 = fma(u_xlat2.x, u_xlat18, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat4.x = u_xlat29 * u_xlat29;
    u_xlat18 = fma(u_xlat16, u_xlat4.x, (-u_xlat16));
    u_xlat16 = fma(u_xlat18, u_xlat16, 1.0);
    u_xlat4.x = u_xlat4.x * 0.318309873;
    u_xlat16 = fma(u_xlat16, u_xlat16, 1.00000001e-07);
    u_xlat16 = u_xlat4.x / u_xlat16;
    u_xlat42 = u_xlat42 * u_xlat16;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = u_xlat2.x * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat31;
    u_xlat29 = fma((-u_xlat29), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat42 * u_xlat2.x;
    u_xlat2.x = (-u_xlat44) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat3.xyw);
    u_xlat4.xyz = u_xlat7.xyz * float3(u_xlat42);
    u_xlat42 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat42 * u_xlat42;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat42 = u_xlat42 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat5.xyz, u_xlat3.xyz, u_xlat4.xyz);
    u_xlat1.xyz = u_xlat9.xyz * float3(u_xlat29);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat30), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL SHADOWS_SCREEN _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 12
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 8
Set 2D Texture "_Normal1" to slot 7 sampler slot 9
Set 2D Texture "_Normal2" to slot 8 sampler slot 10
Set 2D Texture "_Normal3" to slot 9 sampler slot 11
Set 2D Texture "_ShadowMapTexture" to slot 10 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 11 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 12 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 13 sampler slot 1

Constant Buffer "FGlobals" (528 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_SpecCube0_BoxMax at 144
  Vector4 unity_SpecCube0_BoxMin at 160
  Vector4 unity_SpecCube0_ProbePosition at 176
  Vector4 unity_SpecCube0_HDR at 192
  Vector4 unity_SpecCube1_BoxMax at 208
  Vector4 unity_SpecCube1_BoxMin at 224
  Vector4 unity_SpecCube1_ProbePosition at 240
  Vector4 unity_SpecCube1_HDR at 256
  Vector4 unity_ProbeVolumeParams at 272
  Vector3 unity_ProbeVolumeSizeInv at 352
  Vector3 unity_ProbeVolumeMin at 368
  Vector4 _LightColor0 at 384
  Vector4 _Control_TexelSize at 400
  Vector4 _Splat0_ST at 416
  Vector4 _Splat1_ST at 432
  Vector4 _Splat2_ST at 448
  Vector4 _Splat3_ST at 464
  Float _NormalScale0 at 480
  Float _NormalScale1 at 484
  Float _NormalScale2 at 488
  Float _NormalScale3 at 492
  Float _Metallic0 at 496
  Float _Metallic1 at 500
  Float _Metallic2 at 504
  Float _Metallic3 at 508
  Float _Smoothness0 at 512
  Float _Smoothness1 at 516
  Float _Smoothness2 at 520
  Float _Smoothness3 at 524
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (12) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(10) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(11) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(12) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float u_xlat14;
    float u_xlat15;
    float3 u_xlat16;
    bool u_xlatb16;
    float3 u_xlat17;
    float u_xlat27;
    float u_xlat28;
    float2 u_xlat29;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    float u_xlat44;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat2.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb40 = u_xlat40==0.0;
    if(((int(u_xlatb40) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat40 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat41);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat30.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat31.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat30.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat4.z = sqrt(u_xlat41);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat31.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat41 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat5.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat41 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat16.xyz = u_xlat0.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat16.x = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = (-u_xlat3.x) + u_xlat16.x;
    u_xlat3.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat16.x, u_xlat3.x);
    u_xlat3.x = fma(u_xlat3.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlatb16 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb16){
        u_xlatb16 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat16.xyz = (bool(u_xlatb16)) ? u_xlat5.xyz : u_xlat0.xyz;
        u_xlat16.xyz = u_xlat16.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat16.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat29.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat29.x, u_xlat16.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat16.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16.x = clamp(u_xlat16.x, 0.0f, 1.0f);
    u_xlat29.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat29.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat29.xy).x;
    u_xlat16.x = (-u_xlat29.x) + u_xlat16.x;
    u_xlat3.x = fma(u_xlat3.x, u_xlat16.x, u_xlat29.x);
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat16.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16.x = rsqrt(u_xlat16.x);
    u_xlat16.xyz = u_xlat16.xxx * u_xlat5.xyz;
    u_xlat4.x = (-u_xlat6.w) + 1.0;
    u_xlat17.x = dot((-u_xlat2.xyz), u_xlat16.xyz);
    u_xlat17.x = u_xlat17.x + u_xlat17.x;
    u_xlat17.xyz = fma(u_xlat16.xyz, (-u_xlat17.xxx), (-u_xlat2.xyz));
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlatb3 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb3){
        u_xlat3.x = dot(u_xlat17.xyz, u_xlat17.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        u_xlat7.xyz = u_xlat3.xxx * u_xlat17.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
        u_xlat8.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat17.xyz;
    }
    u_xlat3.x = fma((-u_xlat4.x), 0.699999988, 1.70000005);
    u_xlat3.x = u_xlat3.x * u_xlat4.x;
    u_xlat3.x = u_xlat3.x * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat3.x));
    u_xlat44 = u_xlat7.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat17.xyz, u_xlat17.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat9.xyz = u_xlat17.xyz * float3(u_xlat46);
            u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat17.xyz = fma(u_xlat9.xyz, float3(u_xlat46), u_xlat0.xyz);
        }
        u_xlat9 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat17.xyz, level(u_xlat3.x));
        u_xlat0.x = u_xlat9.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx;
        u_xlat17.xyz = fma(float3(u_xlat44), u_xlat7.xyz, (-u_xlat0.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat17.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat41), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat17.xyz = float3(u_xlat41) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat39 = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat16.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat16.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = dot(float2(u_xlat14), u_xlat4.xx);
    u_xlat14 = u_xlat14 + -0.5;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    u_xlat28 = u_xlat27 * u_xlat27;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat27 = u_xlat27 * u_xlat28;
    u_xlat27 = fma(u_xlat14, u_xlat27, 1.0);
    u_xlat28 = -abs(u_xlat39) + 1.0;
    u_xlat3.x = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat14 = fma(u_xlat14, u_xlat28, 1.0);
    u_xlat14 = u_xlat14 * u_xlat27;
    u_xlat14 = u_xlat2.x * u_xlat14;
    u_xlat27 = u_xlat4.x * u_xlat4.x;
    u_xlat27 = max(u_xlat27, 0.00200000009);
    u_xlat3.x = (-u_xlat27) + 1.0;
    u_xlat16.x = fma(abs(u_xlat39), u_xlat3.x, u_xlat27);
    u_xlat3.x = fma(u_xlat2.x, u_xlat3.x, u_xlat27);
    u_xlat39 = abs(u_xlat39) * u_xlat3.x;
    u_xlat39 = fma(u_xlat2.x, u_xlat16.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat3.x = u_xlat27 * u_xlat27;
    u_xlat16.x = fma(u_xlat15, u_xlat3.x, (-u_xlat15));
    u_xlat15 = fma(u_xlat16.x, u_xlat15, 1.0);
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat3.x / u_xlat15;
    u_xlat39 = u_xlat39 * u_xlat15;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat39 = sqrt(u_xlat39);
    u_xlat39 = u_xlat2.x * u_xlat39;
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat27 = fma((-u_xlat27), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat2.x = (-u_xlat41) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat39 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat39 * u_xlat39;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat39), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat17.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat28), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL LIGHTPROBE_SH SHADOWS_SCREEN _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 12
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 8
Set 2D Texture "_Normal1" to slot 7 sampler slot 9
Set 2D Texture "_Normal2" to slot 8 sampler slot 10
Set 2D Texture "_Normal3" to slot 9 sampler slot 11
Set 2D Texture "_ShadowMapTexture" to slot 10 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 11 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 12 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 13 sampler slot 1

Constant Buffer "FGlobals" (576 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Control_TexelSize at 448
  Vector4 _Splat0_ST at 464
  Vector4 _Splat1_ST at 480
  Vector4 _Splat2_ST at 496
  Vector4 _Splat3_ST at 512
  Float _NormalScale0 at 528
  Float _NormalScale1 at 532
  Float _NormalScale2 at 536
  Float _NormalScale3 at 540
  Float _Metallic0 at 544
  Float _Metallic1 at 548
  Float _Metallic2 at 552
  Float _Metallic3 at 556
  Float _Smoothness0 at 560
  Float _Smoothness1 at 564
  Float _Smoothness2 at 568
  Float _Smoothness3 at 572
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (12) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(10) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(11) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(12) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float u_xlat18;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    bool u_xlatb31;
    float2 u_xlat32;
    float2 u_xlat33;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    float u_xlat47;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat43 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb43 = u_xlat43==0.0;
    if(((int(u_xlatb43) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat33.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat32.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat33.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat32.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat44 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat4.z = sqrt(u_xlat44);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat33.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat44 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat17.xyz = u_xlat0.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat17.x = (-u_xlat3.x) + u_xlat17.x;
    u_xlat3.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat17.x, u_xlat3.x);
    u_xlat3.x = fma(u_xlat3.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlatb17 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb17){
        u_xlatb31 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb31)) ? u_xlat5.xyz : u_xlat0.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat31 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat45, u_xlat31);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat31 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat31 = clamp(u_xlat31, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat45 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat31 = (-u_xlat45) + u_xlat31;
    u_xlat3.x = fma(u_xlat3.x, u_xlat31, u_xlat45);
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat4.xyz = float3(u_xlat31) * u_xlat5.xyz;
    u_xlat31 = (-u_xlat6.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat4.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = fma(u_xlat4.xyz, (-float3(u_xlat45)), (-u_xlat2.xyz));
    u_xlat7.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    if(u_xlatb17){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat4);
        u_xlat9.y = dot(u_xlat10, u_xlat4);
        u_xlat9.z = dot(u_xlat8, u_xlat4);
    } else {
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(FGlobals.unity_SHAr, u_xlat4);
        u_xlat9.y = dot(FGlobals.unity_SHAg, u_xlat4);
        u_xlat9.z = dot(FGlobals.unity_SHAb, u_xlat4);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD4.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = fma(u_xlat3.xyw, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb46 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb46){
        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat46 = rsqrt(u_xlat46);
        u_xlat8.xyz = float3(u_xlat46) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
        u_xlat46 = min(u_xlat9.z, u_xlat46);
        u_xlat9.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat46), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat46 = fma((-u_xlat31), 0.699999988, 1.70000005);
    u_xlat46 = u_xlat31 * u_xlat46;
    u_xlat46 = u_xlat46 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat46));
    u_xlat47 = u_xlat8.w + -1.0;
    u_xlat47 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat47, 1.0);
    u_xlat47 = u_xlat47 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat47);
    u_xlatb49 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat49), u_xlat0.xyz);
        }
        u_xlat10 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat46));
        u_xlat0.x = u_xlat10.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx;
        u_xlat5.xyz = fma(float3(u_xlat47), u_xlat8.xyz, (-u_xlat0.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat5.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat44), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat44 = fma((-u_xlat44), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(float2(u_xlat15), float2(u_xlat31));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat29 = (-u_xlat2.x) + 1.0;
    u_xlat30 = u_xlat29 * u_xlat29;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat29 = u_xlat29 * u_xlat30;
    u_xlat29 = fma(u_xlat15, u_xlat29, 1.0);
    u_xlat30 = -abs(u_xlat42) + 1.0;
    u_xlat4.x = u_xlat30 * u_xlat30;
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat15 = fma(u_xlat15, u_xlat30, 1.0);
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat15 = u_xlat2.x * u_xlat15;
    u_xlat29 = u_xlat31 * u_xlat31;
    u_xlat29 = max(u_xlat29, 0.00200000009);
    u_xlat4.x = (-u_xlat29) + 1.0;
    u_xlat18 = fma(abs(u_xlat42), u_xlat4.x, u_xlat29);
    u_xlat4.x = fma(u_xlat2.x, u_xlat4.x, u_xlat29);
    u_xlat42 = abs(u_xlat42) * u_xlat4.x;
    u_xlat42 = fma(u_xlat2.x, u_xlat18, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat4.x = u_xlat29 * u_xlat29;
    u_xlat18 = fma(u_xlat16, u_xlat4.x, (-u_xlat16));
    u_xlat16 = fma(u_xlat18, u_xlat16, 1.0);
    u_xlat4.x = u_xlat4.x * 0.318309873;
    u_xlat16 = fma(u_xlat16, u_xlat16, 1.00000001e-07);
    u_xlat16 = u_xlat4.x / u_xlat16;
    u_xlat42 = u_xlat42 * u_xlat16;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = u_xlat2.x * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat31;
    u_xlat29 = fma((-u_xlat29), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat42 * u_xlat2.x;
    u_xlat2.x = (-u_xlat44) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat3.xyw);
    u_xlat4.xyz = u_xlat7.xyz * float3(u_xlat42);
    u_xlat42 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat42 * u_xlat42;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat42 = u_xlat42 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat5.xyz, u_xlat3.xyz, u_xlat4.xyz);
    u_xlat1.xyz = u_xlat9.xyz * float3(u_xlat29);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat30), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set CUBE Texture "unity_SpecCube0" to slot 5 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 6 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 8 sampler slot 7

Constant Buffer "FGlobals" (416 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_SpecCube0_BoxMax at 48
  Vector4 unity_SpecCube0_BoxMin at 64
  Vector4 unity_SpecCube0_ProbePosition at 80
  Vector4 unity_SpecCube0_HDR at 96
  Vector4 unity_SpecCube1_BoxMax at 112
  Vector4 unity_SpecCube1_BoxMin at 128
  Vector4 unity_SpecCube1_ProbePosition at 144
  Vector4 unity_SpecCube1_HDR at 160
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 304
  Vector4 _Splat0_ST at 320
  Vector4 _Splat1_ST at 336
  Vector4 _Splat2_ST at 352
  Vector4 _Splat3_ST at 368
  Float _Metallic0 at 384
  Float _Metallic1 at 388
  Float _Metallic2 at 392
  Float _Metallic3 at 396
  Float _Smoothness0 at 400
  Float _Smoothness1 at 404
  Float _Smoothness2 at 408
  Float _Smoothness3 at 412
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(5) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float u_xlat14;
    float u_xlat15;
    float3 u_xlat16;
    float3 u_xlat18;
    float u_xlat27;
    float u_xlat28;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat39;
    float u_xlat40;
    float u_xlat41;
    float u_xlat44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat2.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat40 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat41);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat30.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat31.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat41 = rsqrt(u_xlat41);
    u_xlat5.xyz = float3(u_xlat41) * u_xlat5.xyz;
    u_xlat41 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb3 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat16.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat16.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat16.xyz);
        u_xlat16.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat16.xyz);
        u_xlat16.xyz = u_xlat16.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat16.xyz : u_xlat0.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16.x = fma(u_xlat3.y, 0.25, 0.75);
        u_xlat44 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat3.x = max(u_xlat16.x, u_xlat44);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    }
    u_xlat3.x = dot(u_xlat3, FGlobals.unity_OcclusionMaskSelector);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat16.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16.x = rsqrt(u_xlat16.x);
    u_xlat16.xyz = u_xlat16.xxx * u_xlat6.xyz;
    u_xlat5.x = (-u_xlat4.w) + 1.0;
    u_xlat18.x = dot((-u_xlat2.xyz), u_xlat16.xyz);
    u_xlat18.x = u_xlat18.x + u_xlat18.x;
    u_xlat18.xyz = fma(u_xlat16.xyz, (-u_xlat18.xxx), (-u_xlat2.xyz));
    u_xlat6.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlatb3 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb3){
        u_xlat3.x = dot(u_xlat18.xyz, u_xlat18.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        u_xlat7.xyz = u_xlat3.xxx * u_xlat18.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
        u_xlat8.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat18.xyz;
    }
    u_xlat3.x = fma((-u_xlat5.x), 0.699999988, 1.70000005);
    u_xlat3.x = u_xlat3.x * u_xlat5.x;
    u_xlat3.x = u_xlat3.x * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat3.x));
    u_xlat45 = u_xlat7.w + -1.0;
    u_xlat45 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat45, 1.0);
    u_xlat45 = u_xlat45 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat45);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat18.xyz, u_xlat18.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat9.xyz = u_xlat18.xyz * float3(u_xlat46);
            u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat18.xyz = fma(u_xlat9.xyz, float3(u_xlat46), u_xlat0.xyz);
        }
        u_xlat9 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat18.xyz, level(u_xlat3.x));
        u_xlat0.x = u_xlat9.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx;
        u_xlat18.xyz = fma(float3(u_xlat45), u_xlat7.xyz, (-u_xlat0.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat18.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat41), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat41) * u_xlat4.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat39 = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat16.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat16.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = dot(float2(u_xlat14), u_xlat5.xx);
    u_xlat14 = u_xlat14 + -0.5;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    u_xlat28 = u_xlat27 * u_xlat27;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat27 = u_xlat27 * u_xlat28;
    u_xlat27 = fma(u_xlat14, u_xlat27, 1.0);
    u_xlat28 = -abs(u_xlat39) + 1.0;
    u_xlat3.x = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat14 = fma(u_xlat14, u_xlat28, 1.0);
    u_xlat14 = u_xlat14 * u_xlat27;
    u_xlat14 = u_xlat2.x * u_xlat14;
    u_xlat27 = u_xlat5.x * u_xlat5.x;
    u_xlat27 = max(u_xlat27, 0.00200000009);
    u_xlat3.x = (-u_xlat27) + 1.0;
    u_xlat16.x = fma(abs(u_xlat39), u_xlat3.x, u_xlat27);
    u_xlat3.x = fma(u_xlat2.x, u_xlat3.x, u_xlat27);
    u_xlat39 = abs(u_xlat39) * u_xlat3.x;
    u_xlat39 = fma(u_xlat2.x, u_xlat16.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat3.x = u_xlat27 * u_xlat27;
    u_xlat16.x = fma(u_xlat15, u_xlat3.x, (-u_xlat15));
    u_xlat15 = fma(u_xlat16.x, u_xlat15, 1.0);
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat3.x / u_xlat15;
    u_xlat39 = u_xlat39 * u_xlat15;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat39 = sqrt(u_xlat39);
    u_xlat39 = u_xlat2.x * u_xlat39;
    u_xlat27 = u_xlat27 * u_xlat5.x;
    u_xlat27 = fma((-u_xlat27), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat2.x = (-u_xlat41) + u_xlat4.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = float3(u_xlat14) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * float3(u_xlat39);
    u_xlat39 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat39 * u_xlat39;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat39), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat28), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set CUBE Texture "unity_SpecCube0" to slot 5 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 6 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 8 sampler slot 7

Constant Buffer "FGlobals" (464 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Control_TexelSize at 352
  Vector4 _Splat0_ST at 368
  Vector4 _Splat1_ST at 384
  Vector4 _Splat2_ST at 400
  Vector4 _Splat3_ST at 416
  Float _Metallic0 at 432
  Float _Metallic1 at 436
  Float _Metallic2 at 440
  Float _Metallic3 at 444
  Float _Smoothness0 at 448
  Float _Smoothness1 at 452
  Float _Smoothness2 at 456
  Float _Smoothness3 at 460
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(5) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float u_xlat19;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    float2 u_xlat32;
    float2 u_xlat33;
    float u_xlat42;
    float u_xlat43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat47;
    bool u_xlatb47;
    float u_xlat48;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat33.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat32.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat33.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat44 = rsqrt(u_xlat44);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat5.xyz;
    u_xlat44 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb3 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb17 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat17.xyz = (bool(u_xlatb17)) ? u_xlat6.xyz : u_xlat0.xyz;
        u_xlat17.xyz = u_xlat17.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat17.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat17.x = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat31 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat31, u_xlat17.x);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat17.x = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat17.x = clamp(u_xlat17.x, 0.0f, 1.0f);
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat5.xyz = float3(u_xlat31) * u_xlat6.xyz;
    u_xlat31 = (-u_xlat4.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat5.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat6.xyz = fma(u_xlat5.xyz, (-float3(u_xlat45)), (-u_xlat2.xyz));
    u_xlat7.xyz = u_xlat17.xxx * FGlobals._LightColor0.xyz;
    if(u_xlatb3){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat5.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat5);
        u_xlat9.y = dot(u_xlat10, u_xlat5);
        u_xlat9.z = dot(u_xlat8, u_xlat5);
    } else {
        u_xlat5.w = 1.0;
        u_xlat9.x = dot(FGlobals.unity_SHAr, u_xlat5);
        u_xlat9.y = dot(FGlobals.unity_SHAg, u_xlat5);
        u_xlat9.z = dot(FGlobals.unity_SHAb, u_xlat5);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD4.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = fma(u_xlat3.xyw, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb47 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb47){
        u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat47 = rsqrt(u_xlat47);
        u_xlat8.xyz = float3(u_xlat47) * u_xlat6.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat47 = min(u_xlat9.y, u_xlat9.x);
        u_xlat47 = min(u_xlat9.z, u_xlat47);
        u_xlat9.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat47), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat6.xyz;
    }
    u_xlat47 = fma((-u_xlat31), 0.699999988, 1.70000005);
    u_xlat47 = u_xlat31 * u_xlat47;
    u_xlat47 = u_xlat47 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat47));
    u_xlat48 = u_xlat8.w + -1.0;
    u_xlat48 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat48, 1.0);
    u_xlat48 = u_xlat48 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat48);
    u_xlatb49 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat6.xyz, u_xlat6.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat6.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat6.xyz = fma(u_xlat10.xyz, float3(u_xlat49), u_xlat0.xyz);
        }
        u_xlat10 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat6.xyz, level(u_xlat47));
        u_xlat0.x = u_xlat10.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx;
        u_xlat6.xyz = fma(float3(u_xlat48), u_xlat8.xyz, (-u_xlat0.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat6.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat44), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat44 = fma((-u_xlat44), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat44) * u_xlat4.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(float2(u_xlat15), float2(u_xlat31));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat29 = (-u_xlat2.x) + 1.0;
    u_xlat30 = u_xlat29 * u_xlat29;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat29 = u_xlat29 * u_xlat30;
    u_xlat29 = fma(u_xlat15, u_xlat29, 1.0);
    u_xlat30 = -abs(u_xlat42) + 1.0;
    u_xlat5.x = u_xlat30 * u_xlat30;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat30 = u_xlat30 * u_xlat5.x;
    u_xlat15 = fma(u_xlat15, u_xlat30, 1.0);
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat15 = u_xlat2.x * u_xlat15;
    u_xlat29 = u_xlat31 * u_xlat31;
    u_xlat29 = max(u_xlat29, 0.00200000009);
    u_xlat5.x = (-u_xlat29) + 1.0;
    u_xlat19 = fma(abs(u_xlat42), u_xlat5.x, u_xlat29);
    u_xlat5.x = fma(u_xlat2.x, u_xlat5.x, u_xlat29);
    u_xlat42 = abs(u_xlat42) * u_xlat5.x;
    u_xlat42 = fma(u_xlat2.x, u_xlat19, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat5.x = u_xlat29 * u_xlat29;
    u_xlat19 = fma(u_xlat16, u_xlat5.x, (-u_xlat16));
    u_xlat16 = fma(u_xlat19, u_xlat16, 1.0);
    u_xlat5.x = u_xlat5.x * 0.318309873;
    u_xlat16 = fma(u_xlat16, u_xlat16, 1.00000001e-07);
    u_xlat16 = u_xlat5.x / u_xlat16;
    u_xlat42 = u_xlat42 * u_xlat16;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = u_xlat2.x * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat31;
    u_xlat29 = fma((-u_xlat29), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat42 * u_xlat2.x;
    u_xlat2.x = (-u_xlat44) + u_xlat4.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat3.xyw);
    u_xlat5.xyz = u_xlat7.xyz * float3(u_xlat42);
    u_xlat42 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat42 * u_xlat42;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat42 = u_xlat42 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat9.xyz * float3(u_xlat29);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat30), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 5 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 6 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 7 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 9 sampler slot 8

Constant Buffer "FGlobals" (512 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_SpecCube0_BoxMax at 144
  Vector4 unity_SpecCube0_BoxMin at 160
  Vector4 unity_SpecCube0_ProbePosition at 176
  Vector4 unity_SpecCube0_HDR at 192
  Vector4 unity_SpecCube1_BoxMax at 208
  Vector4 unity_SpecCube1_BoxMin at 224
  Vector4 unity_SpecCube1_ProbePosition at 240
  Vector4 unity_SpecCube1_HDR at 256
  Vector4 unity_ProbeVolumeParams at 272
  Vector3 unity_ProbeVolumeSizeInv at 352
  Vector3 unity_ProbeVolumeMin at 368
  Vector4 _LightColor0 at 384
  Vector4 _Control_TexelSize at 400
  Vector4 _Splat0_ST at 416
  Vector4 _Splat1_ST at 432
  Vector4 _Splat2_ST at 448
  Vector4 _Splat3_ST at 464
  Float _Metallic0 at 480
  Float _Metallic1 at 484
  Float _Metallic2 at 488
  Float _Metallic3 at 492
  Float _Smoothness0 at 496
  Float _Smoothness1 at 500
  Float _Smoothness2 at 504
  Float _Smoothness3 at 508
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(5) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(6) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float u_xlat14;
    float u_xlat15;
    float3 u_xlat16;
    bool u_xlatb16;
    float3 u_xlat18;
    float u_xlat27;
    float u_xlat28;
    float2 u_xlat29;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat39;
    float u_xlat40;
    float u_xlat41;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat2.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat40 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat41);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat30.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat31.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat41 = rsqrt(u_xlat41);
    u_xlat5.xyz = float3(u_xlat41) * u_xlat5.xyz;
    u_xlat41 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat16.xyz = u_xlat0.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat16.x = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = (-u_xlat3.x) + u_xlat16.x;
    u_xlat3.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat16.x, u_xlat3.x);
    u_xlat3.x = fma(u_xlat3.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlatb16 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb16){
        u_xlatb16 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat16.xyz = (bool(u_xlatb16)) ? u_xlat6.xyz : u_xlat0.xyz;
        u_xlat16.xyz = u_xlat16.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat16.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16.x = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat29.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat29.x, u_xlat16.x);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat16.x = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16.x = clamp(u_xlat16.x, 0.0f, 1.0f);
    u_xlat29.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat29.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat29.xy).x;
    u_xlat16.x = (-u_xlat29.x) + u_xlat16.x;
    u_xlat3.x = fma(u_xlat3.x, u_xlat16.x, u_xlat29.x);
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat16.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16.x = rsqrt(u_xlat16.x);
    u_xlat16.xyz = u_xlat16.xxx * u_xlat6.xyz;
    u_xlat5.x = (-u_xlat4.w) + 1.0;
    u_xlat18.x = dot((-u_xlat2.xyz), u_xlat16.xyz);
    u_xlat18.x = u_xlat18.x + u_xlat18.x;
    u_xlat18.xyz = fma(u_xlat16.xyz, (-u_xlat18.xxx), (-u_xlat2.xyz));
    u_xlat6.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlatb3 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb3){
        u_xlat3.x = dot(u_xlat18.xyz, u_xlat18.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        u_xlat7.xyz = u_xlat3.xxx * u_xlat18.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
        u_xlat8.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat18.xyz;
    }
    u_xlat3.x = fma((-u_xlat5.x), 0.699999988, 1.70000005);
    u_xlat3.x = u_xlat3.x * u_xlat5.x;
    u_xlat3.x = u_xlat3.x * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat3.x));
    u_xlat45 = u_xlat7.w + -1.0;
    u_xlat45 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat45, 1.0);
    u_xlat45 = u_xlat45 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat45);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat18.xyz, u_xlat18.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat9.xyz = u_xlat18.xyz * float3(u_xlat46);
            u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat18.xyz = fma(u_xlat9.xyz, float3(u_xlat46), u_xlat0.xyz);
        }
        u_xlat9 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat18.xyz, level(u_xlat3.x));
        u_xlat0.x = u_xlat9.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx;
        u_xlat18.xyz = fma(float3(u_xlat45), u_xlat7.xyz, (-u_xlat0.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat18.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat41), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat41) * u_xlat4.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat39 = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat16.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat16.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = dot(float2(u_xlat14), u_xlat5.xx);
    u_xlat14 = u_xlat14 + -0.5;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    u_xlat28 = u_xlat27 * u_xlat27;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat27 = u_xlat27 * u_xlat28;
    u_xlat27 = fma(u_xlat14, u_xlat27, 1.0);
    u_xlat28 = -abs(u_xlat39) + 1.0;
    u_xlat3.x = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat14 = fma(u_xlat14, u_xlat28, 1.0);
    u_xlat14 = u_xlat14 * u_xlat27;
    u_xlat14 = u_xlat2.x * u_xlat14;
    u_xlat27 = u_xlat5.x * u_xlat5.x;
    u_xlat27 = max(u_xlat27, 0.00200000009);
    u_xlat3.x = (-u_xlat27) + 1.0;
    u_xlat16.x = fma(abs(u_xlat39), u_xlat3.x, u_xlat27);
    u_xlat3.x = fma(u_xlat2.x, u_xlat3.x, u_xlat27);
    u_xlat39 = abs(u_xlat39) * u_xlat3.x;
    u_xlat39 = fma(u_xlat2.x, u_xlat16.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat3.x = u_xlat27 * u_xlat27;
    u_xlat16.x = fma(u_xlat15, u_xlat3.x, (-u_xlat15));
    u_xlat15 = fma(u_xlat16.x, u_xlat15, 1.0);
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat3.x / u_xlat15;
    u_xlat39 = u_xlat39 * u_xlat15;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat39 = sqrt(u_xlat39);
    u_xlat39 = u_xlat2.x * u_xlat39;
    u_xlat27 = u_xlat27 * u_xlat5.x;
    u_xlat27 = fma((-u_xlat27), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat2.x = (-u_xlat41) + u_xlat4.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = float3(u_xlat14) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * float3(u_xlat39);
    u_xlat39 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat39 * u_xlat39;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat39), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat28), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH SHADOWS_SCREEN
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 5 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 6 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 7 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 9 sampler slot 8

Constant Buffer "FGlobals" (560 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Control_TexelSize at 448
  Vector4 _Splat0_ST at 464
  Vector4 _Splat1_ST at 480
  Vector4 _Splat2_ST at 496
  Vector4 _Splat3_ST at 512
  Float _Metallic0 at 528
  Float _Metallic1 at 532
  Float _Metallic2 at 536
  Float _Metallic3 at 540
  Float _Smoothness0 at 544
  Float _Smoothness1 at 548
  Float _Smoothness2 at 552
  Float _Smoothness3 at 556
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(5) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(6) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float u_xlat19;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    bool u_xlatb31;
    float2 u_xlat32;
    float2 u_xlat33;
    float u_xlat42;
    float u_xlat43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat47;
    bool u_xlatb47;
    float u_xlat48;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat33.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat32.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat33.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat44 = rsqrt(u_xlat44);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat5.xyz;
    u_xlat44 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat17.xyz = u_xlat0.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat17.x = (-u_xlat3.x) + u_xlat17.x;
    u_xlat3.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat17.x, u_xlat3.x);
    u_xlat3.x = fma(u_xlat3.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlatb17 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb17){
        u_xlatb31 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb31)) ? u_xlat6.xyz : u_xlat0.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat31 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat45, u_xlat31);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat31 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat31 = clamp(u_xlat31, 0.0f, 1.0f);
    u_xlat6.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat45 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xy).x;
    u_xlat31 = (-u_xlat45) + u_xlat31;
    u_xlat3.x = fma(u_xlat3.x, u_xlat31, u_xlat45);
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat5.xyz = float3(u_xlat31) * u_xlat6.xyz;
    u_xlat31 = (-u_xlat4.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat5.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat6.xyz = fma(u_xlat5.xyz, (-float3(u_xlat45)), (-u_xlat2.xyz));
    u_xlat7.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    if(u_xlatb17){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat5.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat5);
        u_xlat9.y = dot(u_xlat10, u_xlat5);
        u_xlat9.z = dot(u_xlat8, u_xlat5);
    } else {
        u_xlat5.w = 1.0;
        u_xlat9.x = dot(FGlobals.unity_SHAr, u_xlat5);
        u_xlat9.y = dot(FGlobals.unity_SHAg, u_xlat5);
        u_xlat9.z = dot(FGlobals.unity_SHAb, u_xlat5);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD4.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = fma(u_xlat3.xyw, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb47 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb47){
        u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat47 = rsqrt(u_xlat47);
        u_xlat8.xyz = float3(u_xlat47) * u_xlat6.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat47 = min(u_xlat9.y, u_xlat9.x);
        u_xlat47 = min(u_xlat9.z, u_xlat47);
        u_xlat9.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat47), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat6.xyz;
    }
    u_xlat47 = fma((-u_xlat31), 0.699999988, 1.70000005);
    u_xlat47 = u_xlat31 * u_xlat47;
    u_xlat47 = u_xlat47 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat47));
    u_xlat48 = u_xlat8.w + -1.0;
    u_xlat48 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat48, 1.0);
    u_xlat48 = u_xlat48 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat48);
    u_xlatb49 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat6.xyz, u_xlat6.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat6.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat6.xyz = fma(u_xlat10.xyz, float3(u_xlat49), u_xlat0.xyz);
        }
        u_xlat10 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat6.xyz, level(u_xlat47));
        u_xlat0.x = u_xlat10.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx;
        u_xlat6.xyz = fma(float3(u_xlat48), u_xlat8.xyz, (-u_xlat0.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat6.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat44), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat44 = fma((-u_xlat44), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat44) * u_xlat4.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(float2(u_xlat15), float2(u_xlat31));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat29 = (-u_xlat2.x) + 1.0;
    u_xlat30 = u_xlat29 * u_xlat29;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat29 = u_xlat29 * u_xlat30;
    u_xlat29 = fma(u_xlat15, u_xlat29, 1.0);
    u_xlat30 = -abs(u_xlat42) + 1.0;
    u_xlat5.x = u_xlat30 * u_xlat30;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat30 = u_xlat30 * u_xlat5.x;
    u_xlat15 = fma(u_xlat15, u_xlat30, 1.0);
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat15 = u_xlat2.x * u_xlat15;
    u_xlat29 = u_xlat31 * u_xlat31;
    u_xlat29 = max(u_xlat29, 0.00200000009);
    u_xlat5.x = (-u_xlat29) + 1.0;
    u_xlat19 = fma(abs(u_xlat42), u_xlat5.x, u_xlat29);
    u_xlat5.x = fma(u_xlat2.x, u_xlat5.x, u_xlat29);
    u_xlat42 = abs(u_xlat42) * u_xlat5.x;
    u_xlat42 = fma(u_xlat2.x, u_xlat19, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat5.x = u_xlat29 * u_xlat29;
    u_xlat19 = fma(u_xlat16, u_xlat5.x, (-u_xlat16));
    u_xlat16 = fma(u_xlat19, u_xlat16, 1.0);
    u_xlat5.x = u_xlat5.x * 0.318309873;
    u_xlat16 = fma(u_xlat16, u_xlat16, 1.00000001e-07);
    u_xlat16 = u_xlat5.x / u_xlat16;
    u_xlat42 = u_xlat42 * u_xlat16;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = u_xlat2.x * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat31;
    u_xlat29 = fma((-u_xlat29), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat42 * u_xlat2.x;
    u_xlat2.x = (-u_xlat44) + u_xlat4.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat3.xyw);
    u_xlat5.xyz = u_xlat7.xyz * float3(u_xlat42);
    u_xlat42 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat42 * u_xlat42;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat42 = u_xlat42 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat9.xyz * float3(u_xlat29);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat30), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set CUBE Texture "unity_SpecCube0" to slot 9 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 10 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 12 sampler slot 7

Constant Buffer "FGlobals" (432 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_SpecCube0_BoxMax at 48
  Vector4 unity_SpecCube0_BoxMin at 64
  Vector4 unity_SpecCube0_ProbePosition at 80
  Vector4 unity_SpecCube0_HDR at 96
  Vector4 unity_SpecCube1_BoxMax at 112
  Vector4 unity_SpecCube1_BoxMin at 128
  Vector4 unity_SpecCube1_ProbePosition at 144
  Vector4 unity_SpecCube1_HDR at 160
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 304
  Vector4 _Splat0_ST at 320
  Vector4 _Splat1_ST at 336
  Vector4 _Splat2_ST at 352
  Vector4 _Splat3_ST at 368
  Float _NormalScale0 at 384
  Float _NormalScale1 at 388
  Float _NormalScale2 at 392
  Float _NormalScale3 at 396
  Float _Metallic0 at 400
  Float _Metallic1 at 404
  Float _Metallic2 at 408
  Float _Metallic3 at 412
  Float _Smoothness0 at 416
  Float _Smoothness1 at 420
  Float _Smoothness2 at 424
  Float _Smoothness3 at 428
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(9) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float u_xlat14;
    float u_xlat15;
    float3 u_xlat16;
    float3 u_xlat17;
    float u_xlat27;
    float u_xlat28;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat39;
    float u_xlat40;
    float u_xlat41;
    float u_xlat43;
    float u_xlat44;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat2.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat40 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat41);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat30.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat31.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat30.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat4.z = sqrt(u_xlat41);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat31.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat41 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat5.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat41 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat30.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30.x = rsqrt(u_xlat30.x);
    u_xlat5.xyz = u_xlat30.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat30.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat30.x = rsqrt(u_xlat30.x);
    u_xlat7.xyz = u_xlat30.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat30.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat30.x = rsqrt(u_xlat30.x);
    u_xlat8.xyz = u_xlat30.xxx * u_xlat8.xyz;
    u_xlat17.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat17.xyz);
    u_xlat4.xyz = fma(float3(u_xlat41), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat41 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb3 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat16.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat16.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat16.xyz);
        u_xlat16.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat16.xyz);
        u_xlat16.xyz = u_xlat16.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat16.xyz : u_xlat0.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16.x = fma(u_xlat3.y, 0.25, 0.75);
        u_xlat43 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat3.x = max(u_xlat16.x, u_xlat43);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    }
    u_xlat3.x = dot(u_xlat3, FGlobals.unity_OcclusionMaskSelector);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat16.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16.x = rsqrt(u_xlat16.x);
    u_xlat16.xyz = u_xlat16.xxx * u_xlat5.xyz;
    u_xlat4.x = (-u_xlat6.w) + 1.0;
    u_xlat17.x = dot((-u_xlat2.xyz), u_xlat16.xyz);
    u_xlat17.x = u_xlat17.x + u_xlat17.x;
    u_xlat17.xyz = fma(u_xlat16.xyz, (-u_xlat17.xxx), (-u_xlat2.xyz));
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlatb3 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb3){
        u_xlat3.x = dot(u_xlat17.xyz, u_xlat17.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        u_xlat7.xyz = u_xlat3.xxx * u_xlat17.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
        u_xlat8.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat17.xyz;
    }
    u_xlat3.x = fma((-u_xlat4.x), 0.699999988, 1.70000005);
    u_xlat3.x = u_xlat3.x * u_xlat4.x;
    u_xlat3.x = u_xlat3.x * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat3.x));
    u_xlat44 = u_xlat7.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat17.xyz, u_xlat17.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat9.xyz = u_xlat17.xyz * float3(u_xlat46);
            u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat17.xyz = fma(u_xlat9.xyz, float3(u_xlat46), u_xlat0.xyz);
        }
        u_xlat9 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat17.xyz, level(u_xlat3.x));
        u_xlat0.x = u_xlat9.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx;
        u_xlat17.xyz = fma(float3(u_xlat44), u_xlat7.xyz, (-u_xlat0.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat17.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat41), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat17.xyz = float3(u_xlat41) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat39 = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat16.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat16.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = dot(float2(u_xlat14), u_xlat4.xx);
    u_xlat14 = u_xlat14 + -0.5;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    u_xlat28 = u_xlat27 * u_xlat27;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat27 = u_xlat27 * u_xlat28;
    u_xlat27 = fma(u_xlat14, u_xlat27, 1.0);
    u_xlat28 = -abs(u_xlat39) + 1.0;
    u_xlat3.x = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat14 = fma(u_xlat14, u_xlat28, 1.0);
    u_xlat14 = u_xlat14 * u_xlat27;
    u_xlat14 = u_xlat2.x * u_xlat14;
    u_xlat27 = u_xlat4.x * u_xlat4.x;
    u_xlat27 = max(u_xlat27, 0.00200000009);
    u_xlat3.x = (-u_xlat27) + 1.0;
    u_xlat16.x = fma(abs(u_xlat39), u_xlat3.x, u_xlat27);
    u_xlat3.x = fma(u_xlat2.x, u_xlat3.x, u_xlat27);
    u_xlat39 = abs(u_xlat39) * u_xlat3.x;
    u_xlat39 = fma(u_xlat2.x, u_xlat16.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat3.x = u_xlat27 * u_xlat27;
    u_xlat16.x = fma(u_xlat15, u_xlat3.x, (-u_xlat15));
    u_xlat15 = fma(u_xlat16.x, u_xlat15, 1.0);
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat3.x / u_xlat15;
    u_xlat39 = u_xlat39 * u_xlat15;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat39 = sqrt(u_xlat39);
    u_xlat39 = u_xlat2.x * u_xlat39;
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat27 = fma((-u_xlat27), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat2.x = (-u_xlat41) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat39 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat39 * u_xlat39;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat39), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat17.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat28), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set CUBE Texture "unity_SpecCube0" to slot 9 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 10 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 12 sampler slot 7

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Control_TexelSize at 352
  Vector4 _Splat0_ST at 368
  Vector4 _Splat1_ST at 384
  Vector4 _Splat2_ST at 400
  Vector4 _Splat3_ST at 416
  Float _NormalScale0 at 432
  Float _NormalScale1 at 436
  Float _NormalScale2 at 440
  Float _NormalScale3 at 444
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(9) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float3 u_xlat18;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    float2 u_xlat32;
    float2 u_xlat33;
    float u_xlat42;
    float u_xlat43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    float u_xlat47;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat33.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat32.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat33.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat32.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat44 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat4.z = sqrt(u_xlat44);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat33.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat44 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat32.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32.x = rsqrt(u_xlat32.x);
    u_xlat5.xyz = u_xlat32.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat32.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat32.x = rsqrt(u_xlat32.x);
    u_xlat7.xyz = u_xlat32.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat32.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat32.x = rsqrt(u_xlat32.x);
    u_xlat8.xyz = u_xlat32.xxx * u_xlat8.xyz;
    u_xlat18.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat18.xyz);
    u_xlat4.xyz = fma(float3(u_xlat44), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat44 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb3 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb17 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat17.xyz = (bool(u_xlatb17)) ? u_xlat5.xyz : u_xlat0.xyz;
        u_xlat17.xyz = u_xlat17.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat17.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat17.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat31 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat31, u_xlat17.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat17.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat17.x = clamp(u_xlat17.x, 0.0f, 1.0f);
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat4.xyz = float3(u_xlat31) * u_xlat5.xyz;
    u_xlat31 = (-u_xlat6.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat4.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = fma(u_xlat4.xyz, (-float3(u_xlat45)), (-u_xlat2.xyz));
    u_xlat7.xyz = u_xlat17.xxx * FGlobals._LightColor0.xyz;
    if(u_xlatb3){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat4);
        u_xlat9.y = dot(u_xlat10, u_xlat4);
        u_xlat9.z = dot(u_xlat8, u_xlat4);
    } else {
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(FGlobals.unity_SHAr, u_xlat4);
        u_xlat9.y = dot(FGlobals.unity_SHAg, u_xlat4);
        u_xlat9.z = dot(FGlobals.unity_SHAb, u_xlat4);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD4.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = fma(u_xlat3.xyw, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb46 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb46){
        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat46 = rsqrt(u_xlat46);
        u_xlat8.xyz = float3(u_xlat46) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
        u_xlat46 = min(u_xlat9.z, u_xlat46);
        u_xlat9.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat46), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat46 = fma((-u_xlat31), 0.699999988, 1.70000005);
    u_xlat46 = u_xlat31 * u_xlat46;
    u_xlat46 = u_xlat46 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat46));
    u_xlat47 = u_xlat8.w + -1.0;
    u_xlat47 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat47, 1.0);
    u_xlat47 = u_xlat47 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat47);
    u_xlatb49 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat49), u_xlat0.xyz);
        }
        u_xlat10 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat46));
        u_xlat0.x = u_xlat10.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx;
        u_xlat5.xyz = fma(float3(u_xlat47), u_xlat8.xyz, (-u_xlat0.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat5.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat44), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat44 = fma((-u_xlat44), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(float2(u_xlat15), float2(u_xlat31));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat29 = (-u_xlat2.x) + 1.0;
    u_xlat30 = u_xlat29 * u_xlat29;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat29 = u_xlat29 * u_xlat30;
    u_xlat29 = fma(u_xlat15, u_xlat29, 1.0);
    u_xlat30 = -abs(u_xlat42) + 1.0;
    u_xlat4.x = u_xlat30 * u_xlat30;
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat15 = fma(u_xlat15, u_xlat30, 1.0);
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat15 = u_xlat2.x * u_xlat15;
    u_xlat29 = u_xlat31 * u_xlat31;
    u_xlat29 = max(u_xlat29, 0.00200000009);
    u_xlat4.x = (-u_xlat29) + 1.0;
    u_xlat18.x = fma(abs(u_xlat42), u_xlat4.x, u_xlat29);
    u_xlat4.x = fma(u_xlat2.x, u_xlat4.x, u_xlat29);
    u_xlat42 = abs(u_xlat42) * u_xlat4.x;
    u_xlat42 = fma(u_xlat2.x, u_xlat18.x, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat4.x = u_xlat29 * u_xlat29;
    u_xlat18.x = fma(u_xlat16, u_xlat4.x, (-u_xlat16));
    u_xlat16 = fma(u_xlat18.x, u_xlat16, 1.0);
    u_xlat4.x = u_xlat4.x * 0.318309873;
    u_xlat16 = fma(u_xlat16, u_xlat16, 1.00000001e-07);
    u_xlat16 = u_xlat4.x / u_xlat16;
    u_xlat42 = u_xlat42 * u_xlat16;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = u_xlat2.x * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat31;
    u_xlat29 = fma((-u_xlat29), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat42 * u_xlat2.x;
    u_xlat2.x = (-u_xlat44) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat3.xyw);
    u_xlat4.xyz = u_xlat7.xyz * float3(u_xlat42);
    u_xlat42 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat42 * u_xlat42;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat42 = u_xlat42 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat5.xyz, u_xlat3.xyz, u_xlat4.xyz);
    u_xlat1.xyz = u_xlat9.xyz * float3(u_xlat29);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat30), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 10 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 11 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 13 sampler slot 8

Constant Buffer "FGlobals" (528 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_SpecCube0_BoxMax at 144
  Vector4 unity_SpecCube0_BoxMin at 160
  Vector4 unity_SpecCube0_ProbePosition at 176
  Vector4 unity_SpecCube0_HDR at 192
  Vector4 unity_SpecCube1_BoxMax at 208
  Vector4 unity_SpecCube1_BoxMin at 224
  Vector4 unity_SpecCube1_ProbePosition at 240
  Vector4 unity_SpecCube1_HDR at 256
  Vector4 unity_ProbeVolumeParams at 272
  Vector3 unity_ProbeVolumeSizeInv at 352
  Vector3 unity_ProbeVolumeMin at 368
  Vector4 _LightColor0 at 384
  Vector4 _Control_TexelSize at 400
  Vector4 _Splat0_ST at 416
  Vector4 _Splat1_ST at 432
  Vector4 _Splat2_ST at 448
  Vector4 _Splat3_ST at 464
  Float _NormalScale0 at 480
  Float _NormalScale1 at 484
  Float _NormalScale2 at 488
  Float _NormalScale3 at 492
  Float _Metallic0 at 496
  Float _Metallic1 at 500
  Float _Metallic2 at 504
  Float _Metallic3 at 508
  Float _Smoothness0 at 512
  Float _Smoothness1 at 516
  Float _Smoothness2 at 520
  Float _Smoothness3 at 524
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(10) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float3 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float u_xlat14;
    float u_xlat15;
    float3 u_xlat16;
    bool u_xlatb16;
    float3 u_xlat17;
    float u_xlat27;
    float u_xlat28;
    float2 u_xlat29;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat39;
    float u_xlat40;
    float u_xlat41;
    float u_xlat44;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat2.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat40 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat41);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat30.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat31.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat30.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat4.z = sqrt(u_xlat41);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat31.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat41 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat5.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat41 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat30.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30.x = rsqrt(u_xlat30.x);
    u_xlat5.xyz = u_xlat30.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat30.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat30.x = rsqrt(u_xlat30.x);
    u_xlat7.xyz = u_xlat30.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat30.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat30.x = rsqrt(u_xlat30.x);
    u_xlat8.xyz = u_xlat30.xxx * u_xlat8.xyz;
    u_xlat17.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat17.xyz);
    u_xlat4.xyz = fma(float3(u_xlat41), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat41 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat16.xyz = u_xlat0.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat16.x = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = (-u_xlat3.x) + u_xlat16.x;
    u_xlat3.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat16.x, u_xlat3.x);
    u_xlat3.x = fma(u_xlat3.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlatb16 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb16){
        u_xlatb16 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat16.xyz = (bool(u_xlatb16)) ? u_xlat5.xyz : u_xlat0.xyz;
        u_xlat16.xyz = u_xlat16.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat16.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat29.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat29.x, u_xlat16.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat16.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16.x = clamp(u_xlat16.x, 0.0f, 1.0f);
    u_xlat29.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat29.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat29.xy).x;
    u_xlat16.x = (-u_xlat29.x) + u_xlat16.x;
    u_xlat3.x = fma(u_xlat3.x, u_xlat16.x, u_xlat29.x);
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat16.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16.x = rsqrt(u_xlat16.x);
    u_xlat16.xyz = u_xlat16.xxx * u_xlat5.xyz;
    u_xlat4.x = (-u_xlat6.w) + 1.0;
    u_xlat17.x = dot((-u_xlat2.xyz), u_xlat16.xyz);
    u_xlat17.x = u_xlat17.x + u_xlat17.x;
    u_xlat17.xyz = fma(u_xlat16.xyz, (-u_xlat17.xxx), (-u_xlat2.xyz));
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlatb3 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb3){
        u_xlat3.x = dot(u_xlat17.xyz, u_xlat17.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        u_xlat7.xyz = u_xlat3.xxx * u_xlat17.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
        u_xlat8.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat17.xyz;
    }
    u_xlat3.x = fma((-u_xlat4.x), 0.699999988, 1.70000005);
    u_xlat3.x = u_xlat3.x * u_xlat4.x;
    u_xlat3.x = u_xlat3.x * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat3.x));
    u_xlat44 = u_xlat7.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat17.xyz, u_xlat17.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat9.xyz = u_xlat17.xyz * float3(u_xlat46);
            u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat17.xyz = fma(u_xlat9.xyz, float3(u_xlat46), u_xlat0.xyz);
        }
        u_xlat9 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat17.xyz, level(u_xlat3.x));
        u_xlat0.x = u_xlat9.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx;
        u_xlat17.xyz = fma(float3(u_xlat44), u_xlat7.xyz, (-u_xlat0.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat17.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat41), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat17.xyz = float3(u_xlat41) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat39 = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat16.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat16.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = dot(float2(u_xlat14), u_xlat4.xx);
    u_xlat14 = u_xlat14 + -0.5;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    u_xlat28 = u_xlat27 * u_xlat27;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat27 = u_xlat27 * u_xlat28;
    u_xlat27 = fma(u_xlat14, u_xlat27, 1.0);
    u_xlat28 = -abs(u_xlat39) + 1.0;
    u_xlat3.x = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat14 = fma(u_xlat14, u_xlat28, 1.0);
    u_xlat14 = u_xlat14 * u_xlat27;
    u_xlat14 = u_xlat2.x * u_xlat14;
    u_xlat27 = u_xlat4.x * u_xlat4.x;
    u_xlat27 = max(u_xlat27, 0.00200000009);
    u_xlat3.x = (-u_xlat27) + 1.0;
    u_xlat16.x = fma(abs(u_xlat39), u_xlat3.x, u_xlat27);
    u_xlat3.x = fma(u_xlat2.x, u_xlat3.x, u_xlat27);
    u_xlat39 = abs(u_xlat39) * u_xlat3.x;
    u_xlat39 = fma(u_xlat2.x, u_xlat16.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat3.x = u_xlat27 * u_xlat27;
    u_xlat16.x = fma(u_xlat15, u_xlat3.x, (-u_xlat15));
    u_xlat15 = fma(u_xlat16.x, u_xlat15, 1.0);
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat3.x / u_xlat15;
    u_xlat39 = u_xlat39 * u_xlat15;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat39 = sqrt(u_xlat39);
    u_xlat39 = u_xlat2.x * u_xlat39;
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat27 = fma((-u_xlat27), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat2.x = (-u_xlat41) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat39 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat39 * u_xlat39;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat39), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat17.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat28), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH SHADOWS_SCREEN _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 10 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 11 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 13 sampler slot 8

Constant Buffer "FGlobals" (576 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Control_TexelSize at 448
  Vector4 _Splat0_ST at 464
  Vector4 _Splat1_ST at 480
  Vector4 _Splat2_ST at 496
  Vector4 _Splat3_ST at 512
  Float _NormalScale0 at 528
  Float _NormalScale1 at 532
  Float _NormalScale2 at 536
  Float _NormalScale3 at 540
  Float _Metallic0 at 544
  Float _Metallic1 at 548
  Float _Metallic2 at 552
  Float _Metallic3 at 556
  Float _Smoothness0 at 560
  Float _Smoothness1 at 564
  Float _Smoothness2 at 568
  Float _Smoothness3 at 572
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(10) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float3 u_xlat18;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    bool u_xlatb31;
    float2 u_xlat32;
    float2 u_xlat33;
    float u_xlat42;
    float u_xlat43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    float u_xlat47;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat33.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat32.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat33.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat32.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat44 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat4.z = sqrt(u_xlat44);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat33.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat44 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat32.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32.x = rsqrt(u_xlat32.x);
    u_xlat5.xyz = u_xlat32.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat32.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat32.x = rsqrt(u_xlat32.x);
    u_xlat7.xyz = u_xlat32.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat32.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat32.x = rsqrt(u_xlat32.x);
    u_xlat8.xyz = u_xlat32.xxx * u_xlat8.xyz;
    u_xlat18.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat18.xyz);
    u_xlat4.xyz = fma(float3(u_xlat44), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat44 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat17.xyz = u_xlat0.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat17.x = (-u_xlat3.x) + u_xlat17.x;
    u_xlat3.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat17.x, u_xlat3.x);
    u_xlat3.x = fma(u_xlat3.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlatb17 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb17){
        u_xlatb31 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb31)) ? u_xlat5.xyz : u_xlat0.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat31 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat45, u_xlat31);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat31 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat31 = clamp(u_xlat31, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat45 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat31 = (-u_xlat45) + u_xlat31;
    u_xlat3.x = fma(u_xlat3.x, u_xlat31, u_xlat45);
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat4.xyz = float3(u_xlat31) * u_xlat5.xyz;
    u_xlat31 = (-u_xlat6.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat4.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = fma(u_xlat4.xyz, (-float3(u_xlat45)), (-u_xlat2.xyz));
    u_xlat7.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    if(u_xlatb17){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat4);
        u_xlat9.y = dot(u_xlat10, u_xlat4);
        u_xlat9.z = dot(u_xlat8, u_xlat4);
    } else {
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(FGlobals.unity_SHAr, u_xlat4);
        u_xlat9.y = dot(FGlobals.unity_SHAg, u_xlat4);
        u_xlat9.z = dot(FGlobals.unity_SHAb, u_xlat4);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD4.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = fma(u_xlat3.xyw, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb46 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb46){
        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat46 = rsqrt(u_xlat46);
        u_xlat8.xyz = float3(u_xlat46) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
        u_xlat46 = min(u_xlat9.z, u_xlat46);
        u_xlat9.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat46), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat46 = fma((-u_xlat31), 0.699999988, 1.70000005);
    u_xlat46 = u_xlat31 * u_xlat46;
    u_xlat46 = u_xlat46 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat46));
    u_xlat47 = u_xlat8.w + -1.0;
    u_xlat47 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat47, 1.0);
    u_xlat47 = u_xlat47 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat47);
    u_xlatb49 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat49), u_xlat0.xyz);
        }
        u_xlat10 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat46));
        u_xlat0.x = u_xlat10.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx;
        u_xlat5.xyz = fma(float3(u_xlat47), u_xlat8.xyz, (-u_xlat0.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat5.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat44), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat44 = fma((-u_xlat44), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(float2(u_xlat15), float2(u_xlat31));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat29 = (-u_xlat2.x) + 1.0;
    u_xlat30 = u_xlat29 * u_xlat29;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat29 = u_xlat29 * u_xlat30;
    u_xlat29 = fma(u_xlat15, u_xlat29, 1.0);
    u_xlat30 = -abs(u_xlat42) + 1.0;
    u_xlat4.x = u_xlat30 * u_xlat30;
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat15 = fma(u_xlat15, u_xlat30, 1.0);
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat15 = u_xlat2.x * u_xlat15;
    u_xlat29 = u_xlat31 * u_xlat31;
    u_xlat29 = max(u_xlat29, 0.00200000009);
    u_xlat4.x = (-u_xlat29) + 1.0;
    u_xlat18.x = fma(abs(u_xlat42), u_xlat4.x, u_xlat29);
    u_xlat4.x = fma(u_xlat2.x, u_xlat4.x, u_xlat29);
    u_xlat42 = abs(u_xlat42) * u_xlat4.x;
    u_xlat42 = fma(u_xlat2.x, u_xlat18.x, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat4.x = u_xlat29 * u_xlat29;
    u_xlat18.x = fma(u_xlat16, u_xlat4.x, (-u_xlat16));
    u_xlat16 = fma(u_xlat18.x, u_xlat16, 1.0);
    u_xlat4.x = u_xlat4.x * 0.318309873;
    u_xlat16 = fma(u_xlat16, u_xlat16, 1.00000001e-07);
    u_xlat16 = u_xlat4.x / u_xlat16;
    u_xlat42 = u_xlat42 * u_xlat16;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = u_xlat2.x * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat31;
    u_xlat29 = fma((-u_xlat29), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat42 * u_xlat2.x;
    u_xlat2.x = (-u_xlat44) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat3.xyw);
    u_xlat4.xyz = u_xlat7.xyz * float3(u_xlat42);
    u_xlat42 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat42 * u_xlat42;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat42 = u_xlat42 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat5.xyz, u_xlat3.xyz, u_xlat4.xyz);
    u_xlat1.xyz = u_xlat9.xyz * float3(u_xlat29);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat30), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 8
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set CUBE Texture "unity_SpecCube0" to slot 6 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 7 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 9 sampler slot 7

Constant Buffer "FGlobals" (416 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_SpecCube0_BoxMax at 48
  Vector4 unity_SpecCube0_BoxMin at 64
  Vector4 unity_SpecCube0_ProbePosition at 80
  Vector4 unity_SpecCube0_HDR at 96
  Vector4 unity_SpecCube1_BoxMax at 112
  Vector4 unity_SpecCube1_BoxMin at 128
  Vector4 unity_SpecCube1_ProbePosition at 144
  Vector4 unity_SpecCube1_HDR at 160
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 304
  Vector4 _Splat0_ST at 320
  Vector4 _Splat1_ST at 336
  Vector4 _Splat2_ST at 352
  Vector4 _Splat3_ST at 368
  Float _Metallic0 at 384
  Float _Metallic1 at 388
  Float _Metallic2 at 392
  Float _Metallic3 at 396
  Float _Smoothness0 at 400
  Float _Smoothness1 at 404
  Float _Smoothness2 at 408
  Float _Smoothness3 at 412
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(6) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float u_xlat14;
    float u_xlat15;
    float3 u_xlat16;
    float3 u_xlat18;
    float u_xlat27;
    float u_xlat28;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    float u_xlat44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat2.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb40 = u_xlat40==0.0;
    if(((int(u_xlatb40) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat40 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat41);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat30.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat31.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat41 = rsqrt(u_xlat41);
    u_xlat5.xyz = float3(u_xlat41) * u_xlat5.xyz;
    u_xlat41 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb3 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat16.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat16.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat16.xyz);
        u_xlat16.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat16.xyz);
        u_xlat16.xyz = u_xlat16.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat16.xyz : u_xlat0.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16.x = fma(u_xlat3.y, 0.25, 0.75);
        u_xlat44 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat3.x = max(u_xlat16.x, u_xlat44);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    }
    u_xlat3.x = dot(u_xlat3, FGlobals.unity_OcclusionMaskSelector);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat16.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16.x = rsqrt(u_xlat16.x);
    u_xlat16.xyz = u_xlat16.xxx * u_xlat6.xyz;
    u_xlat5.x = (-u_xlat4.w) + 1.0;
    u_xlat18.x = dot((-u_xlat2.xyz), u_xlat16.xyz);
    u_xlat18.x = u_xlat18.x + u_xlat18.x;
    u_xlat18.xyz = fma(u_xlat16.xyz, (-u_xlat18.xxx), (-u_xlat2.xyz));
    u_xlat6.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlatb3 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb3){
        u_xlat3.x = dot(u_xlat18.xyz, u_xlat18.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        u_xlat7.xyz = u_xlat3.xxx * u_xlat18.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
        u_xlat8.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat18.xyz;
    }
    u_xlat3.x = fma((-u_xlat5.x), 0.699999988, 1.70000005);
    u_xlat3.x = u_xlat3.x * u_xlat5.x;
    u_xlat3.x = u_xlat3.x * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat3.x));
    u_xlat45 = u_xlat7.w + -1.0;
    u_xlat45 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat45, 1.0);
    u_xlat45 = u_xlat45 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat45);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat18.xyz, u_xlat18.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat9.xyz = u_xlat18.xyz * float3(u_xlat46);
            u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat18.xyz = fma(u_xlat9.xyz, float3(u_xlat46), u_xlat0.xyz);
        }
        u_xlat9 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat18.xyz, level(u_xlat3.x));
        u_xlat0.x = u_xlat9.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx;
        u_xlat18.xyz = fma(float3(u_xlat45), u_xlat7.xyz, (-u_xlat0.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat18.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat41), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat41) * u_xlat4.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat39 = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat16.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat16.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = dot(float2(u_xlat14), u_xlat5.xx);
    u_xlat14 = u_xlat14 + -0.5;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    u_xlat28 = u_xlat27 * u_xlat27;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat27 = u_xlat27 * u_xlat28;
    u_xlat27 = fma(u_xlat14, u_xlat27, 1.0);
    u_xlat28 = -abs(u_xlat39) + 1.0;
    u_xlat3.x = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat14 = fma(u_xlat14, u_xlat28, 1.0);
    u_xlat14 = u_xlat14 * u_xlat27;
    u_xlat14 = u_xlat2.x * u_xlat14;
    u_xlat27 = u_xlat5.x * u_xlat5.x;
    u_xlat27 = max(u_xlat27, 0.00200000009);
    u_xlat3.x = (-u_xlat27) + 1.0;
    u_xlat16.x = fma(abs(u_xlat39), u_xlat3.x, u_xlat27);
    u_xlat3.x = fma(u_xlat2.x, u_xlat3.x, u_xlat27);
    u_xlat39 = abs(u_xlat39) * u_xlat3.x;
    u_xlat39 = fma(u_xlat2.x, u_xlat16.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat3.x = u_xlat27 * u_xlat27;
    u_xlat16.x = fma(u_xlat15, u_xlat3.x, (-u_xlat15));
    u_xlat15 = fma(u_xlat16.x, u_xlat15, 1.0);
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat3.x / u_xlat15;
    u_xlat39 = u_xlat39 * u_xlat15;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat39 = sqrt(u_xlat39);
    u_xlat39 = u_xlat2.x * u_xlat39;
    u_xlat27 = u_xlat27 * u_xlat5.x;
    u_xlat27 = fma((-u_xlat27), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat2.x = (-u_xlat41) + u_xlat4.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = float3(u_xlat14) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * float3(u_xlat39);
    u_xlat39 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat39 * u_xlat39;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat39), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat28), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 8
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set CUBE Texture "unity_SpecCube0" to slot 6 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 7 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 9 sampler slot 7

Constant Buffer "FGlobals" (464 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Control_TexelSize at 352
  Vector4 _Splat0_ST at 368
  Vector4 _Splat1_ST at 384
  Vector4 _Splat2_ST at 400
  Vector4 _Splat3_ST at 416
  Float _Metallic0 at 432
  Float _Metallic1 at 436
  Float _Metallic2 at 440
  Float _Metallic3 at 444
  Float _Smoothness0 at 448
  Float _Smoothness1 at 452
  Float _Smoothness2 at 456
  Float _Smoothness3 at 460
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(6) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float u_xlat19;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    float2 u_xlat32;
    float2 u_xlat33;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat47;
    bool u_xlatb47;
    float u_xlat48;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat43 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb43 = u_xlat43==0.0;
    if(((int(u_xlatb43) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat33.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat32.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat33.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat44 = rsqrt(u_xlat44);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat5.xyz;
    u_xlat44 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb3 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb17 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat17.xyz = (bool(u_xlatb17)) ? u_xlat6.xyz : u_xlat0.xyz;
        u_xlat17.xyz = u_xlat17.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat17.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat17.x = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat31 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat31, u_xlat17.x);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat17.x = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat17.x = clamp(u_xlat17.x, 0.0f, 1.0f);
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat5.xyz = float3(u_xlat31) * u_xlat6.xyz;
    u_xlat31 = (-u_xlat4.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat5.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat6.xyz = fma(u_xlat5.xyz, (-float3(u_xlat45)), (-u_xlat2.xyz));
    u_xlat7.xyz = u_xlat17.xxx * FGlobals._LightColor0.xyz;
    if(u_xlatb3){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat5.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat5);
        u_xlat9.y = dot(u_xlat10, u_xlat5);
        u_xlat9.z = dot(u_xlat8, u_xlat5);
    } else {
        u_xlat5.w = 1.0;
        u_xlat9.x = dot(FGlobals.unity_SHAr, u_xlat5);
        u_xlat9.y = dot(FGlobals.unity_SHAg, u_xlat5);
        u_xlat9.z = dot(FGlobals.unity_SHAb, u_xlat5);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD4.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = fma(u_xlat3.xyw, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb47 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb47){
        u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat47 = rsqrt(u_xlat47);
        u_xlat8.xyz = float3(u_xlat47) * u_xlat6.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat47 = min(u_xlat9.y, u_xlat9.x);
        u_xlat47 = min(u_xlat9.z, u_xlat47);
        u_xlat9.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat47), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat6.xyz;
    }
    u_xlat47 = fma((-u_xlat31), 0.699999988, 1.70000005);
    u_xlat47 = u_xlat31 * u_xlat47;
    u_xlat47 = u_xlat47 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat47));
    u_xlat48 = u_xlat8.w + -1.0;
    u_xlat48 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat48, 1.0);
    u_xlat48 = u_xlat48 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat48);
    u_xlatb49 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat6.xyz, u_xlat6.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat6.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat6.xyz = fma(u_xlat10.xyz, float3(u_xlat49), u_xlat0.xyz);
        }
        u_xlat10 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat6.xyz, level(u_xlat47));
        u_xlat0.x = u_xlat10.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx;
        u_xlat6.xyz = fma(float3(u_xlat48), u_xlat8.xyz, (-u_xlat0.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat6.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat44), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat44 = fma((-u_xlat44), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat44) * u_xlat4.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(float2(u_xlat15), float2(u_xlat31));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat29 = (-u_xlat2.x) + 1.0;
    u_xlat30 = u_xlat29 * u_xlat29;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat29 = u_xlat29 * u_xlat30;
    u_xlat29 = fma(u_xlat15, u_xlat29, 1.0);
    u_xlat30 = -abs(u_xlat42) + 1.0;
    u_xlat5.x = u_xlat30 * u_xlat30;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat30 = u_xlat30 * u_xlat5.x;
    u_xlat15 = fma(u_xlat15, u_xlat30, 1.0);
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat15 = u_xlat2.x * u_xlat15;
    u_xlat29 = u_xlat31 * u_xlat31;
    u_xlat29 = max(u_xlat29, 0.00200000009);
    u_xlat5.x = (-u_xlat29) + 1.0;
    u_xlat19 = fma(abs(u_xlat42), u_xlat5.x, u_xlat29);
    u_xlat5.x = fma(u_xlat2.x, u_xlat5.x, u_xlat29);
    u_xlat42 = abs(u_xlat42) * u_xlat5.x;
    u_xlat42 = fma(u_xlat2.x, u_xlat19, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat5.x = u_xlat29 * u_xlat29;
    u_xlat19 = fma(u_xlat16, u_xlat5.x, (-u_xlat16));
    u_xlat16 = fma(u_xlat19, u_xlat16, 1.0);
    u_xlat5.x = u_xlat5.x * 0.318309873;
    u_xlat16 = fma(u_xlat16, u_xlat16, 1.00000001e-07);
    u_xlat16 = u_xlat5.x / u_xlat16;
    u_xlat42 = u_xlat42 * u_xlat16;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = u_xlat2.x * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat31;
    u_xlat29 = fma((-u_xlat29), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat42 * u_xlat2.x;
    u_xlat2.x = (-u_xlat44) + u_xlat4.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat3.xyw);
    u_xlat5.xyz = u_xlat7.xyz * float3(u_xlat42);
    u_xlat42 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat42 * u_xlat42;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat42 = u_xlat42 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat9.xyz * float3(u_xlat29);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat30), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 9
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 6 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 7 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 8 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 9 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 10 sampler slot 8

Constant Buffer "FGlobals" (512 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_SpecCube0_BoxMax at 144
  Vector4 unity_SpecCube0_BoxMin at 160
  Vector4 unity_SpecCube0_ProbePosition at 176
  Vector4 unity_SpecCube0_HDR at 192
  Vector4 unity_SpecCube1_BoxMax at 208
  Vector4 unity_SpecCube1_BoxMin at 224
  Vector4 unity_SpecCube1_ProbePosition at 240
  Vector4 unity_SpecCube1_HDR at 256
  Vector4 unity_ProbeVolumeParams at 272
  Vector3 unity_ProbeVolumeSizeInv at 352
  Vector3 unity_ProbeVolumeMin at 368
  Vector4 _LightColor0 at 384
  Vector4 _Control_TexelSize at 400
  Vector4 _Splat0_ST at 416
  Vector4 _Splat1_ST at 432
  Vector4 _Splat2_ST at 448
  Vector4 _Splat3_ST at 464
  Float _Metallic0 at 480
  Float _Metallic1 at 484
  Float _Metallic2 at 488
  Float _Metallic3 at 492
  Float _Smoothness0 at 496
  Float _Smoothness1 at 500
  Float _Smoothness2 at 504
  Float _Smoothness3 at 508
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(6) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(7) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(8) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(9) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float u_xlat14;
    float u_xlat15;
    float3 u_xlat16;
    bool u_xlatb16;
    float3 u_xlat18;
    float u_xlat27;
    float u_xlat28;
    float2 u_xlat29;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat2.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb40 = u_xlat40==0.0;
    if(((int(u_xlatb40) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat40 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat41);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat30.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat31.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat41 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat41 = rsqrt(u_xlat41);
    u_xlat5.xyz = float3(u_xlat41) * u_xlat5.xyz;
    u_xlat41 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat16.xyz = u_xlat0.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat16.x = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = (-u_xlat3.x) + u_xlat16.x;
    u_xlat3.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat16.x, u_xlat3.x);
    u_xlat3.x = fma(u_xlat3.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlatb16 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb16){
        u_xlatb16 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat16.xyz = (bool(u_xlatb16)) ? u_xlat6.xyz : u_xlat0.xyz;
        u_xlat16.xyz = u_xlat16.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat16.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16.x = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat29.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat29.x, u_xlat16.x);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat16.x = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16.x = clamp(u_xlat16.x, 0.0f, 1.0f);
    u_xlat29.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat29.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat29.xy).x;
    u_xlat16.x = (-u_xlat29.x) + u_xlat16.x;
    u_xlat3.x = fma(u_xlat3.x, u_xlat16.x, u_xlat29.x);
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat16.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16.x = rsqrt(u_xlat16.x);
    u_xlat16.xyz = u_xlat16.xxx * u_xlat6.xyz;
    u_xlat5.x = (-u_xlat4.w) + 1.0;
    u_xlat18.x = dot((-u_xlat2.xyz), u_xlat16.xyz);
    u_xlat18.x = u_xlat18.x + u_xlat18.x;
    u_xlat18.xyz = fma(u_xlat16.xyz, (-u_xlat18.xxx), (-u_xlat2.xyz));
    u_xlat6.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlatb3 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb3){
        u_xlat3.x = dot(u_xlat18.xyz, u_xlat18.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        u_xlat7.xyz = u_xlat3.xxx * u_xlat18.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
        u_xlat8.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat18.xyz;
    }
    u_xlat3.x = fma((-u_xlat5.x), 0.699999988, 1.70000005);
    u_xlat3.x = u_xlat3.x * u_xlat5.x;
    u_xlat3.x = u_xlat3.x * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat3.x));
    u_xlat45 = u_xlat7.w + -1.0;
    u_xlat45 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat45, 1.0);
    u_xlat45 = u_xlat45 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat45);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat18.xyz, u_xlat18.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat9.xyz = u_xlat18.xyz * float3(u_xlat46);
            u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat18.xyz = fma(u_xlat9.xyz, float3(u_xlat46), u_xlat0.xyz);
        }
        u_xlat9 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat18.xyz, level(u_xlat3.x));
        u_xlat0.x = u_xlat9.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx;
        u_xlat18.xyz = fma(float3(u_xlat45), u_xlat7.xyz, (-u_xlat0.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat18.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat41), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat41) * u_xlat4.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat39 = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat16.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat16.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = dot(float2(u_xlat14), u_xlat5.xx);
    u_xlat14 = u_xlat14 + -0.5;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    u_xlat28 = u_xlat27 * u_xlat27;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat27 = u_xlat27 * u_xlat28;
    u_xlat27 = fma(u_xlat14, u_xlat27, 1.0);
    u_xlat28 = -abs(u_xlat39) + 1.0;
    u_xlat3.x = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat14 = fma(u_xlat14, u_xlat28, 1.0);
    u_xlat14 = u_xlat14 * u_xlat27;
    u_xlat14 = u_xlat2.x * u_xlat14;
    u_xlat27 = u_xlat5.x * u_xlat5.x;
    u_xlat27 = max(u_xlat27, 0.00200000009);
    u_xlat3.x = (-u_xlat27) + 1.0;
    u_xlat16.x = fma(abs(u_xlat39), u_xlat3.x, u_xlat27);
    u_xlat3.x = fma(u_xlat2.x, u_xlat3.x, u_xlat27);
    u_xlat39 = abs(u_xlat39) * u_xlat3.x;
    u_xlat39 = fma(u_xlat2.x, u_xlat16.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat3.x = u_xlat27 * u_xlat27;
    u_xlat16.x = fma(u_xlat15, u_xlat3.x, (-u_xlat15));
    u_xlat15 = fma(u_xlat16.x, u_xlat15, 1.0);
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat3.x / u_xlat15;
    u_xlat39 = u_xlat39 * u_xlat15;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat39 = sqrt(u_xlat39);
    u_xlat39 = u_xlat2.x * u_xlat39;
    u_xlat27 = u_xlat27 * u_xlat5.x;
    u_xlat27 = fma((-u_xlat27), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat2.x = (-u_xlat41) + u_xlat4.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = float3(u_xlat14) * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat6.xyz * float3(u_xlat39);
    u_xlat39 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat39 * u_xlat39;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat39), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat28), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH SHADOWS_SCREEN _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 9
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 6 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 7 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 8 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 9 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 10 sampler slot 8

Constant Buffer "FGlobals" (560 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Control_TexelSize at 448
  Vector4 _Splat0_ST at 464
  Vector4 _Splat1_ST at 480
  Vector4 _Splat2_ST at 496
  Vector4 _Splat3_ST at 512
  Float _Metallic0 at 528
  Float _Metallic1 at 532
  Float _Metallic2 at 536
  Float _Metallic3 at 540
  Float _Smoothness0 at 544
  Float _Smoothness1 at 548
  Float _Smoothness2 at 552
  Float _Smoothness3 at 556
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(6) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(7) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(8) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(9) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float u_xlat19;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    bool u_xlatb31;
    float2 u_xlat32;
    float2 u_xlat33;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat47;
    bool u_xlatb47;
    float u_xlat48;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat43 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb43 = u_xlat43==0.0;
    if(((int(u_xlatb43) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat33.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat32.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat33.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat44 = rsqrt(u_xlat44);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat5.xyz;
    u_xlat44 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat17.xyz = u_xlat0.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat17.x = (-u_xlat3.x) + u_xlat17.x;
    u_xlat3.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat17.x, u_xlat3.x);
    u_xlat3.x = fma(u_xlat3.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlatb17 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb17){
        u_xlatb31 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb31)) ? u_xlat6.xyz : u_xlat0.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat31 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat45, u_xlat31);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat31 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat31 = clamp(u_xlat31, 0.0f, 1.0f);
    u_xlat6.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat45 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat6.xy).x;
    u_xlat31 = (-u_xlat45) + u_xlat31;
    u_xlat3.x = fma(u_xlat3.x, u_xlat31, u_xlat45);
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat5.xyz = float3(u_xlat31) * u_xlat6.xyz;
    u_xlat31 = (-u_xlat4.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat5.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat6.xyz = fma(u_xlat5.xyz, (-float3(u_xlat45)), (-u_xlat2.xyz));
    u_xlat7.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    if(u_xlatb17){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat5.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat5);
        u_xlat9.y = dot(u_xlat10, u_xlat5);
        u_xlat9.z = dot(u_xlat8, u_xlat5);
    } else {
        u_xlat5.w = 1.0;
        u_xlat9.x = dot(FGlobals.unity_SHAr, u_xlat5);
        u_xlat9.y = dot(FGlobals.unity_SHAg, u_xlat5);
        u_xlat9.z = dot(FGlobals.unity_SHAb, u_xlat5);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD4.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = fma(u_xlat3.xyw, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb47 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb47){
        u_xlat47 = dot(u_xlat6.xyz, u_xlat6.xyz);
        u_xlat47 = rsqrt(u_xlat47);
        u_xlat8.xyz = float3(u_xlat47) * u_xlat6.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat47 = min(u_xlat9.y, u_xlat9.x);
        u_xlat47 = min(u_xlat9.z, u_xlat47);
        u_xlat9.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat47), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat6.xyz;
    }
    u_xlat47 = fma((-u_xlat31), 0.699999988, 1.70000005);
    u_xlat47 = u_xlat31 * u_xlat47;
    u_xlat47 = u_xlat47 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat47));
    u_xlat48 = u_xlat8.w + -1.0;
    u_xlat48 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat48, 1.0);
    u_xlat48 = u_xlat48 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat48);
    u_xlatb49 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat6.xyz, u_xlat6.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat6.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat6.xyz = fma(u_xlat10.xyz, float3(u_xlat49), u_xlat0.xyz);
        }
        u_xlat10 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat6.xyz, level(u_xlat47));
        u_xlat0.x = u_xlat10.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx;
        u_xlat6.xyz = fma(float3(u_xlat48), u_xlat8.xyz, (-u_xlat0.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat6.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat44), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat44 = fma((-u_xlat44), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat44) * u_xlat4.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(float2(u_xlat15), float2(u_xlat31));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat29 = (-u_xlat2.x) + 1.0;
    u_xlat30 = u_xlat29 * u_xlat29;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat29 = u_xlat29 * u_xlat30;
    u_xlat29 = fma(u_xlat15, u_xlat29, 1.0);
    u_xlat30 = -abs(u_xlat42) + 1.0;
    u_xlat5.x = u_xlat30 * u_xlat30;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat30 = u_xlat30 * u_xlat5.x;
    u_xlat15 = fma(u_xlat15, u_xlat30, 1.0);
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat15 = u_xlat2.x * u_xlat15;
    u_xlat29 = u_xlat31 * u_xlat31;
    u_xlat29 = max(u_xlat29, 0.00200000009);
    u_xlat5.x = (-u_xlat29) + 1.0;
    u_xlat19 = fma(abs(u_xlat42), u_xlat5.x, u_xlat29);
    u_xlat5.x = fma(u_xlat2.x, u_xlat5.x, u_xlat29);
    u_xlat42 = abs(u_xlat42) * u_xlat5.x;
    u_xlat42 = fma(u_xlat2.x, u_xlat19, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat5.x = u_xlat29 * u_xlat29;
    u_xlat19 = fma(u_xlat16, u_xlat5.x, (-u_xlat16));
    u_xlat16 = fma(u_xlat19, u_xlat16, 1.0);
    u_xlat5.x = u_xlat5.x * 0.318309873;
    u_xlat16 = fma(u_xlat16, u_xlat16, 1.00000001e-07);
    u_xlat16 = u_xlat5.x / u_xlat16;
    u_xlat42 = u_xlat42 * u_xlat16;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = u_xlat2.x * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat31;
    u_xlat29 = fma((-u_xlat29), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat42 * u_xlat2.x;
    u_xlat2.x = (-u_xlat44) + u_xlat4.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat3.xyw);
    u_xlat5.xyz = u_xlat7.xyz * float3(u_xlat42);
    u_xlat42 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat42 * u_xlat42;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat42 = u_xlat42 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat9.xyz * float3(u_xlat29);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat30), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 12
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_Normal0" to slot 6 sampler slot 8
Set 2D Texture "_Normal1" to slot 7 sampler slot 9
Set 2D Texture "_Normal2" to slot 8 sampler slot 10
Set 2D Texture "_Normal3" to slot 9 sampler slot 11
Set CUBE Texture "unity_SpecCube0" to slot 10 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 11 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 13 sampler slot 7

Constant Buffer "FGlobals" (432 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_SpecCube0_BoxMax at 48
  Vector4 unity_SpecCube0_BoxMin at 64
  Vector4 unity_SpecCube0_ProbePosition at 80
  Vector4 unity_SpecCube0_HDR at 96
  Vector4 unity_SpecCube1_BoxMax at 112
  Vector4 unity_SpecCube1_BoxMin at 128
  Vector4 unity_SpecCube1_ProbePosition at 144
  Vector4 unity_SpecCube1_HDR at 160
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 304
  Vector4 _Splat0_ST at 320
  Vector4 _Splat1_ST at 336
  Vector4 _Splat2_ST at 352
  Vector4 _Splat3_ST at 368
  Float _NormalScale0 at 384
  Float _NormalScale1 at 388
  Float _NormalScale2 at 392
  Float _NormalScale3 at 396
  Float _Metallic0 at 400
  Float _Metallic1 at 404
  Float _Metallic2 at 408
  Float _Metallic3 at 412
  Float _Smoothness0 at 416
  Float _Smoothness1 at 420
  Float _Smoothness2 at 424
  Float _Smoothness3 at 428
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (12) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(10) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float3 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float u_xlat14;
    float u_xlat15;
    float3 u_xlat16;
    float3 u_xlat17;
    float u_xlat27;
    float u_xlat28;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    float u_xlat43;
    float u_xlat44;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat2.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb40 = u_xlat40==0.0;
    if(((int(u_xlatb40) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat40 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat41);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat30.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat31.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat30.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat4.z = sqrt(u_xlat41);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat31.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat41 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat5.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat41 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat30.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30.x = rsqrt(u_xlat30.x);
    u_xlat5.xyz = u_xlat30.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat30.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat30.x = rsqrt(u_xlat30.x);
    u_xlat7.xyz = u_xlat30.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat30.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat30.x = rsqrt(u_xlat30.x);
    u_xlat8.xyz = u_xlat30.xxx * u_xlat8.xyz;
    u_xlat17.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat17.xyz);
    u_xlat4.xyz = fma(float3(u_xlat41), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat41 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb3 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat16.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat16.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat16.xyz);
        u_xlat16.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat16.xyz);
        u_xlat16.xyz = u_xlat16.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyz = (bool(u_xlatb3)) ? u_xlat16.xyz : u_xlat0.xyz;
        u_xlat3.xyz = u_xlat3.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat3.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16.x = fma(u_xlat3.y, 0.25, 0.75);
        u_xlat43 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat3.x = max(u_xlat16.x, u_xlat43);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
    } else {
        u_xlat3.x = float(1.0);
        u_xlat3.y = float(1.0);
        u_xlat3.z = float(1.0);
        u_xlat3.w = float(1.0);
    }
    u_xlat3.x = dot(u_xlat3, FGlobals.unity_OcclusionMaskSelector);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat16.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16.x = rsqrt(u_xlat16.x);
    u_xlat16.xyz = u_xlat16.xxx * u_xlat5.xyz;
    u_xlat4.x = (-u_xlat6.w) + 1.0;
    u_xlat17.x = dot((-u_xlat2.xyz), u_xlat16.xyz);
    u_xlat17.x = u_xlat17.x + u_xlat17.x;
    u_xlat17.xyz = fma(u_xlat16.xyz, (-u_xlat17.xxx), (-u_xlat2.xyz));
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlatb3 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb3){
        u_xlat3.x = dot(u_xlat17.xyz, u_xlat17.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        u_xlat7.xyz = u_xlat3.xxx * u_xlat17.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
        u_xlat8.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat17.xyz;
    }
    u_xlat3.x = fma((-u_xlat4.x), 0.699999988, 1.70000005);
    u_xlat3.x = u_xlat3.x * u_xlat4.x;
    u_xlat3.x = u_xlat3.x * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat3.x));
    u_xlat44 = u_xlat7.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat17.xyz, u_xlat17.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat9.xyz = u_xlat17.xyz * float3(u_xlat46);
            u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat17.xyz = fma(u_xlat9.xyz, float3(u_xlat46), u_xlat0.xyz);
        }
        u_xlat9 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat17.xyz, level(u_xlat3.x));
        u_xlat0.x = u_xlat9.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx;
        u_xlat17.xyz = fma(float3(u_xlat44), u_xlat7.xyz, (-u_xlat0.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat17.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat41), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat17.xyz = float3(u_xlat41) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat39 = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat16.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat16.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = dot(float2(u_xlat14), u_xlat4.xx);
    u_xlat14 = u_xlat14 + -0.5;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    u_xlat28 = u_xlat27 * u_xlat27;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat27 = u_xlat27 * u_xlat28;
    u_xlat27 = fma(u_xlat14, u_xlat27, 1.0);
    u_xlat28 = -abs(u_xlat39) + 1.0;
    u_xlat3.x = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat14 = fma(u_xlat14, u_xlat28, 1.0);
    u_xlat14 = u_xlat14 * u_xlat27;
    u_xlat14 = u_xlat2.x * u_xlat14;
    u_xlat27 = u_xlat4.x * u_xlat4.x;
    u_xlat27 = max(u_xlat27, 0.00200000009);
    u_xlat3.x = (-u_xlat27) + 1.0;
    u_xlat16.x = fma(abs(u_xlat39), u_xlat3.x, u_xlat27);
    u_xlat3.x = fma(u_xlat2.x, u_xlat3.x, u_xlat27);
    u_xlat39 = abs(u_xlat39) * u_xlat3.x;
    u_xlat39 = fma(u_xlat2.x, u_xlat16.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat3.x = u_xlat27 * u_xlat27;
    u_xlat16.x = fma(u_xlat15, u_xlat3.x, (-u_xlat15));
    u_xlat15 = fma(u_xlat16.x, u_xlat15, 1.0);
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat3.x / u_xlat15;
    u_xlat39 = u_xlat39 * u_xlat15;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat39 = sqrt(u_xlat39);
    u_xlat39 = u_xlat2.x * u_xlat39;
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat27 = fma((-u_xlat27), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat2.x = (-u_xlat41) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat39 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat39 * u_xlat39;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat39), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat17.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat28), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 12
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_Normal0" to slot 6 sampler slot 8
Set 2D Texture "_Normal1" to slot 7 sampler slot 9
Set 2D Texture "_Normal2" to slot 8 sampler slot 10
Set 2D Texture "_Normal3" to slot 9 sampler slot 11
Set CUBE Texture "unity_SpecCube0" to slot 10 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 11 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 13 sampler slot 7

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 240
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 unity_SpecCube0_BoxMax at 96
  Vector4 unity_SpecCube0_BoxMin at 112
  Vector4 unity_SpecCube0_ProbePosition at 128
  Vector4 unity_SpecCube0_HDR at 144
  Vector4 unity_SpecCube1_BoxMax at 160
  Vector4 unity_SpecCube1_BoxMin at 176
  Vector4 unity_SpecCube1_ProbePosition at 192
  Vector4 unity_SpecCube1_HDR at 208
  Vector4 unity_ProbeVolumeParams at 224
  Vector3 unity_ProbeVolumeSizeInv at 304
  Vector3 unity_ProbeVolumeMin at 320
  Vector4 _LightColor0 at 336
  Vector4 _Control_TexelSize at 352
  Vector4 _Splat0_ST at 368
  Vector4 _Splat1_ST at 384
  Vector4 _Splat2_ST at 400
  Vector4 _Splat3_ST at 416
  Float _NormalScale0 at 432
  Float _NormalScale1 at 436
  Float _NormalScale2 at 440
  Float _NormalScale3 at 444
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (12) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(10) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float3 u_xlat18;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    float2 u_xlat32;
    float2 u_xlat33;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    float u_xlat47;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat43 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb43 = u_xlat43==0.0;
    if(((int(u_xlatb43) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat33.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat32.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat33.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat32.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat44 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat4.z = sqrt(u_xlat44);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat33.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat44 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat32.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32.x = rsqrt(u_xlat32.x);
    u_xlat5.xyz = u_xlat32.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat32.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat32.x = rsqrt(u_xlat32.x);
    u_xlat7.xyz = u_xlat32.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat32.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat32.x = rsqrt(u_xlat32.x);
    u_xlat8.xyz = u_xlat32.xxx * u_xlat8.xyz;
    u_xlat18.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat18.xyz);
    u_xlat4.xyz = fma(float3(u_xlat44), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat44 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb3 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb3){
        u_xlatb17 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat17.xyz = (bool(u_xlatb17)) ? u_xlat5.xyz : u_xlat0.xyz;
        u_xlat17.xyz = u_xlat17.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat17.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat17.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat31 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat31, u_xlat17.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat17.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat17.x = clamp(u_xlat17.x, 0.0f, 1.0f);
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat4.xyz = float3(u_xlat31) * u_xlat5.xyz;
    u_xlat31 = (-u_xlat6.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat4.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = fma(u_xlat4.xyz, (-float3(u_xlat45)), (-u_xlat2.xyz));
    u_xlat7.xyz = u_xlat17.xxx * FGlobals._LightColor0.xyz;
    if(u_xlatb3){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat4);
        u_xlat9.y = dot(u_xlat10, u_xlat4);
        u_xlat9.z = dot(u_xlat8, u_xlat4);
    } else {
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(FGlobals.unity_SHAr, u_xlat4);
        u_xlat9.y = dot(FGlobals.unity_SHAg, u_xlat4);
        u_xlat9.z = dot(FGlobals.unity_SHAb, u_xlat4);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD4.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = fma(u_xlat3.xyw, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb46 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb46){
        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat46 = rsqrt(u_xlat46);
        u_xlat8.xyz = float3(u_xlat46) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
        u_xlat46 = min(u_xlat9.z, u_xlat46);
        u_xlat9.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat46), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat46 = fma((-u_xlat31), 0.699999988, 1.70000005);
    u_xlat46 = u_xlat31 * u_xlat46;
    u_xlat46 = u_xlat46 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat46));
    u_xlat47 = u_xlat8.w + -1.0;
    u_xlat47 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat47, 1.0);
    u_xlat47 = u_xlat47 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat47);
    u_xlatb49 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat49), u_xlat0.xyz);
        }
        u_xlat10 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat46));
        u_xlat0.x = u_xlat10.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx;
        u_xlat5.xyz = fma(float3(u_xlat47), u_xlat8.xyz, (-u_xlat0.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat5.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat44), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat44 = fma((-u_xlat44), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(float2(u_xlat15), float2(u_xlat31));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat29 = (-u_xlat2.x) + 1.0;
    u_xlat30 = u_xlat29 * u_xlat29;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat29 = u_xlat29 * u_xlat30;
    u_xlat29 = fma(u_xlat15, u_xlat29, 1.0);
    u_xlat30 = -abs(u_xlat42) + 1.0;
    u_xlat4.x = u_xlat30 * u_xlat30;
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat15 = fma(u_xlat15, u_xlat30, 1.0);
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat15 = u_xlat2.x * u_xlat15;
    u_xlat29 = u_xlat31 * u_xlat31;
    u_xlat29 = max(u_xlat29, 0.00200000009);
    u_xlat4.x = (-u_xlat29) + 1.0;
    u_xlat18.x = fma(abs(u_xlat42), u_xlat4.x, u_xlat29);
    u_xlat4.x = fma(u_xlat2.x, u_xlat4.x, u_xlat29);
    u_xlat42 = abs(u_xlat42) * u_xlat4.x;
    u_xlat42 = fma(u_xlat2.x, u_xlat18.x, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat4.x = u_xlat29 * u_xlat29;
    u_xlat18.x = fma(u_xlat16, u_xlat4.x, (-u_xlat16));
    u_xlat16 = fma(u_xlat18.x, u_xlat16, 1.0);
    u_xlat4.x = u_xlat4.x * 0.318309873;
    u_xlat16 = fma(u_xlat16, u_xlat16, 1.00000001e-07);
    u_xlat16 = u_xlat4.x / u_xlat16;
    u_xlat42 = u_xlat42 * u_xlat16;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = u_xlat2.x * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat31;
    u_xlat29 = fma((-u_xlat29), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat42 * u_xlat2.x;
    u_xlat2.x = (-u_xlat44) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat3.xyw);
    u_xlat4.xyz = u_xlat7.xyz * float3(u_xlat42);
    u_xlat42 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat42 * u_xlat42;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat42 = u_xlat42 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat5.xyz, u_xlat3.xyz, u_xlat4.xyz);
    u_xlat1.xyz = u_xlat9.xyz * float3(u_xlat29);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat30), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 13
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 9
Set 2D Texture "_Normal1" to slot 7 sampler slot 10
Set 2D Texture "_Normal2" to slot 8 sampler slot 11
Set 2D Texture "_Normal3" to slot 9 sampler slot 12
Set 2D Texture "_ShadowMapTexture" to slot 10 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 11 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 12 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 13 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 14 sampler slot 8

Constant Buffer "FGlobals" (528 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 288
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_SpecCube0_BoxMax at 144
  Vector4 unity_SpecCube0_BoxMin at 160
  Vector4 unity_SpecCube0_ProbePosition at 176
  Vector4 unity_SpecCube0_HDR at 192
  Vector4 unity_SpecCube1_BoxMax at 208
  Vector4 unity_SpecCube1_BoxMin at 224
  Vector4 unity_SpecCube1_ProbePosition at 240
  Vector4 unity_SpecCube1_HDR at 256
  Vector4 unity_ProbeVolumeParams at 272
  Vector3 unity_ProbeVolumeSizeInv at 352
  Vector3 unity_ProbeVolumeMin at 368
  Vector4 _LightColor0 at 384
  Vector4 _Control_TexelSize at 400
  Vector4 _Splat0_ST at 416
  Vector4 _Splat1_ST at 432
  Vector4 _Splat2_ST at 448
  Vector4 _Splat3_ST at 464
  Float _NormalScale0 at 480
  Float _NormalScale1 at 484
  Float _NormalScale2 at 488
  Float _NormalScale3 at 492
  Float _Metallic0 at 496
  Float _Metallic1 at 500
  Float _Metallic2 at 504
  Float _Metallic3 at 508
  Float _Smoothness0 at 512
  Float _Smoothness1 at 516
  Float _Smoothness2 at 520
  Float _Smoothness3 at 524
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (13) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(10) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(11) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(12) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(13) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(14) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float3 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float4 u_xlat9;
    float3 u_xlat10;
    bool3 u_xlatb10;
    float3 u_xlat11;
    bool3 u_xlatb12;
    float u_xlat14;
    float u_xlat15;
    float3 u_xlat16;
    bool u_xlatb16;
    float3 u_xlat17;
    float u_xlat27;
    float u_xlat28;
    float2 u_xlat29;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    float u_xlat44;
    float u_xlat46;
    bool u_xlatb46;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat2.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat40 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb40 = u_xlat40==0.0;
    if(((int(u_xlatb40) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat40 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat41);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat30.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat31.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat30.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat41 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat4.z = sqrt(u_xlat41);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat41 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat7.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat31.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat41 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat5.z = sqrt(u_xlat41);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat41 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat30.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat30.x = rsqrt(u_xlat30.x);
    u_xlat5.xyz = u_xlat30.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat30.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat30.x = rsqrt(u_xlat30.x);
    u_xlat7.xyz = u_xlat30.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat30.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat30.x = rsqrt(u_xlat30.x);
    u_xlat8.xyz = u_xlat30.xxx * u_xlat8.xyz;
    u_xlat17.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat17.xyz);
    u_xlat4.xyz = fma(float3(u_xlat41), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat41 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat16.xyz = u_xlat0.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat16.x = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16.x = sqrt(u_xlat16.x);
    u_xlat16.x = (-u_xlat3.x) + u_xlat16.x;
    u_xlat3.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat16.x, u_xlat3.x);
    u_xlat3.x = fma(u_xlat3.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlatb16 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb16){
        u_xlatb16 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat16.xyz = (bool(u_xlatb16)) ? u_xlat5.xyz : u_xlat0.xyz;
        u_xlat16.xyz = u_xlat16.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat16.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat29.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat29.x, u_xlat16.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat16.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16.x = clamp(u_xlat16.x, 0.0f, 1.0f);
    u_xlat29.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat29.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat29.xy).x;
    u_xlat16.x = (-u_xlat29.x) + u_xlat16.x;
    u_xlat3.x = fma(u_xlat3.x, u_xlat16.x, u_xlat29.x);
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat16.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16.x = rsqrt(u_xlat16.x);
    u_xlat16.xyz = u_xlat16.xxx * u_xlat5.xyz;
    u_xlat4.x = (-u_xlat6.w) + 1.0;
    u_xlat17.x = dot((-u_xlat2.xyz), u_xlat16.xyz);
    u_xlat17.x = u_xlat17.x + u_xlat17.x;
    u_xlat17.xyz = fma(u_xlat16.xyz, (-u_xlat17.xxx), (-u_xlat2.xyz));
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlatb3 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb3){
        u_xlat3.x = dot(u_xlat17.xyz, u_xlat17.xyz);
        u_xlat3.x = rsqrt(u_xlat3.x);
        u_xlat7.xyz = u_xlat3.xxx * u_xlat17.xyz;
        u_xlat8.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;
        u_xlatb10.xyz = (float3(0.0, 0.0, 0.0)<u_xlat7.xyz);
        {
            float3 hlslcc_movcTemp = u_xlat8;
            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;
            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;
            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;
            u_xlat8 = hlslcc_movcTemp;
        }
        u_xlat3.x = min(u_xlat8.y, u_xlat8.x);
        u_xlat3.x = min(u_xlat8.z, u_xlat3.x);
        u_xlat8.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat7.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat8.xyz);
    } else {
        u_xlat7.xyz = u_xlat17.xyz;
    }
    u_xlat3.x = fma((-u_xlat4.x), 0.699999988, 1.70000005);
    u_xlat3.x = u_xlat3.x * u_xlat4.x;
    u_xlat3.x = u_xlat3.x * 6.0;
    u_xlat7 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat7.xyz, level(u_xlat3.x));
    u_xlat44 = u_xlat7.w + -1.0;
    u_xlat44 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat44, 1.0);
    u_xlat44 = u_xlat44 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat8.xyz = u_xlat7.xyz * float3(u_xlat44);
    u_xlatb46 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb46){
        u_xlatb46 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb46){
            u_xlat46 = dot(u_xlat17.xyz, u_xlat17.xyz);
            u_xlat46 = rsqrt(u_xlat46);
            u_xlat9.xyz = u_xlat17.xyz * float3(u_xlat46);
            u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat10.xyz = u_xlat10.xyz / u_xlat9.xyz;
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat9.xyz;
            u_xlatb12.xyz = (float3(0.0, 0.0, 0.0)<u_xlat9.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat10;
                hlslcc_movcTemp.x = (u_xlatb12.x) ? u_xlat10.x : u_xlat11.x;
                hlslcc_movcTemp.y = (u_xlatb12.y) ? u_xlat10.y : u_xlat11.y;
                hlslcc_movcTemp.z = (u_xlatb12.z) ? u_xlat10.z : u_xlat11.z;
                u_xlat10 = hlslcc_movcTemp;
            }
            u_xlat46 = min(u_xlat10.y, u_xlat10.x);
            u_xlat46 = min(u_xlat10.z, u_xlat46);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat17.xyz = fma(u_xlat9.xyz, float3(u_xlat46), u_xlat0.xyz);
        }
        u_xlat9 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat17.xyz, level(u_xlat3.x));
        u_xlat0.x = u_xlat9.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat9.xyz * u_xlat0.xxx;
        u_xlat17.xyz = fma(float3(u_xlat44), u_xlat7.xyz, (-u_xlat0.xyz));
        u_xlat8.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat17.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat41), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat17.xyz = float3(u_xlat41) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat39), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat39 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat1.xyz;
    u_xlat39 = dot(u_xlat16.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat16.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat16.xyz, u_xlat1.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = dot(float2(u_xlat14), u_xlat4.xx);
    u_xlat14 = u_xlat14 + -0.5;
    u_xlat27 = (-u_xlat2.x) + 1.0;
    u_xlat28 = u_xlat27 * u_xlat27;
    u_xlat28 = u_xlat28 * u_xlat28;
    u_xlat27 = u_xlat27 * u_xlat28;
    u_xlat27 = fma(u_xlat14, u_xlat27, 1.0);
    u_xlat28 = -abs(u_xlat39) + 1.0;
    u_xlat3.x = u_xlat28 * u_xlat28;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat28 = u_xlat28 * u_xlat3.x;
    u_xlat14 = fma(u_xlat14, u_xlat28, 1.0);
    u_xlat14 = u_xlat14 * u_xlat27;
    u_xlat14 = u_xlat2.x * u_xlat14;
    u_xlat27 = u_xlat4.x * u_xlat4.x;
    u_xlat27 = max(u_xlat27, 0.00200000009);
    u_xlat3.x = (-u_xlat27) + 1.0;
    u_xlat16.x = fma(abs(u_xlat39), u_xlat3.x, u_xlat27);
    u_xlat3.x = fma(u_xlat2.x, u_xlat3.x, u_xlat27);
    u_xlat39 = abs(u_xlat39) * u_xlat3.x;
    u_xlat39 = fma(u_xlat2.x, u_xlat16.x, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat3.x = u_xlat27 * u_xlat27;
    u_xlat16.x = fma(u_xlat15, u_xlat3.x, (-u_xlat15));
    u_xlat15 = fma(u_xlat16.x, u_xlat15, 1.0);
    u_xlat3.x = u_xlat3.x * 0.318309873;
    u_xlat15 = fma(u_xlat15, u_xlat15, 1.00000001e-07);
    u_xlat15 = u_xlat3.x / u_xlat15;
    u_xlat39 = u_xlat39 * u_xlat15;
    u_xlat39 = u_xlat39 * 3.14159274;
    u_xlat39 = max(u_xlat39, 9.99999975e-05);
    u_xlat39 = sqrt(u_xlat39);
    u_xlat39 = u_xlat2.x * u_xlat39;
    u_xlat27 = u_xlat27 * u_xlat4.x;
    u_xlat27 = fma((-u_xlat27), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat39 = u_xlat39 * u_xlat2.x;
    u_xlat2.x = (-u_xlat41) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat5.xyz * float3(u_xlat39);
    u_xlat39 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat39 * u_xlat39;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat39 = u_xlat39 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat39), u_xlat0.xyz);
    u_xlat5.xyz = u_xlat5.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat17.xyz, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat1.xyz = u_xlat8.xyz * float3(u_xlat27);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat28), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON LIGHTPROBE_SH SHADOWS_SCREEN _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 13
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 9
Set 2D Texture "_Normal1" to slot 7 sampler slot 10
Set 2D Texture "_Normal2" to slot 8 sampler slot 11
Set 2D Texture "_Normal3" to slot 9 sampler slot 12
Set 2D Texture "_ShadowMapTexture" to slot 10 sampler slot 2
Set CUBE Texture "unity_SpecCube0" to slot 11 sampler slot 0
Set CUBE Texture "unity_SpecCube1" to slot 12 sampler slot -1
Set 3D Texture "unity_ProbeVolumeSH" to slot 13 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 14 sampler slot 8

Constant Buffer "FGlobals" (576 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 128
  Matrix4x4 unity_ProbeVolumeWorldToObject at 336
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_SHAr at 32
  Vector4 unity_SHAg at 48
  Vector4 unity_SHAb at 64
  Vector4 unity_OcclusionMaskSelector at 80
  Vector4 _LightShadowData at 96
  Vector4 unity_ShadowFadeCenterAndType at 112
  Vector4 unity_SpecCube0_BoxMax at 192
  Vector4 unity_SpecCube0_BoxMin at 208
  Vector4 unity_SpecCube0_ProbePosition at 224
  Vector4 unity_SpecCube0_HDR at 240
  Vector4 unity_SpecCube1_BoxMax at 256
  Vector4 unity_SpecCube1_BoxMin at 272
  Vector4 unity_SpecCube1_ProbePosition at 288
  Vector4 unity_SpecCube1_HDR at 304
  Vector4 unity_ProbeVolumeParams at 320
  Vector3 unity_ProbeVolumeSizeInv at 400
  Vector3 unity_ProbeVolumeMin at 416
  Vector4 _LightColor0 at 432
  Vector4 _Control_TexelSize at 448
  Vector4 _Splat0_ST at 464
  Vector4 _Splat1_ST at 480
  Vector4 _Splat2_ST at 496
  Vector4 _Splat3_ST at 512
  Float _NormalScale0 at 528
  Float _NormalScale1 at 532
  Float _NormalScale2 at 536
  Float _NormalScale3 at 540
  Float _Metallic0 at 544
  Float _Metallic1 at 548
  Float _Metallic2 at 552
  Float _Metallic3 at 556
  Float _Smoothness0 at 560
  Float _Smoothness1 at 564
  Float _Smoothness2 at 568
  Float _Smoothness3 at 572
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_SpecCube0_BoxMax;
    float4 unity_SpecCube0_BoxMin;
    float4 unity_SpecCube0_ProbePosition;
    float4 unity_SpecCube0_HDR;
    float4 unity_SpecCube1_BoxMax;
    float4 unity_SpecCube1_BoxMin;
    float4 unity_SpecCube1_ProbePosition;
    float4 unity_SpecCube1_HDR;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_SpecCube0 [[ sampler (0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (1) ]],
    sampler sampler_ShadowMapTexture [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (13) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(10) ]] ,
    texturecube<float, access::sample > unity_SpecCube0 [[ texture(11) ]] ,
    texturecube<float, access::sample > unity_SpecCube1 [[ texture(12) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(13) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(14) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb2;
    float4 u_xlat3;
    bool u_xlatb3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float3 u_xlat11;
    bool3 u_xlatb11;
    float3 u_xlat12;
    bool3 u_xlatb13;
    float u_xlat15;
    float u_xlat16;
    float3 u_xlat17;
    bool u_xlatb17;
    float3 u_xlat18;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    bool u_xlatb31;
    float2 u_xlat32;
    float2 u_xlat33;
    float u_xlat42;
    float u_xlat43;
    bool u_xlatb43;
    float u_xlat44;
    float u_xlat45;
    float u_xlat46;
    bool u_xlatb46;
    float u_xlat47;
    float u_xlat49;
    bool u_xlatb49;
    u_xlat0.x = input.TEXCOORD0.w;
    u_xlat0.y = input.TEXCOORD1.w;
    u_xlat0.z = input.TEXCOORD2.w;
    u_xlat1.xyz = (-u_xlat0.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat2.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat43 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb43 = u_xlat43==0.0;
    if(((int(u_xlatb43) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat43 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat44 = u_xlat43 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat44);
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat33.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat32.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat33.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat32.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat44 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat4.z = sqrt(u_xlat44);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat44 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat7.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat33.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat44 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat44 = min(u_xlat44, 1.0);
    u_xlat44 = (-u_xlat44) + 1.0;
    u_xlat5.z = sqrt(u_xlat44);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat44 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat32.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat32.x = rsqrt(u_xlat32.x);
    u_xlat5.xyz = u_xlat32.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat32.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat32.x = rsqrt(u_xlat32.x);
    u_xlat7.xyz = u_xlat32.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat32.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat32.x = rsqrt(u_xlat32.x);
    u_xlat8.xyz = u_xlat32.xxx * u_xlat8.xyz;
    u_xlat18.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat18.xyz);
    u_xlat4.xyz = fma(float3(u_xlat44), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat44 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat3.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat3.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat3.x = dot(u_xlat1.xyz, u_xlat3.xyz);
    u_xlat17.xyz = u_xlat0.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat17.x = dot(u_xlat17.xyz, u_xlat17.xyz);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat17.x = (-u_xlat3.x) + u_xlat17.x;
    u_xlat3.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat17.x, u_xlat3.x);
    u_xlat3.x = fma(u_xlat3.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlatb17 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb17){
        u_xlatb31 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb31)) ? u_xlat5.xyz : u_xlat0.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat31 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat45 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat45, u_xlat31);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat31 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat31 = clamp(u_xlat31, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD5.xy / input.TEXCOORD5.ww;
    u_xlat45 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat31 = (-u_xlat45) + u_xlat31;
    u_xlat3.x = fma(u_xlat3.x, u_xlat31, u_xlat45);
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat4.xyz = float3(u_xlat31) * u_xlat5.xyz;
    u_xlat31 = (-u_xlat6.w) + 1.0;
    u_xlat45 = dot((-u_xlat2.xyz), u_xlat4.xyz);
    u_xlat45 = u_xlat45 + u_xlat45;
    u_xlat5.xyz = fma(u_xlat4.xyz, (-float3(u_xlat45)), (-u_xlat2.xyz));
    u_xlat7.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    if(u_xlatb17){
        u_xlatb3 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat3.xyw = (bool(u_xlatb3)) ? u_xlat8.xyz : u_xlat0.xyz;
        u_xlat3.xyw = u_xlat3.xyw + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat8.yzw = u_xlat3.xyw * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat3.x = u_xlat8.y * 0.25;
        u_xlat17.x = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat45 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat3.x = max(u_xlat17.x, u_xlat3.x);
        u_xlat8.x = min(u_xlat45, u_xlat3.x);
        u_xlat9 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat8.xzw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.25, 0.0, 0.0);
        u_xlat10 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat3.xyw = u_xlat8.xzw + float3(0.5, 0.0, 0.0);
        u_xlat8 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xyw);
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(u_xlat9, u_xlat4);
        u_xlat9.y = dot(u_xlat10, u_xlat4);
        u_xlat9.z = dot(u_xlat8, u_xlat4);
    } else {
        u_xlat4.w = 1.0;
        u_xlat9.x = dot(FGlobals.unity_SHAr, u_xlat4);
        u_xlat9.y = dot(FGlobals.unity_SHAg, u_xlat4);
        u_xlat9.z = dot(FGlobals.unity_SHAb, u_xlat4);
    }
    u_xlat3.xyw = u_xlat9.xyz + input.TEXCOORD4.xyz;
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlat3.xyw = log2(u_xlat3.xyw);
    u_xlat3.xyw = u_xlat3.xyw * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat3.xyw = exp2(u_xlat3.xyw);
    u_xlat3.xyw = fma(u_xlat3.xyw, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat3.xyw = max(u_xlat3.xyw, float3(0.0, 0.0, 0.0));
    u_xlatb46 = 0.0<FGlobals.unity_SpecCube0_ProbePosition.w;
    if(u_xlatb46){
        u_xlat46 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat46 = rsqrt(u_xlat46);
        u_xlat8.xyz = float3(u_xlat46) * u_xlat5.xyz;
        u_xlat9.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = (float3(0.0, 0.0, 0.0)<u_xlat8.xyz);
        {
            float4 hlslcc_movcTemp = u_xlat9;
            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
            u_xlat9 = hlslcc_movcTemp;
        }
        u_xlat46 = min(u_xlat9.y, u_xlat9.x);
        u_xlat46 = min(u_xlat9.z, u_xlat46);
        u_xlat9.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = fma(u_xlat8.xyz, float3(u_xlat46), u_xlat9.xyz);
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    }
    u_xlat46 = fma((-u_xlat31), 0.699999988, 1.70000005);
    u_xlat46 = u_xlat31 * u_xlat46;
    u_xlat46 = u_xlat46 * 6.0;
    u_xlat8 = unity_SpecCube0.sample(samplerunity_SpecCube0, u_xlat8.xyz, level(u_xlat46));
    u_xlat47 = u_xlat8.w + -1.0;
    u_xlat47 = fma(FGlobals.unity_SpecCube0_HDR.w, u_xlat47, 1.0);
    u_xlat47 = u_xlat47 * FGlobals.unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat8.xyz * float3(u_xlat47);
    u_xlatb49 = FGlobals.unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb49){
        u_xlatb49 = 0.0<FGlobals.unity_SpecCube1_ProbePosition.w;
        if(u_xlatb49){
            u_xlat49 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat49 = rsqrt(u_xlat49);
            u_xlat10.xyz = u_xlat5.xyz * float3(u_xlat49);
            u_xlat11.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-u_xlat0.xyz) + FGlobals.unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = (float3(0.0, 0.0, 0.0)<u_xlat10.xyz);
            {
                float3 hlslcc_movcTemp = u_xlat11;
                hlslcc_movcTemp.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
                hlslcc_movcTemp.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
                hlslcc_movcTemp.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
                u_xlat11 = hlslcc_movcTemp;
            }
            u_xlat49 = min(u_xlat11.y, u_xlat11.x);
            u_xlat49 = min(u_xlat11.z, u_xlat49);
            u_xlat0.xyz = u_xlat0.xyz + (-FGlobals.unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = fma(u_xlat10.xyz, float3(u_xlat49), u_xlat0.xyz);
        }
        u_xlat10 = unity_SpecCube1.sample(samplerunity_SpecCube0, u_xlat5.xyz, level(u_xlat46));
        u_xlat0.x = u_xlat10.w + -1.0;
        u_xlat0.x = fma(FGlobals.unity_SpecCube1_HDR.w, u_xlat0.x, 1.0);
        u_xlat0.x = u_xlat0.x * FGlobals.unity_SpecCube1_HDR.x;
        u_xlat0.xyz = u_xlat10.xyz * u_xlat0.xxx;
        u_xlat5.xyz = fma(float3(u_xlat47), u_xlat8.xyz, (-u_xlat0.xyz));
        u_xlat9.xyz = fma(FGlobals.unity_SpecCube0_BoxMin.www, u_xlat5.xyz, u_xlat0.xyz);
    }
    u_xlat0.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(float3(u_xlat44), u_xlat0.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat44 = fma((-u_xlat44), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat44) * u_xlat6.xyz;
    u_xlat1.xyz = fma(u_xlat1.xyz, float3(u_xlat42), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat42 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat42 = max(u_xlat42, 0.00100000005);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat1.xyz = float3(u_xlat42) * u_xlat1.xyz;
    u_xlat42 = dot(u_xlat4.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat1.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat1.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat15 = u_xlat1.x * u_xlat1.x;
    u_xlat15 = dot(float2(u_xlat15), float2(u_xlat31));
    u_xlat15 = u_xlat15 + -0.5;
    u_xlat29 = (-u_xlat2.x) + 1.0;
    u_xlat30 = u_xlat29 * u_xlat29;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat29 = u_xlat29 * u_xlat30;
    u_xlat29 = fma(u_xlat15, u_xlat29, 1.0);
    u_xlat30 = -abs(u_xlat42) + 1.0;
    u_xlat4.x = u_xlat30 * u_xlat30;
    u_xlat4.x = u_xlat4.x * u_xlat4.x;
    u_xlat30 = u_xlat30 * u_xlat4.x;
    u_xlat15 = fma(u_xlat15, u_xlat30, 1.0);
    u_xlat15 = u_xlat15 * u_xlat29;
    u_xlat15 = u_xlat2.x * u_xlat15;
    u_xlat29 = u_xlat31 * u_xlat31;
    u_xlat29 = max(u_xlat29, 0.00200000009);
    u_xlat4.x = (-u_xlat29) + 1.0;
    u_xlat18.x = fma(abs(u_xlat42), u_xlat4.x, u_xlat29);
    u_xlat4.x = fma(u_xlat2.x, u_xlat4.x, u_xlat29);
    u_xlat42 = abs(u_xlat42) * u_xlat4.x;
    u_xlat42 = fma(u_xlat2.x, u_xlat18.x, u_xlat42);
    u_xlat42 = u_xlat42 + 9.99999975e-06;
    u_xlat42 = 0.5 / u_xlat42;
    u_xlat4.x = u_xlat29 * u_xlat29;
    u_xlat18.x = fma(u_xlat16, u_xlat4.x, (-u_xlat16));
    u_xlat16 = fma(u_xlat18.x, u_xlat16, 1.0);
    u_xlat4.x = u_xlat4.x * 0.318309873;
    u_xlat16 = fma(u_xlat16, u_xlat16, 1.00000001e-07);
    u_xlat16 = u_xlat4.x / u_xlat16;
    u_xlat42 = u_xlat42 * u_xlat16;
    u_xlat42 = u_xlat42 * 3.14159274;
    u_xlat42 = max(u_xlat42, 9.99999975e-05);
    u_xlat42 = sqrt(u_xlat42);
    u_xlat42 = u_xlat2.x * u_xlat42;
    u_xlat29 = u_xlat29 * u_xlat31;
    u_xlat29 = fma((-u_xlat29), 0.280000001, 1.0);
    u_xlat2.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb2 = u_xlat2.x!=0.0;
    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);
    u_xlat42 = u_xlat42 * u_xlat2.x;
    u_xlat2.x = (-u_xlat44) + u_xlat6.w;
    u_xlat2.x = u_xlat2.x + 1.0;
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat3.xyz = fma(u_xlat7.xyz, float3(u_xlat15), u_xlat3.xyw);
    u_xlat4.xyz = u_xlat7.xyz * float3(u_xlat42);
    u_xlat42 = (-u_xlat1.x) + 1.0;
    u_xlat1.x = u_xlat42 * u_xlat42;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat42 = u_xlat42 * u_xlat1.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat6.xyz = fma(u_xlat6.xyz, float3(u_xlat42), u_xlat0.xyz);
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat3.xyz = fma(u_xlat5.xyz, u_xlat3.xyz, u_xlat4.xyz);
    u_xlat1.xyz = u_xlat9.xyz * float3(u_xlat29);
    u_xlat2.xyw = (-u_xlat0.xyz) + u_xlat2.xxx;
    u_xlat0.xyz = fma(float3(u_xlat30), u_xlat2.xyw, u_xlat0.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat0.xyz, u_xlat3.xyz);
    output.SV_Target0.xyz = float3(u_xlat43) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="FORWARDADD" "QUEUE"="Geometry-100" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "TerrainCompatible"="true" }
  ZWrite Off
  Blend One One
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords: POINT
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Matrix4x4 unity_WorldToLight at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    output.TEXCOORD0.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float u_xlat12;
    float u_xlat14;
    float2 u_xlat18;
    float2 u_xlat19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD2.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat18.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat19.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat23 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat24 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat12 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat24, u_xlat12);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat24 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat24 * u_xlat3.x;
    u_xlat3.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat24 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat5.xyz = float3(u_xlat24) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat23), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat23 = fma((-u_xlat23), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = fma(u_xlat7.x, u_xlat1.x, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat1.x = (-u_xlat14) + 1.0;
    u_xlat8 = fma(abs(u_xlat21), u_xlat1.x, u_xlat14);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = fma(u_xlat2.x, u_xlat8, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = fma(u_xlat9, u_xlat14, (-u_xlat9));
    u_xlat1.x = fma(u_xlat1.x, u_xlat9, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat4.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (128 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 0

Constant Buffer "FGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 176
  Vector4 _Splat0_ST at 192
  Vector4 _Splat1_ST at 208
  Vector4 _Splat2_ST at 224
  Vector4 _Splat3_ST at 240
  Float _Metallic0 at 256
  Float _Metallic1 at 260
  Float _Metallic2 at 264
  Float _Metallic3 at 268
  Float _Smoothness0 at 272
  Float _Smoothness1 at 276
  Float _Smoothness2 at 280
  Float _Smoothness3 at 284
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    bool u_xlatb8;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat21;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb8 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb8){
        u_xlatb8 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat8.xyz = (bool(u_xlatb8)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat8.xyz = u_xlat8.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat8.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat8.x = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat14 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat14, u_xlat8.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat8.x = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * input.TEXCOORD0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: SPOT
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Matrix4x4 unity_WorldToLight at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    output.TEXCOORD0.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD3 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    bool u_xlatb5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float3 u_xlat12;
    bool u_xlatb12;
    float u_xlat14;
    float2 u_xlat18;
    float2 u_xlat19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD2.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat18.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat19.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat23 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3 = input.TEXCOORD1.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD1.xxxx, u_xlat3);
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD1.zzzz, u_xlat3);
    u_xlat3 = u_xlat3 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb5 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb5 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat12.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat12.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat12.xyz);
        u_xlat12.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat12.xyz);
        u_xlat12.xyz = u_xlat12.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat12.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat6.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat12.x, u_xlat6.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat5.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlatb12 = 0.0<u_xlat3.z;
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat19.xy = u_xlat3.xy / u_xlat3.ww;
    u_xlat19.xy = u_xlat19.xy + float2(0.5, 0.5);
    u_xlat24 = _LightTexture0.sample(sampler_LightTexture0, u_xlat19.xy).w;
    u_xlat24 = u_xlat24 * u_xlat12.x;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat3.x * u_xlat24;
    u_xlat3.x = u_xlat5.x * u_xlat3.x;
    u_xlat3.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat24 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat5.xyz = float3(u_xlat24) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat23), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat23 = fma((-u_xlat23), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = fma(u_xlat7.x, u_xlat1.x, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat1.x = (-u_xlat14) + 1.0;
    u_xlat8 = fma(abs(u_xlat21), u_xlat1.x, u_xlat14);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = fma(u_xlat2.x, u_xlat8, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = fma(u_xlat9, u_xlat14, (-u_xlat9));
    u_xlat1.x = fma(u_xlat1.x, u_xlat9, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat4.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT_COOKIE
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Matrix4x4 unity_WorldToLight at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    output.TEXCOORD0.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_LightTextureB0" to slot 5 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 6 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(5) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float u_xlat12;
    float u_xlat14;
    float2 u_xlat18;
    float2 u_xlat19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD2.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat18.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat19.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat23 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat24 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat12 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat24, u_xlat12);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat24 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat5.xx).x;
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat3.x = u_xlat3.x * u_xlat5.x;
    u_xlat3.x = u_xlat24 * u_xlat3.x;
    u_xlat3.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat24 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat5.xyz = float3(u_xlat24) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat23), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat23 = fma((-u_xlat23), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = fma(u_xlat7.x, u_xlat1.x, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat1.x = (-u_xlat14) + 1.0;
    u_xlat8 = fma(abs(u_xlat21), u_xlat1.x, u_xlat14);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = fma(u_xlat2.x, u_xlat8, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = fma(u_xlat9, u_xlat14, (-u_xlat9));
    u_xlat1.x = fma(u_xlat1.x, u_xlat9, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat4.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Matrix4x4 unity_WorldToLight at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    output.TEXCOORD0.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat1.xy = u_xlat0.yy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, u_xlat0.xx, u_xlat1.xy);
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, u_xlat0.zz, u_xlat0.xy);
    output.TEXCOORD3.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy, u_xlat0.ww, u_xlat0.xy);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat10;
    float u_xlat12;
    float u_xlat13;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat20;
    bool u_xlatb20;
    float u_xlat21;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat8.xy = input.TEXCOORD1.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD1.xx, u_xlat8.xy);
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD1.zz, u_xlat8.xy);
    u_xlat8.xy = u_xlat8.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb20 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb20){
        u_xlatb20 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat20 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat10 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat20, u_xlat10);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat20 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlat8.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat8.xy).w;
    u_xlat8.x = u_xlat20 * u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * input.TEXCOORD0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: SHADOWS_DEPTH SPOT
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Matrix4x4 unity_WorldToLight at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    output.TEXCOORD0.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD3 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 8 sampler slot 1

Constant Buffer "FGlobals" (704 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 528
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _Control_TexelSize at 592
  Vector4 _Splat0_ST at 608
  Vector4 _Splat1_ST at 624
  Vector4 _Splat2_ST at 640
  Vector4 _Splat3_ST at 656
  Float _Metallic0 at 672
  Float _Metallic1 at 676
  Float _Metallic2 at 680
  Float _Metallic3 at 684
  Float _Smoothness0 at 688
  Float _Smoothness1 at 692
  Float _Smoothness2 at 696
  Float _Smoothness3 at 700
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat21.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat22.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat26 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD1.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD1.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD1.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat10, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb10)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat18, u_xlat10);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat10 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat6 = input.TEXCOORD1.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD1.xxxx, u_xlat6);
    u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD1.zzzz, u_xlat6);
    u_xlat6 = u_xlat6 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
    u_xlat18 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat27 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat18 = fma(u_xlat18, u_xlat27, FGlobals._LightShadowData.x);
    u_xlat10 = (-u_xlat18) + u_xlat10;
    u_xlat2.x = fma(u_xlat2.x, u_xlat10, u_xlat18);
    u_xlatb10 = 0.0<u_xlat4.z;
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat18)).x;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat27 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat26), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat3.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat3.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat11, u_xlat16, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: SHADOWS_DEPTH SHADOWS_SOFT SPOT
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Matrix4x4 unity_WorldToLight at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    output.TEXCOORD0.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD3 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 8 sampler slot 1

Constant Buffer "FGlobals" (720 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 544
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _ShadowMapTexture_TexelSize at 528
  Vector4 _Control_TexelSize at 608
  Vector4 _Splat0_ST at 624
  Vector4 _Splat1_ST at 640
  Vector4 _Splat2_ST at 656
  Vector4 _Splat3_ST at 672
  Float _Metallic0 at 688
  Float _Metallic1 at 692
  Float _Metallic2 at 696
  Float _Metallic3 at 700
  Float _Smoothness0 at 704
  Float _Smoothness1 at 708
  Float _Smoothness2 at 712
  Float _Smoothness3 at 716
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _ShadowMapTexture_TexelSize;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float3 u_xlat12;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb14;
    float u_xlat15;
    float u_xlat24;
    float u_xlat26;
    bool u_xlatb26;
    float2 u_xlat29;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat36;
    bool u_xlatb36;
    float u_xlat37;
    float u_xlat38;
    float u_xlat39;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat1.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat37 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat37 = rsqrt(u_xlat37);
    u_xlat3.xyz = float3(u_xlat37) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat37 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat38 = u_xlat37 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat38);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat29.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat29.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat30.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat38 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD1.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD1.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD1.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat14 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = (-u_xlat2.x) + u_xlat14;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat14, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb14 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb14 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat14 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat26 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat26, u_xlat14);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat14 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlatb26 = u_xlat2.x<0.99000001;
    if(u_xlatb26){
        u_xlat6 = input.TEXCOORD1.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD1.xxxx, u_xlat6);
        u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD1.zzzz, u_xlat6);
        u_xlat6 = u_xlat6 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
        u_xlat7.xy = fma(u_xlat6.xy, FGlobals._ShadowMapTexture_TexelSize.zw, float2(0.5, 0.5));
        u_xlat7.xy = floor(u_xlat7.xy);
        u_xlat6.xy = fma(u_xlat6.xy, FGlobals._ShadowMapTexture_TexelSize.zw, (-u_xlat7.xy));
        u_xlat8 = u_xlat6.xxyy + float4(0.5, 1.0, 0.5, 1.0);
        u_xlat9.xw = u_xlat8.xz * u_xlat8.xz;
        u_xlat31.xy = fma(u_xlat9.xw, float2(0.5, 0.5), (-u_xlat6.xy));
        u_xlat8.xz = (-u_xlat6.xy) + float2(1.0, 1.0);
        u_xlat10.xy = min(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat8.xz = fma((-u_xlat10.xy), u_xlat10.xy, u_xlat8.xz);
        u_xlat6.xy = max(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat6.xy = fma((-u_xlat6.xy), u_xlat6.xy, u_xlat8.yw);
        u_xlat10.x = u_xlat31.x;
        u_xlat10.y = u_xlat8.x;
        u_xlat10.z = u_xlat6.x;
        u_xlat10.w = u_xlat9.x;
        u_xlat10 = u_xlat10 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat9.x = u_xlat31.y;
        u_xlat9.y = u_xlat8.z;
        u_xlat9.z = u_xlat6.y;
        u_xlat8 = u_xlat9 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat9 = u_xlat10.ywyw + u_xlat10.xzxz;
        u_xlat11 = u_xlat8.yyww + u_xlat8.xxzz;
        u_xlat6.xy = u_xlat10.yw / u_xlat9.zw;
        u_xlat6.xy = u_xlat6.xy + float2(-1.5, 0.5);
        u_xlat31.xy = u_xlat8.yw / u_xlat11.yw;
        u_xlat31.xy = u_xlat31.xy + float2(-1.5, 0.5);
        u_xlat8.xy = u_xlat6.xy * FGlobals._ShadowMapTexture_TexelSize.xx;
        u_xlat8.zw = u_xlat31.xy * FGlobals._ShadowMapTexture_TexelSize.yy;
        u_xlat9 = u_xlat9 * u_xlat11;
        u_xlat10 = fma(u_xlat7.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat8.xzyz);
        u_xlat26 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat10.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat39 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat10.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat39 = u_xlat39 * u_xlat9.y;
        u_xlat26 = fma(u_xlat9.x, u_xlat26, u_xlat39);
        u_xlat7 = fma(u_xlat7.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat8.xwyw);
        u_xlat39 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat26 = fma(u_xlat9.z, u_xlat39, u_xlat26);
        u_xlat39 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat26 = fma(u_xlat9.w, u_xlat39, u_xlat26);
        u_xlat39 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat26 = fma(u_xlat26, u_xlat39, FGlobals._LightShadowData.x);
    } else {
        u_xlat26 = 1.0;
    }
    u_xlat14 = (-u_xlat26) + u_xlat14;
    u_xlat2.x = fma(u_xlat2.x, u_xlat14, u_xlat26);
    u_xlatb14 = 0.0<u_xlat4.z;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat26 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat14 = u_xlat26 * u_xlat14;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat26)).x;
    u_xlat14 = u_xlat26 * u_xlat14;
    u_xlat2.x = u_xlat2.x * u_xlat14;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat39 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat4.xyz = float3(u_xlat39) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat38), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat38 = fma((-u_xlat38), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat38) * u_xlat5.xyz;
    u_xlat38 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat36), u_xlat3.xyz);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat0.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, float2(u_xlat38));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat24 * u_xlat24;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat24 = u_xlat24 * u_xlat1.x;
    u_xlat24 = fma(u_xlat12.x, u_xlat24, 1.0);
    u_xlat1.x = -abs(u_xlat36) + 1.0;
    u_xlat13 = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat12.x = fma(u_xlat12.x, u_xlat1.x, 1.0);
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat38 * u_xlat38;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat1.x = (-u_xlat24) + 1.0;
    u_xlat13 = fma(abs(u_xlat36), u_xlat1.x, u_xlat24);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat24);
    u_xlat36 = abs(u_xlat36) * u_xlat1.x;
    u_xlat36 = fma(u_xlat3.x, u_xlat13, u_xlat36);
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat1.x = fma(u_xlat15, u_xlat24, (-u_xlat15));
    u_xlat1.x = fma(u_xlat1.x, u_xlat15, 1.0);
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat24 = u_xlat24 / u_xlat1.x;
    u_xlat24 = u_xlat24 * u_xlat36;
    u_xlat24 = u_xlat24 * 3.14159274;
    u_xlat24 = max(u_xlat24, 9.99999975e-05);
    u_xlat12.y = sqrt(u_xlat24);
    u_xlat12.xy = u_xlat3.xx * u_xlat12.xy;
    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat24 = u_xlat36 * u_xlat12.y;
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.xyz = u_xlat2.xyz * float3(u_xlat24);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat12.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat37) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL SHADOWS_SCREEN
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 80
  Vector4 _ProjectionParams at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat7;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = rsqrt(u_xlat7);
    output.TEXCOORD0.xyz = float3(u_xlat7) * u_xlat1.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD4.zw = u_xlat0.zw;
    output.TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_ShadowMapTexture" to slot 5 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0

Constant Buffer "FGlobals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 272
  Vector4 _Splat0_ST at 288
  Vector4 _Splat1_ST at 304
  Vector4 _Splat2_ST at 320
  Vector4 _Splat3_ST at 336
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb14;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat20;
    float u_xlat21;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat8.x = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = (-u_xlat8.x) + u_xlat14;
    u_xlat8.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat14, u_xlat8.x);
    u_xlat8.x = fma(u_xlat8.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlatb14 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb14 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb14)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat14 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat20, u_xlat14);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat14 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD4.xy / input.TEXCOORD4.ww;
    u_xlat20 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat14 = (-u_xlat20) + u_xlat14;
    u_xlat8.x = fma(u_xlat8.x, u_xlat14, u_xlat20);
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * input.TEXCOORD0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE SHADOWS_SCREEN
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 _ProjectionParams at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float2 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat11;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat1;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = rsqrt(u_xlat11);
    output.TEXCOORD0.xyz = float3(u_xlat11) * u_xlat2.xyz;
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat2.xy = u_xlat0.yy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, u_xlat0.xx, u_xlat2.xy);
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, u_xlat0.zz, u_xlat0.xy);
    output.TEXCOORD3.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy, u_xlat0.ww, u_xlat0.xy);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD4.zw = u_xlat1.zw;
    output.TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 5 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0

Constant Buffer "FGlobals" (448 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Matrix4x4 unity_WorldToLight at 272
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 336
  Vector4 _Splat0_ST at 352
  Vector4 _Splat1_ST at 368
  Vector4 _Splat2_ST at 384
  Vector4 _Splat3_ST at 400
  Float _Metallic0 at 416
  Float _Metallic1 at 420
  Float _Metallic2 at 424
  Float _Metallic3 at 428
  Float _Smoothness0 at 432
  Float _Smoothness1 at 436
  Float _Smoothness2 at 440
  Float _Smoothness3 at 444
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    bool u_xlatb4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    float u_xlat12;
    float u_xlat13;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat20;
    float u_xlat21;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat8.xy = input.TEXCOORD1.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD1.xx, u_xlat8.xy);
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD1.zz, u_xlat8.xy);
    u_xlat8.xy = u_xlat8.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat20 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat20) + u_xlat4.x;
    u_xlat20 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat4.x, u_xlat20);
    u_xlat20 = fma(u_xlat20, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlatb4 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb4){
        u_xlatb4 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat10.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat10.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat10.xyz);
        u_xlat10.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat10.xyz);
        u_xlat10.xyz = u_xlat10.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat10.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10.x = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat5.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat10.x, u_xlat5.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat4.x = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat10.xy = input.TEXCOORD4.xy / input.TEXCOORD4.ww;
    u_xlat10.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat10.xy).x;
    u_xlat4.x = (-u_xlat10.x) + u_xlat4.x;
    u_xlat20 = fma(u_xlat20, u_xlat4.x, u_xlat10.x);
    u_xlat8.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat8.xy).w;
    u_xlat8.x = u_xlat20 * u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * input.TEXCOORD0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT SHADOWS_CUBE
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Matrix4x4 unity_WorldToLight at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    output.TEXCOORD0.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 7 sampler slot 1

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat21.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat22.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat26 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat10, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb10)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat18, u_xlat10);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat10 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat18 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat18 = max(abs(u_xlat6.z), u_xlat18);
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.z);
    u_xlat18 = max(u_xlat18, 9.99999975e-06);
    u_xlat18 = u_xlat18 * FGlobals._LightProjectionParams.w;
    u_xlat18 = FGlobals._LightProjectionParams.y / u_xlat18;
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.x);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat18), level(0.0));
    u_xlat27 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat18 = fma(u_xlat18, u_xlat27, FGlobals._LightShadowData.x);
    u_xlat10 = (-u_xlat18) + u_xlat10;
    u_xlat2.x = fma(u_xlat2.x, u_xlat10, u_xlat18);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat10)).x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat27 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat26), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat3.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat3.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat11, u_xlat16, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT SHADOWS_CUBE SHADOWS_SOFT
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Matrix4x4 unity_WorldToLight at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    output.TEXCOORD0.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 7 sampler slot 1

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    bool u_xlatb11;
    float u_xlat12;
    float u_xlat18;
    float u_xlat20;
    bool u_xlatb20;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat3.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat28 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat29);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat24.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat23.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat24.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat29 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat11 = (-u_xlat2.x) + u_xlat11;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat11, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb11 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb11){
        u_xlatb11 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb11)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat11 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat20, u_xlat11);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat11 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlatb20 = u_xlat2.x<0.99000001;
    if(u_xlatb20){
        u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat20 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat20 = max(abs(u_xlat6.z), u_xlat20);
        u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.z);
        u_xlat20 = max(u_xlat20, 9.99999975e-06);
        u_xlat20 = u_xlat20 * FGlobals._LightProjectionParams.w;
        u_xlat20 = FGlobals._LightProjectionParams.y / u_xlat20;
        u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.x);
        u_xlat20 = (-u_xlat20) + 1.0;
        u_xlat7.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat7.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xyz, saturate(u_xlat20), level(0.0));
        u_xlat8.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat7.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat20), level(0.0));
        u_xlat8.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat7.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat20), level(0.0));
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat7.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat20), level(0.0));
        u_xlat20 = dot(u_xlat7, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat30 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat20 = fma(u_xlat20, u_xlat30, FGlobals._LightShadowData.x);
    } else {
        u_xlat20 = 1.0;
    }
    u_xlat11 = (-u_xlat20) + u_xlat11;
    u_xlat2.x = fma(u_xlat2.x, u_xlat11, u_xlat20);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat11)).x;
    u_xlat2.x = u_xlat2.x * u_xlat11;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat30 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat4.xyz = float3(u_xlat30) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat29), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat3.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat3.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat12, u_xlat18, (-u_xlat12));
    u_xlat1.x = fma(u_xlat1.x, u_xlat12, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat3.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat9.xyz = u_xlat2.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT_COOKIE SHADOWS_CUBE
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Matrix4x4 unity_WorldToLight at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    output.TEXCOORD0.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_LightTextureB0" to slot 5 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 8 sampler slot 1

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(5) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat21.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat22.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat26 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat10, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb10)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat18, u_xlat10);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat10 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat18 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat18 = max(abs(u_xlat6.z), u_xlat18);
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.z);
    u_xlat18 = max(u_xlat18, 9.99999975e-06);
    u_xlat18 = u_xlat18 * FGlobals._LightProjectionParams.w;
    u_xlat18 = FGlobals._LightProjectionParams.y / u_xlat18;
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.x);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat18), level(0.0));
    u_xlat27 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat18 = fma(u_xlat18, u_xlat27, FGlobals._LightShadowData.x);
    u_xlat10 = (-u_xlat18) + u_xlat10;
    u_xlat2.x = fma(u_xlat2.x, u_xlat10, u_xlat18);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat10)).x;
    u_xlat18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat27 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat26), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat3.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat3.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat11, u_xlat16, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
  Matrix4x4 unity_WorldToLight at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat10;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    output.TEXCOORD0.xyz = float3(u_xlat10) * u_xlat1.xyz;
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_LightTextureB0" to slot 5 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 8 sampler slot 1

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(5) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    bool u_xlatb11;
    float u_xlat12;
    float u_xlat18;
    float u_xlat20;
    bool u_xlatb20;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat3.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat28 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat29);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat24.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat23.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat24.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat29 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat11 = (-u_xlat2.x) + u_xlat11;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat11, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb11 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb11){
        u_xlatb11 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb11)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat11 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat20, u_xlat11);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat11 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlatb20 = u_xlat2.x<0.99000001;
    if(u_xlatb20){
        u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat20 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat20 = max(abs(u_xlat6.z), u_xlat20);
        u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.z);
        u_xlat20 = max(u_xlat20, 9.99999975e-06);
        u_xlat20 = u_xlat20 * FGlobals._LightProjectionParams.w;
        u_xlat20 = FGlobals._LightProjectionParams.y / u_xlat20;
        u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.x);
        u_xlat20 = (-u_xlat20) + 1.0;
        u_xlat7.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat7.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xyz, saturate(u_xlat20), level(0.0));
        u_xlat8.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat7.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat20), level(0.0));
        u_xlat8.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat7.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat20), level(0.0));
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat7.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat20), level(0.0));
        u_xlat20 = dot(u_xlat7, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat30 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat20 = fma(u_xlat20, u_xlat30, FGlobals._LightShadowData.x);
    } else {
        u_xlat20 = 1.0;
    }
    u_xlat11 = (-u_xlat20) + u_xlat11;
    u_xlat2.x = fma(u_xlat2.x, u_xlat11, u_xlat20);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat11)).x;
    u_xlat20 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat11 = u_xlat20 * u_xlat11;
    u_xlat2.x = u_xlat2.x * u_xlat11;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat30 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat4.xyz = float3(u_xlat30) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat29), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat3.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat3.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat12, u_xlat18, (-u_xlat12));
    u_xlat1.x = fma(u_xlat1.x, u_xlat12, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat3.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat9.xyz = u_xlat2.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat1.xy));
    u_xlat5.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat1.xxx, u_xlat5.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD4.xy = input.TEXCOORD0.xy;
    output.TEXCOORD4.zw = float2(0.0, 0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 7
Set 2D Texture "_Normal1" to slot 6 sampler slot 8
Set 2D Texture "_Normal2" to slot 7 sampler slot 9
Set 2D Texture "_Normal3" to slot 8 sampler slot 10
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float3 u_xlat11;
    float u_xlat13;
    float u_xlat16;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    bool u_xlatb27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat2.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat25 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat26);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat20.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat21.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat26 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat7.z = sqrt(u_xlat26);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat4.z = sqrt(u_xlat26);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat26 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat7.z = sqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat21.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat5.z = sqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat26 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb27 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb27){
        u_xlatb27 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb27)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat27 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat13 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat27, u_xlat13);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat27 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat27 = clamp(u_xlat27, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat27 * u_xlat3.x;
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat11.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat11.x = rsqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat26), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz;
    u_xlat26 = (-u_xlat6.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat11.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat10 = dot(u_xlat11.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat2.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat10, u_xlat16, (-u_xlat10));
    u_xlat1.x = fma(u_xlat1.x, u_xlat10, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat2.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat4.xyz;
    u_xlat8.xyz = u_xlat4.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float u_xlat9;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat0.xy));
    u_xlat3.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat0.xxx, u_xlat3.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat1.xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = fma(u_xlat1.zxy, u_xlat0.yzx, (-u_xlat2.xyz));
    u_xlat2.xyz = u_xlat2.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat2.x;
    output.TEXCOORD0.x = u_xlat0.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat0.x;
    output.TEXCOORD2.x = u_xlat0.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat2.y;
    output.TEXCOORD2.y = u_xlat2.z;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy;
    output.TEXCOORD4.zw = float2(0.0, 0.0);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 2D Texture "_Normal0" to slot 5 sampler slot 6
Set 2D Texture "_Normal1" to slot 6 sampler slot 7
Set 2D Texture "_Normal2" to slot 7 sampler slot 8
Set 2D Texture "_Normal3" to slot 8 sampler slot 9
Set 3D Texture "unity_ProbeVolumeSH" to slot 9 sampler slot 0

Constant Buffer "FGlobals" (304 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 176
  Vector4 _Splat0_ST at 192
  Vector4 _Splat1_ST at 208
  Vector4 _Splat2_ST at 224
  Vector4 _Splat3_ST at 240
  Float _NormalScale0 at 256
  Float _NormalScale1 at 260
  Float _NormalScale2 at 264
  Float _NormalScale3 at 268
  Float _Metallic0 at 272
  Float _Metallic1 at 276
  Float _Metallic2 at 280
  Float _Metallic3 at 284
  Float _Smoothness0 at 288
  Float _Smoothness1 at 292
  Float _Smoothness2 at 296
  Float _Smoothness3 at 300
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler_Normal0 [[ sampler (6) ]],
    sampler sampler_Normal1 [[ sampler (7) ]],
    sampler sampler_Normal2 [[ sampler (8) ]],
    sampler sampler_Normal3 [[ sampler (9) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float3 u_xlat9;
    bool u_xlatb9;
    float u_xlat14;
    float u_xlat15;
    float u_xlat16;
    float2 u_xlat17;
    float2 u_xlat18;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat24;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat22 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat22 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat17.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat17.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat18.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat17.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat3.z = sqrt(u_xlat24);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat24 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat6.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat18.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat4.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb9 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb9 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat9.xyz = (bool(u_xlatb9)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat9.xyz = u_xlat9.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat9.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat9.x = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat16 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat16, u_xlat9.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat9.x = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat9.x = clamp(u_xlat9.x, 0.0f, 1.0f);
    u_xlat3.w = u_xlat3.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyw);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = rsqrt(u_xlat16);
    u_xlat3.xyz = float3(u_xlat16) * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat9.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, u_xlat2.xx);
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat14 = u_xlat14 * u_xlat15;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat15 = -abs(u_xlat21) + 1.0;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat15 = u_xlat15 * u_xlat3.x;
    u_xlat7.x = fma(u_xlat7.x, u_xlat15, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat2.x * u_xlat2.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat15 = (-u_xlat14) + 1.0;
    u_xlat2.x = fma(abs(u_xlat21), u_xlat15, u_xlat14);
    u_xlat15 = fma(u_xlat1.x, u_xlat15, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = fma(u_xlat1.x, u_xlat2.x, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat15 = fma(u_xlat8, u_xlat14, (-u_xlat8));
    u_xlat8 = fma(u_xlat15, u_xlat8, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat8 = fma(u_xlat8, u_xlat8, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat8;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat1.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat9.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: SPOT _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat1.xy));
    u_xlat5.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat1.xxx, u_xlat5.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD4.xy = input.TEXCOORD0.xy;
    output.TEXCOORD4.zw = float2(0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD5 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    bool u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float3 u_xlat11;
    float3 u_xlat13;
    bool u_xlatb13;
    float u_xlat16;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat2.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat25 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat26);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat20.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat21.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat26 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat7.z = sqrt(u_xlat26);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat4.z = sqrt(u_xlat26);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat26 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat7.z = sqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat21.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat5.z = sqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat26 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat3);
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat3);
    u_xlat3 = u_xlat3 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb5 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb5 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat13.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat13.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat13.xyz);
        u_xlat13.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat13.xyz);
        u_xlat13.xyz = u_xlat13.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat13.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat13.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat7.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat13.x, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat5.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlatb13 = 0.0<u_xlat3.z;
    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat21.xy = u_xlat3.xy / u_xlat3.ww;
    u_xlat21.xy = u_xlat21.xy + float2(0.5, 0.5);
    u_xlat27 = _LightTexture0.sample(sampler_LightTexture0, u_xlat21.xy).w;
    u_xlat27 = u_xlat27 * u_xlat13.x;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat3.x * u_xlat27;
    u_xlat3.x = u_xlat5.x * u_xlat3.x;
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat11.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat11.x = rsqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat26), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz;
    u_xlat26 = (-u_xlat6.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat11.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat10 = dot(u_xlat11.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat2.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat10, u_xlat16, (-u_xlat10));
    u_xlat1.x = fma(u_xlat1.x, u_xlat10, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat2.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat4.xyz;
    u_xlat8.xyz = u_xlat4.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT_COOKIE _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat1.xy));
    u_xlat5.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat1.xxx, u_xlat5.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD4.xy = input.TEXCOORD0.xy;
    output.TEXCOORD4.zw = float2(0.0, 0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_LightTextureB0" to slot 9 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 10 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(9) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float3 u_xlat11;
    float u_xlat13;
    float u_xlat16;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    bool u_xlatb27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat2.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat25 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat26);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat20.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat21.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat26 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat7.z = sqrt(u_xlat26);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat4.z = sqrt(u_xlat26);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat26 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat7.z = sqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat21.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat5.z = sqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat26 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb27 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb27){
        u_xlatb27 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb27)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat27 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat13 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat27, u_xlat13);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat27 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat27 = clamp(u_xlat27, 0.0f, 1.0f);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat5.xx).x;
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat3.x = u_xlat3.x * u_xlat5.x;
    u_xlat3.x = u_xlat27 * u_xlat3.x;
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat11.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat11.x = rsqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat26), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz;
    u_xlat26 = (-u_xlat6.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat11.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat10 = dot(u_xlat11.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat2.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat10, u_xlat16, (-u_xlat10));
    u_xlat1.x = fma(u_xlat1.x, u_xlat10, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat2.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat4.xyz;
    u_xlat8.xyz = u_xlat4.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat1.xy));
    u_xlat5.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat1.xxx, u_xlat5.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD4.xy = input.TEXCOORD0.xy;
    output.TEXCOORD4.zw = float2(0.0, 0.0);
    u_xlat1.xy = u_xlat0.yy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, u_xlat0.xx, u_xlat1.xy);
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, u_xlat0.zz, u_xlat0.xy);
    output.TEXCOORD5.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy, u_xlat0.ww, u_xlat0.xy);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 7
Set 2D Texture "_Normal1" to slot 6 sampler slot 8
Set 2D Texture "_Normal2" to slot 7 sampler slot 9
Set 2D Texture "_Normal3" to slot 8 sampler slot 10
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float3 u_xlat9;
    float u_xlat11;
    float u_xlat14;
    float u_xlat15;
    float u_xlat16;
    float2 u_xlat17;
    float2 u_xlat18;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    bool u_xlatb23;
    float u_xlat24;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat22 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat22 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat17.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat17.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat18.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat17.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat3.z = sqrt(u_xlat24);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat24 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat6.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat18.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat4.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat9.xy = input.TEXCOORD3.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat9.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD3.xx, u_xlat9.xy);
    u_xlat9.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD3.zz, u_xlat9.xy);
    u_xlat9.xy = u_xlat9.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb23 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb23){
        u_xlatb23 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb23)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat23 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat11 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat23, u_xlat11);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat23 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat23 = clamp(u_xlat23, 0.0f, 1.0f);
    u_xlat9.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat9.xy).w;
    u_xlat9.x = u_xlat23 * u_xlat9.x;
    u_xlat3.w = u_xlat3.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyw);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = rsqrt(u_xlat16);
    u_xlat3.xyz = float3(u_xlat16) * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat9.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, u_xlat2.xx);
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat14 = u_xlat14 * u_xlat15;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat15 = -abs(u_xlat21) + 1.0;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat15 = u_xlat15 * u_xlat3.x;
    u_xlat7.x = fma(u_xlat7.x, u_xlat15, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat2.x * u_xlat2.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat15 = (-u_xlat14) + 1.0;
    u_xlat2.x = fma(abs(u_xlat21), u_xlat15, u_xlat14);
    u_xlat15 = fma(u_xlat1.x, u_xlat15, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = fma(u_xlat1.x, u_xlat2.x, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat15 = fma(u_xlat8, u_xlat14, (-u_xlat8));
    u_xlat8 = fma(u_xlat15, u_xlat8, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat8 = fma(u_xlat8, u_xlat8, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat8;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat1.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat9.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: SHADOWS_DEPTH SPOT _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat1.xy));
    u_xlat5.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat1.xxx, u_xlat5.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD4.xy = input.TEXCOORD0.xy;
    output.TEXCOORD4.zw = float2(0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD5 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 12 sampler slot 1

Constant Buffer "FGlobals" (720 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 528
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _Control_TexelSize at 592
  Vector4 _Splat0_ST at 608
  Vector4 _Splat1_ST at 624
  Vector4 _Splat2_ST at 640
  Vector4 _Splat3_ST at 656
  Float _NormalScale0 at 672
  Float _NormalScale1 at 676
  Float _NormalScale2 at 680
  Float _NormalScale3 at 684
  Float _Metallic0 at 688
  Float _Metallic1 at 692
  Float _Metallic2 at 696
  Float _Metallic3 at 700
  Float _Smoothness0 at 704
  Float _Smoothness1 at 708
  Float _Smoothness2 at 712
  Float _Smoothness3 at 716
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    bool u_xlatb11;
    float u_xlat12;
    float u_xlat18;
    float u_xlat20;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat3.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat28 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat29);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat24.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat23.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat24.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat8.z = sqrt(u_xlat29);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat23.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat5.z = sqrt(u_xlat29);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat8.z = sqrt(u_xlat29);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat24.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat29 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat6.z = sqrt(u_xlat29);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat29 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat11 = (-u_xlat2.x) + u_xlat11;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat11, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb11 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb11){
        u_xlatb11 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb11)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat11 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat20, u_xlat11);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat11 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat6 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD3.xxxx, u_xlat6);
    u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD3.zzzz, u_xlat6);
    u_xlat6 = u_xlat6 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
    u_xlat20 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat30 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat20 = fma(u_xlat20, u_xlat30, FGlobals._LightShadowData.x);
    u_xlat11 = (-u_xlat20) + u_xlat11;
    u_xlat2.x = fma(u_xlat2.x, u_xlat11, u_xlat20);
    u_xlatb11 = 0.0<u_xlat4.z;
    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat20 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat11 = u_xlat20 * u_xlat11;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat20)).x;
    u_xlat11 = u_xlat20 * u_xlat11;
    u_xlat2.x = u_xlat2.x * u_xlat11;
    u_xlat5.w = u_xlat5.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyw);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = rsqrt(u_xlat11);
    u_xlat4.xyz = float3(u_xlat11) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat29), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat7.xyz;
    u_xlat29 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat3.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat3.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat12, u_xlat18, (-u_xlat12));
    u_xlat1.x = fma(u_xlat1.x, u_xlat12, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat3.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat9.xyz = u_xlat2.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: SHADOWS_DEPTH SHADOWS_SOFT SPOT _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat1.xy));
    u_xlat5.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat1.xxx, u_xlat5.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD4.xy = input.TEXCOORD0.xy;
    output.TEXCOORD4.zw = float2(0.0, 0.0);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD5 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 12 sampler slot 1

Constant Buffer "FGlobals" (736 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 544
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _ShadowMapTexture_TexelSize at 528
  Vector4 _Control_TexelSize at 608
  Vector4 _Splat0_ST at 624
  Vector4 _Splat1_ST at 640
  Vector4 _Splat2_ST at 656
  Vector4 _Splat3_ST at 672
  Float _NormalScale0 at 688
  Float _NormalScale1 at 692
  Float _NormalScale2 at 696
  Float _NormalScale3 at 700
  Float _Metallic0 at 704
  Float _Metallic1 at 708
  Float _Metallic2 at 712
  Float _Metallic3 at 716
  Float _Smoothness0 at 720
  Float _Smoothness1 at 724
  Float _Smoothness2 at 728
  Float _Smoothness3 at 732
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _ShadowMapTexture_TexelSize;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float4 u_xlat12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat16;
    float u_xlat26;
    float u_xlat28;
    bool u_xlatb28;
    float2 u_xlat31;
    float2 u_xlat32;
    float2 u_xlat34;
    float u_xlat39;
    bool u_xlatb39;
    float u_xlat40;
    float u_xlat41;
    float u_xlat42;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat40 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat41);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat31.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat32.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat41 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat8.z = sqrt(u_xlat41);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat31.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat41 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat5.z = sqrt(u_xlat41);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat41 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat8.z = sqrt(u_xlat41);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat32.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat41 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat6.z = sqrt(u_xlat41);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat41 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat15 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = (-u_xlat2.x) + u_xlat15;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat15, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb15 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat15 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat28 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat28, u_xlat15);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat15 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlatb28 = u_xlat2.x<0.99000001;
    if(u_xlatb28){
        u_xlat6 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD3.xxxx, u_xlat6);
        u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD3.zzzz, u_xlat6);
        u_xlat6 = u_xlat6 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
        u_xlat8.xy = fma(u_xlat6.xy, FGlobals._ShadowMapTexture_TexelSize.zw, float2(0.5, 0.5));
        u_xlat8.xy = floor(u_xlat8.xy);
        u_xlat6.xy = fma(u_xlat6.xy, FGlobals._ShadowMapTexture_TexelSize.zw, (-u_xlat8.xy));
        u_xlat9 = u_xlat6.xxyy + float4(0.5, 1.0, 0.5, 1.0);
        u_xlat10.xw = u_xlat9.xz * u_xlat9.xz;
        u_xlat34.xy = fma(u_xlat10.xw, float2(0.5, 0.5), (-u_xlat6.xy));
        u_xlat9.xz = (-u_xlat6.xy) + float2(1.0, 1.0);
        u_xlat11.xy = min(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat9.xz = fma((-u_xlat11.xy), u_xlat11.xy, u_xlat9.xz);
        u_xlat6.xy = max(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat6.xy = fma((-u_xlat6.xy), u_xlat6.xy, u_xlat9.yw);
        u_xlat11.x = u_xlat34.x;
        u_xlat11.y = u_xlat9.x;
        u_xlat11.z = u_xlat6.x;
        u_xlat11.w = u_xlat10.x;
        u_xlat11 = u_xlat11 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10.x = u_xlat34.y;
        u_xlat10.y = u_xlat9.z;
        u_xlat10.z = u_xlat6.y;
        u_xlat9 = u_xlat10 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10 = u_xlat11.ywyw + u_xlat11.xzxz;
        u_xlat12 = u_xlat9.yyww + u_xlat9.xxzz;
        u_xlat6.xy = u_xlat11.yw / u_xlat10.zw;
        u_xlat6.xy = u_xlat6.xy + float2(-1.5, 0.5);
        u_xlat34.xy = u_xlat9.yw / u_xlat12.yw;
        u_xlat34.xy = u_xlat34.xy + float2(-1.5, 0.5);
        u_xlat9.xy = u_xlat6.xy * FGlobals._ShadowMapTexture_TexelSize.xx;
        u_xlat9.zw = u_xlat34.xy * FGlobals._ShadowMapTexture_TexelSize.yy;
        u_xlat10 = u_xlat10 * u_xlat12;
        u_xlat11 = fma(u_xlat8.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat9.xzyz);
        u_xlat28 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat11.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat11.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat42 = u_xlat42 * u_xlat10.y;
        u_xlat28 = fma(u_xlat10.x, u_xlat28, u_xlat42);
        u_xlat8 = fma(u_xlat8.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat9.xwyw);
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat28 = fma(u_xlat10.z, u_xlat42, u_xlat28);
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat28 = fma(u_xlat10.w, u_xlat42, u_xlat28);
        u_xlat42 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat28 = fma(u_xlat28, u_xlat42, FGlobals._LightShadowData.x);
    } else {
        u_xlat28 = 1.0;
    }
    u_xlat15 = (-u_xlat28) + u_xlat15;
    u_xlat2.x = fma(u_xlat2.x, u_xlat15, u_xlat28);
    u_xlatb15 = 0.0<u_xlat4.z;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat28 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat28)).x;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat2.x = u_xlat2.x * u_xlat15;
    u_xlat5.w = u_xlat5.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyw);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat41), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat41) * u_xlat7.xyz;
    u_xlat41 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), u_xlat3.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat26 * u_xlat26;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat1.x;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat1.x = -abs(u_xlat39) + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat14;
    u_xlat13.x = fma(u_xlat13.x, u_xlat1.x, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat1.x = (-u_xlat26) + 1.0;
    u_xlat14 = fma(abs(u_xlat39), u_xlat1.x, u_xlat26);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat1.x;
    u_xlat39 = fma(u_xlat3.x, u_xlat14, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat26 = u_xlat26 * u_xlat26;
    u_xlat1.x = fma(u_xlat16, u_xlat26, (-u_xlat16));
    u_xlat1.x = fma(u_xlat1.x, u_xlat16, 1.0);
    u_xlat26 = u_xlat26 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat26 = u_xlat26 / u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat39;
    u_xlat26 = u_xlat26 * 3.14159274;
    u_xlat26 = max(u_xlat26, 9.99999975e-05);
    u_xlat13.y = sqrt(u_xlat26);
    u_xlat13.xy = u_xlat3.xx * u_xlat13.xy;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb39 = u_xlat39!=0.0;
    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
    u_xlat26 = u_xlat39 * u_xlat13.y;
    u_xlat1.xyz = u_xlat13.xxx * u_xlat2.xyz;
    u_xlat13.xyz = u_xlat2.xyz * float3(u_xlat26);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL SHADOWS_SCREEN _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (160 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 80
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    output.mtl_Position = u_xlat0;
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat1.xy));
    u_xlat5.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat1.xxx, u_xlat5.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD4.xy = input.TEXCOORD0.xy;
    output.TEXCOORD4.zw = float2(0.0, 0.0);
    u_xlat0.y = u_xlat0.y * VGlobals._ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * float3(0.5, 0.5, 0.5);
    output.TEXCOORD6.zw = u_xlat0.zw;
    output.TEXCOORD6.xy = u_xlat1.zz + u_xlat1.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 7
Set 2D Texture "_Normal1" to slot 6 sampler slot 8
Set 2D Texture "_Normal2" to slot 7 sampler slot 9
Set 2D Texture "_Normal3" to slot 8 sampler slot 10
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0

Constant Buffer "FGlobals" (400 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 272
  Vector4 _Splat0_ST at 288
  Vector4 _Splat1_ST at 304
  Vector4 _Splat2_ST at 320
  Vector4 _Splat3_ST at 336
  Float _NormalScale0 at 352
  Float _NormalScale1 at 356
  Float _NormalScale2 at 360
  Float _NormalScale3 at 364
  Float _Metallic0 at 368
  Float _Metallic1 at 372
  Float _Metallic2 at 376
  Float _Metallic3 at 380
  Float _Smoothness0 at 384
  Float _Smoothness1 at 388
  Float _Smoothness2 at 392
  Float _Smoothness3 at 396
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float3 u_xlat9;
    float u_xlat14;
    float u_xlat15;
    float u_xlat16;
    bool u_xlatb16;
    float2 u_xlat17;
    float2 u_xlat18;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat22 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat22 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat17.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat17.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat18.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat17.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat3.z = sqrt(u_xlat24);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat24 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat6.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat18.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat4.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat9.x = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = (-u_xlat9.x) + u_xlat16;
    u_xlat9.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat16, u_xlat9.x);
    u_xlat9.x = fma(u_xlat9.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat9.x = clamp(u_xlat9.x, 0.0f, 1.0f);
    u_xlatb16 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb16){
        u_xlatb16 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb16)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat23 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat23, u_xlat16);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat16 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat23 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat16 = (-u_xlat23) + u_xlat16;
    u_xlat9.x = fma(u_xlat9.x, u_xlat16, u_xlat23);
    u_xlat3.w = u_xlat3.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyw);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = rsqrt(u_xlat16);
    u_xlat3.xyz = float3(u_xlat16) * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat9.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, u_xlat2.xx);
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat14 = u_xlat14 * u_xlat15;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat15 = -abs(u_xlat21) + 1.0;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat15 = u_xlat15 * u_xlat3.x;
    u_xlat7.x = fma(u_xlat7.x, u_xlat15, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat2.x * u_xlat2.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat15 = (-u_xlat14) + 1.0;
    u_xlat2.x = fma(abs(u_xlat21), u_xlat15, u_xlat14);
    u_xlat15 = fma(u_xlat1.x, u_xlat15, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = fma(u_xlat1.x, u_xlat2.x, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat15 = fma(u_xlat8, u_xlat14, (-u_xlat8));
    u_xlat8 = fma(u_xlat15, u_xlat8, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat8 = fma(u_xlat8, u_xlat8, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat8;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat1.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat9.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE SHADOWS_SCREEN _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (224 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 96
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 80
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float3 u_xlat7;
    float u_xlat17;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.mtl_Position = u_xlat1;
    u_xlat2.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat2.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat2.xy));
    u_xlat7.xyz = u_xlat2.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat2.xxx, u_xlat7.xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = rsqrt(u_xlat17);
    u_xlat2.xyz = float3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat3.xyz);
    u_xlat17 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17 = rsqrt(u_xlat17);
    u_xlat3.xyz = float3(u_xlat17) * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = fma(u_xlat3.zxy, u_xlat2.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat3.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat3.z;
    output.TEXCOORD2.z = u_xlat3.x;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD4.xy = input.TEXCOORD0.xy;
    output.TEXCOORD4.zw = float2(0.0, 0.0);
    u_xlat2.xy = u_xlat0.yy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, u_xlat0.xx, u_xlat2.xy);
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, u_xlat0.zz, u_xlat0.xy);
    output.TEXCOORD5.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy, u_xlat0.ww, u_xlat0.xy);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD6.zw = u_xlat1.zw;
    output.TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0

Constant Buffer "FGlobals" (464 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Matrix4x4 unity_WorldToLight at 272
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 336
  Vector4 _Splat0_ST at 352
  Vector4 _Splat1_ST at 368
  Vector4 _Splat2_ST at 384
  Vector4 _Splat3_ST at 400
  Float _NormalScale0 at 416
  Float _NormalScale1 at 420
  Float _NormalScale2 at 424
  Float _NormalScale3 at 428
  Float _Metallic0 at 432
  Float _Metallic1 at 436
  Float _Metallic2 at 440
  Float _Metallic3 at 444
  Float _Smoothness0 at 448
  Float _Smoothness1 at 452
  Float _Smoothness2 at 456
  Float _Smoothness3 at 460
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    bool u_xlatb4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float3 u_xlat9;
    float3 u_xlat11;
    float u_xlat14;
    float u_xlat15;
    float u_xlat16;
    float2 u_xlat17;
    float2 u_xlat18;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat22 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat22 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat17.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat17.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat18.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat17.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat3.z = sqrt(u_xlat24);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat24 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat6.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat18.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat4.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat9.xy = input.TEXCOORD3.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat9.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD3.xx, u_xlat9.xy);
    u_xlat9.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD3.zz, u_xlat9.xy);
    u_xlat9.xy = u_xlat9.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat23 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat23) + u_xlat4.x;
    u_xlat23 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat4.x, u_xlat23);
    u_xlat23 = fma(u_xlat23, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat23 = clamp(u_xlat23, 0.0f, 1.0f);
    u_xlatb4 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb4){
        u_xlatb4 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat11.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat11.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat11.xyz);
        u_xlat11.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat11.xyz);
        u_xlat11.xyz = u_xlat11.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat11.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat11.x = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat6.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat11.x, u_xlat6.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat4.x = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat11.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat11.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat11.xy).x;
    u_xlat4.x = (-u_xlat11.x) + u_xlat4.x;
    u_xlat23 = fma(u_xlat23, u_xlat4.x, u_xlat11.x);
    u_xlat9.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat9.xy).w;
    u_xlat9.x = u_xlat23 * u_xlat9.x;
    u_xlat3.w = u_xlat3.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyw);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = rsqrt(u_xlat16);
    u_xlat3.xyz = float3(u_xlat16) * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat9.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, u_xlat2.xx);
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat14 = u_xlat14 * u_xlat15;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat15 = -abs(u_xlat21) + 1.0;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat15 = u_xlat15 * u_xlat3.x;
    u_xlat7.x = fma(u_xlat7.x, u_xlat15, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat2.x * u_xlat2.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat15 = (-u_xlat14) + 1.0;
    u_xlat2.x = fma(abs(u_xlat21), u_xlat15, u_xlat14);
    u_xlat15 = fma(u_xlat1.x, u_xlat15, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = fma(u_xlat1.x, u_xlat2.x, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat15 = fma(u_xlat8, u_xlat14, (-u_xlat8));
    u_xlat8 = fma(u_xlat15, u_xlat8, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat8 = fma(u_xlat8, u_xlat8, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat8;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat1.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat9.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT SHADOWS_CUBE _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat1.xy));
    u_xlat5.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat1.xxx, u_xlat5.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD4.xy = input.TEXCOORD0.xy;
    output.TEXCOORD4.zw = float2(0.0, 0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 11 sampler slot 1

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    bool u_xlatb11;
    float u_xlat12;
    float u_xlat18;
    float u_xlat20;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat3.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat28 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat29);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat24.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat23.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat24.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat8.z = sqrt(u_xlat29);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat23.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat5.z = sqrt(u_xlat29);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat8.z = sqrt(u_xlat29);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat24.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat29 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat6.z = sqrt(u_xlat29);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat29 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat11 = (-u_xlat2.x) + u_xlat11;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat11, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb11 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb11){
        u_xlatb11 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb11)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat11 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat20, u_xlat11);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat11 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat20 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat20 = max(abs(u_xlat6.z), u_xlat20);
    u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.z);
    u_xlat20 = max(u_xlat20, 9.99999975e-06);
    u_xlat20 = u_xlat20 * FGlobals._LightProjectionParams.w;
    u_xlat20 = FGlobals._LightProjectionParams.y / u_xlat20;
    u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.x);
    u_xlat20 = (-u_xlat20) + 1.0;
    u_xlat20 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat20), level(0.0));
    u_xlat30 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat20 = fma(u_xlat20, u_xlat30, FGlobals._LightShadowData.x);
    u_xlat11 = (-u_xlat20) + u_xlat11;
    u_xlat2.x = fma(u_xlat2.x, u_xlat11, u_xlat20);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat11)).x;
    u_xlat2.x = u_xlat2.x * u_xlat11;
    u_xlat5.w = u_xlat5.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyw);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = rsqrt(u_xlat11);
    u_xlat4.xyz = float3(u_xlat11) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat29), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat7.xyz;
    u_xlat29 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat3.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat3.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat12, u_xlat18, (-u_xlat12));
    u_xlat1.x = fma(u_xlat1.x, u_xlat12, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat3.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat9.xyz = u_xlat2.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT SHADOWS_CUBE SHADOWS_SOFT _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat1.xy));
    u_xlat5.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat1.xxx, u_xlat5.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD4.xy = input.TEXCOORD0.xy;
    output.TEXCOORD4.zw = float2(0.0, 0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 11 sampler slot 1

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb22 = u_xlat2.x<0.99000001;
    if(u_xlatb22){
        u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat22 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat22 = max(abs(u_xlat6.z), u_xlat22);
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
        u_xlat22 = max(u_xlat22, 9.99999975e-06);
        u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
        u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat8.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat22), level(0.0));
        u_xlat22 = dot(u_xlat8, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat12)).x;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat5.w = u_xlat5.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyw);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT_COOKIE SHADOWS_CUBE _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat1.xy));
    u_xlat5.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat1.xxx, u_xlat5.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD4.xy = input.TEXCOORD0.xy;
    output.TEXCOORD4.zw = float2(0.0, 0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set 2D Texture "_LightTextureB0" to slot 9 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 12 sampler slot 1

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(9) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    bool u_xlatb11;
    float u_xlat12;
    float u_xlat18;
    float u_xlat20;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat3.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat28 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat29);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat24.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat23.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat24.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat8.z = sqrt(u_xlat29);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat23.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat5.z = sqrt(u_xlat29);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat8.z = sqrt(u_xlat29);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat24.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat29 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat6.z = sqrt(u_xlat29);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat29 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat11 = (-u_xlat2.x) + u_xlat11;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat11, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb11 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb11){
        u_xlatb11 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb11)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat11 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat20, u_xlat11);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat11 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat20 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat20 = max(abs(u_xlat6.z), u_xlat20);
    u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.z);
    u_xlat20 = max(u_xlat20, 9.99999975e-06);
    u_xlat20 = u_xlat20 * FGlobals._LightProjectionParams.w;
    u_xlat20 = FGlobals._LightProjectionParams.y / u_xlat20;
    u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.x);
    u_xlat20 = (-u_xlat20) + 1.0;
    u_xlat20 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat20), level(0.0));
    u_xlat30 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat20 = fma(u_xlat20, u_xlat30, FGlobals._LightShadowData.x);
    u_xlat11 = (-u_xlat20) + u_xlat11;
    u_xlat2.x = fma(u_xlat2.x, u_xlat11, u_xlat20);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat11)).x;
    u_xlat20 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat11 = u_xlat20 * u_xlat11;
    u_xlat2.x = u_xlat2.x * u_xlat11;
    u_xlat5.w = u_xlat5.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyw);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = rsqrt(u_xlat11);
    u_xlat4.xyz = float3(u_xlat11) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat29), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat7.xyz;
    u_xlat29 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat3.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat3.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat12, u_xlat18, (-u_xlat12));
    u_xlat1.x = fma(u_xlat1.x, u_xlat12, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat3.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat9.xyz = u_xlat2.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat13;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    u_xlat1.xy = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat1.xy = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat1.xy));
    u_xlat5.xyz = u_xlat1.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat1.xxx, u_xlat5.xyz);
    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat1.xyz = float3(u_xlat13) * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat0);
    output.TEXCOORD4.xy = input.TEXCOORD0.xy;
    output.TEXCOORD4.zw = float2(0.0, 0.0);
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set 2D Texture "_LightTextureB0" to slot 9 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 12 sampler slot 1

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(9) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb22 = u_xlat2.x<0.99000001;
    if(u_xlatb22){
        u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat22 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat22 = max(abs(u_xlat6.z), u_xlat22);
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
        u_xlat22 = max(u_xlat22, 9.99999975e-06);
        u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
        u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat8.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat22), level(0.0));
        u_xlat22 = dot(u_xlat8, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat12)).x;
    u_xlat22 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat12 = u_xlat22 * u_xlat12;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat5.w = u_xlat5.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyw);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 144
  Vector4 _TerrainHeightmapScale at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float2 u_xlat3;
    float u_xlat9;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat3.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat3.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat3.xy);
    u_xlat9 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat3.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat3.xy;
    u_xlat3.x = u_xlat9 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat3.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat3.xy = u_xlat3.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat3.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat9 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = fma(u_xlat0.zxy, u_xlat1.yzx, (-u_xlat2.xyz));
    u_xlat2.xyz = u_xlat2.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat2.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat0.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat0.x;
    output.TEXCOORD1.y = u_xlat2.y;
    output.TEXCOORD2.y = u_xlat2.z;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: POINT _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 7
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (7) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float u_xlat12;
    float u_xlat14;
    float2 u_xlat18;
    float2 u_xlat19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat22 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb22 = u_xlat22==0.0;
    if(((int(u_xlatb22) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD2.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat18.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat19.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat23 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat24 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat12 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat24, u_xlat12);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat24 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat24 * u_xlat3.x;
    u_xlat3.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat24 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat5.xyz = float3(u_xlat24) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat23), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat23 = fma((-u_xlat23), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = fma(u_xlat7.x, u_xlat1.x, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat1.x = (-u_xlat14) + 1.0;
    u_xlat8 = fma(abs(u_xlat21), u_xlat1.x, u_xlat14);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = fma(u_xlat2.x, u_xlat8, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = fma(u_xlat9, u_xlat14, (-u_xlat9));
    u_xlat1.x = fma(u_xlat1.x, u_xlat9, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat4.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 6
Set 2D Texture "_Control" to slot 1
Set 2D Texture "_Splat0" to slot 2
Set 2D Texture "_Splat1" to slot 3
Set 2D Texture "_Splat2" to slot 4
Set 2D Texture "_Splat3" to slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0

Constant Buffer "FGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 176
  Vector4 _Splat0_ST at 192
  Vector4 _Splat1_ST at 208
  Vector4 _Splat2_ST at 224
  Vector4 _Splat3_ST at 240
  Float _Metallic0 at 256
  Float _Metallic1 at 260
  Float _Metallic2 at 264
  Float _Metallic3 at 268
  Float _Smoothness0 at 272
  Float _Smoothness1 at 276
  Float _Smoothness2 at 280
  Float _Smoothness3 at 284
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (6) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    bool u_xlatb8;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    bool u_xlatb19;
    float u_xlat21;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat19 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb19 = u_xlat19==0.0;
    if(((int(u_xlatb19) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb8 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb8){
        u_xlatb8 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat8.xyz = (bool(u_xlatb8)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat8.xyz = u_xlat8.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat8.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat8.x = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat14 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat14, u_xlat8.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat8.x = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * input.TEXCOORD0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SPOT
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD5 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: SPOT _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 8
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 7 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    bool u_xlatb5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float3 u_xlat12;
    bool u_xlatb12;
    float u_xlat14;
    float2 u_xlat18;
    float2 u_xlat19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat23;
    float u_xlat24;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat22 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb22 = u_xlat22==0.0;
    if(((int(u_xlatb22) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD2.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat18.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat19.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat23 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3 = input.TEXCOORD1.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD1.xxxx, u_xlat3);
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD1.zzzz, u_xlat3);
    u_xlat3 = u_xlat3 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb5 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb5 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat12.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat12.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat12.xyz);
        u_xlat12.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat12.xyz);
        u_xlat12.xyz = u_xlat12.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat12.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat6.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat12.x, u_xlat6.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat5.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlatb12 = 0.0<u_xlat3.z;
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat19.xy = u_xlat3.xy / u_xlat3.ww;
    u_xlat19.xy = u_xlat19.xy + float2(0.5, 0.5);
    u_xlat24 = _LightTexture0.sample(sampler_LightTexture0, u_xlat19.xy).w;
    u_xlat24 = u_xlat24 * u_xlat12.x;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat3.x * u_xlat24;
    u_xlat3.x = u_xlat5.x * u_xlat3.x;
    u_xlat3.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat24 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat5.xyz = float3(u_xlat24) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat23), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat23 = fma((-u_xlat23), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = fma(u_xlat7.x, u_xlat1.x, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat1.x = (-u_xlat14) + 1.0;
    u_xlat8 = fma(abs(u_xlat21), u_xlat1.x, u_xlat14);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = fma(u_xlat2.x, u_xlat8, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = fma(u_xlat9, u_xlat14, (-u_xlat9));
    u_xlat1.x = fma(u_xlat1.x, u_xlat9, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat4.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: POINT_COOKIE _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 8
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 7 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(6) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float u_xlat12;
    float u_xlat14;
    float2 u_xlat18;
    float2 u_xlat19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat22 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb22 = u_xlat22==0.0;
    if(((int(u_xlatb22) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD2.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat18.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat19.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat23 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD1.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD1.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : input.TEXCOORD1.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat24 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat12 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat24, u_xlat12);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat24 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat5.xx).x;
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat3.x = u_xlat3.x * u_xlat5.x;
    u_xlat3.x = u_xlat24 * u_xlat3.x;
    u_xlat3.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat24 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat5.xyz = float3(u_xlat24) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat23), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat23 = fma((-u_xlat23), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat5.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat5.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = fma(u_xlat7.x, u_xlat1.x, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat1.x = (-u_xlat14) + 1.0;
    u_xlat8 = fma(abs(u_xlat21), u_xlat1.x, u_xlat14);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = fma(u_xlat2.x, u_xlat8, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = fma(u_xlat9, u_xlat14, (-u_xlat9));
    u_xlat1.x = fma(u_xlat1.x, u_xlat9, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat7.xyz = u_xlat3.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat4.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE INSTANCING_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.yy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, u_xlat0.xx, u_xlat1.xy);
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, u_xlat0.zz, u_xlat0.xy);
    output.TEXCOORD5.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy, u_xlat0.ww, u_xlat0.xy);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 7
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (7) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat10;
    float u_xlat12;
    float u_xlat13;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    bool u_xlatb19;
    float u_xlat20;
    bool u_xlatb20;
    float u_xlat21;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat19 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb19 = u_xlat19==0.0;
    if(((int(u_xlatb19) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat8.xy = input.TEXCOORD1.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD1.xx, u_xlat8.xy);
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD1.zz, u_xlat8.xy);
    u_xlat8.xy = u_xlat8.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb20 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb20){
        u_xlatb20 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb20)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat20 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat10 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat20, u_xlat10);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat20 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlat8.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat8.xy).w;
    u_xlat8.x = u_xlat20 * u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * input.TEXCOORD0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH SPOT
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD5 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: SHADOWS_DEPTH SPOT _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 9
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 7 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 1

Constant Buffer "FGlobals" (704 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 528
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _Control_TexelSize at 592
  Vector4 _Splat0_ST at 608
  Vector4 _Splat1_ST at 624
  Vector4 _Splat2_ST at 640
  Vector4 _Splat3_ST at 656
  Float _Metallic0 at 672
  Float _Metallic1 at 676
  Float _Metallic2 at 680
  Float _Metallic3 at 684
  Float _Smoothness0 at 688
  Float _Smoothness1 at 692
  Float _Smoothness2 at 696
  Float _Smoothness3 at 700
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    bool u_xlatb25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat25 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb25 = u_xlat25==0.0;
    if(((int(u_xlatb25) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat21.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat22.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat26 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD1.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD1.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD1.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat10, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb10)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat18, u_xlat10);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat10 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat6 = input.TEXCOORD1.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD1.xxxx, u_xlat6);
    u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD1.zzzz, u_xlat6);
    u_xlat6 = u_xlat6 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
    u_xlat18 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat27 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat18 = fma(u_xlat18, u_xlat27, FGlobals._LightShadowData.x);
    u_xlat10 = (-u_xlat18) + u_xlat10;
    u_xlat2.x = fma(u_xlat2.x, u_xlat10, u_xlat18);
    u_xlatb10 = 0.0<u_xlat4.z;
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat18)).x;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat27 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat26), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat3.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat3.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat11, u_xlat16, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH SHADOWS_SOFT SPOT
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD5 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 80
  Vector4 _TerrainHeightmapRecipSize at 160
  Vector4 _TerrainHeightmapScale at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat12 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat2.xyz = float3(u_xlat12) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat0.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat0.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat0.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD6.zw = u_xlat1.zw;
    output.TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE INSTANCING_ON SHADOWS_SCREEN
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (256 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 96
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 80
  Vector4 _TerrainHeightmapRecipSize at 224
  Vector4 _TerrainHeightmapScale at 240
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float2 u_xlat5;
    float u_xlat15;
    float u_xlat17;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat5.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat5.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat5.xy);
    u_xlat15 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat5.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat5.xy;
    u_xlat5.x = u_xlat15 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat5.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat5.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat5.xy = u_xlat5.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat5.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    u_xlat2.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat17 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat17 = rsqrt(u_xlat17);
    u_xlat3.xyz = float3(u_xlat17) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.x = u_xlat3.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat3.x;
    output.TEXCOORD2.x = u_xlat3.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat2.xy = u_xlat0.yy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, u_xlat0.xx, u_xlat2.xy);
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, u_xlat0.zz, u_xlat0.xy);
    output.TEXCOORD5.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy, u_xlat0.ww, u_xlat0.xy);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD6.zw = u_xlat1.zw;
    output.TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: SHADOWS_DEPTH SHADOWS_SOFT SPOT _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 9
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 7 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 1

Constant Buffer "FGlobals" (720 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 544
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _ShadowMapTexture_TexelSize at 528
  Vector4 _Control_TexelSize at 608
  Vector4 _Splat0_ST at 624
  Vector4 _Splat1_ST at 640
  Vector4 _Splat2_ST at 656
  Vector4 _Splat3_ST at 672
  Float _Metallic0 at 688
  Float _Metallic1 at 692
  Float _Metallic2 at 696
  Float _Metallic3 at 700
  Float _Smoothness0 at 704
  Float _Smoothness1 at 708
  Float _Smoothness2 at 712
  Float _Smoothness3 at 716
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _ShadowMapTexture_TexelSize;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float3 u_xlat12;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb14;
    float u_xlat15;
    float u_xlat24;
    float u_xlat26;
    bool u_xlatb26;
    float2 u_xlat29;
    float2 u_xlat30;
    float2 u_xlat31;
    float u_xlat36;
    bool u_xlatb36;
    float u_xlat37;
    bool u_xlatb37;
    float u_xlat38;
    float u_xlat39;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat1.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat37 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat37 = rsqrt(u_xlat37);
    u_xlat3.xyz = float3(u_xlat37) * u_xlat2.xyz;
    u_xlat37 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb37 = u_xlat37==0.0;
    if(((int(u_xlatb37) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat37 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat38 = u_xlat37 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat38);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat29.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat30.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat29.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat30.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat38 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD1.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD1.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD1.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat14 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = (-u_xlat2.x) + u_xlat14;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat14, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb14 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb14 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb14)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat14 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat26 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat26, u_xlat14);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat14 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlatb26 = u_xlat2.x<0.99000001;
    if(u_xlatb26){
        u_xlat6 = input.TEXCOORD1.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD1.xxxx, u_xlat6);
        u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD1.zzzz, u_xlat6);
        u_xlat6 = u_xlat6 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
        u_xlat7.xy = fma(u_xlat6.xy, FGlobals._ShadowMapTexture_TexelSize.zw, float2(0.5, 0.5));
        u_xlat7.xy = floor(u_xlat7.xy);
        u_xlat6.xy = fma(u_xlat6.xy, FGlobals._ShadowMapTexture_TexelSize.zw, (-u_xlat7.xy));
        u_xlat8 = u_xlat6.xxyy + float4(0.5, 1.0, 0.5, 1.0);
        u_xlat9.xw = u_xlat8.xz * u_xlat8.xz;
        u_xlat31.xy = fma(u_xlat9.xw, float2(0.5, 0.5), (-u_xlat6.xy));
        u_xlat8.xz = (-u_xlat6.xy) + float2(1.0, 1.0);
        u_xlat10.xy = min(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat8.xz = fma((-u_xlat10.xy), u_xlat10.xy, u_xlat8.xz);
        u_xlat6.xy = max(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat6.xy = fma((-u_xlat6.xy), u_xlat6.xy, u_xlat8.yw);
        u_xlat10.x = u_xlat31.x;
        u_xlat10.y = u_xlat8.x;
        u_xlat10.z = u_xlat6.x;
        u_xlat10.w = u_xlat9.x;
        u_xlat10 = u_xlat10 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat9.x = u_xlat31.y;
        u_xlat9.y = u_xlat8.z;
        u_xlat9.z = u_xlat6.y;
        u_xlat8 = u_xlat9 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat9 = u_xlat10.ywyw + u_xlat10.xzxz;
        u_xlat11 = u_xlat8.yyww + u_xlat8.xxzz;
        u_xlat6.xy = u_xlat10.yw / u_xlat9.zw;
        u_xlat6.xy = u_xlat6.xy + float2(-1.5, 0.5);
        u_xlat31.xy = u_xlat8.yw / u_xlat11.yw;
        u_xlat31.xy = u_xlat31.xy + float2(-1.5, 0.5);
        u_xlat8.xy = u_xlat6.xy * FGlobals._ShadowMapTexture_TexelSize.xx;
        u_xlat8.zw = u_xlat31.xy * FGlobals._ShadowMapTexture_TexelSize.yy;
        u_xlat9 = u_xlat9 * u_xlat11;
        u_xlat10 = fma(u_xlat7.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat8.xzyz);
        u_xlat26 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat10.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat39 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat10.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat39 = u_xlat39 * u_xlat9.y;
        u_xlat26 = fma(u_xlat9.x, u_xlat26, u_xlat39);
        u_xlat7 = fma(u_xlat7.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat8.xwyw);
        u_xlat39 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat26 = fma(u_xlat9.z, u_xlat39, u_xlat26);
        u_xlat39 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat26 = fma(u_xlat9.w, u_xlat39, u_xlat26);
        u_xlat39 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat26 = fma(u_xlat26, u_xlat39, FGlobals._LightShadowData.x);
    } else {
        u_xlat26 = 1.0;
    }
    u_xlat14 = (-u_xlat26) + u_xlat14;
    u_xlat2.x = fma(u_xlat2.x, u_xlat14, u_xlat26);
    u_xlatb14 = 0.0<u_xlat4.z;
    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat26 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat14 = u_xlat26 * u_xlat14;
    u_xlat26 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat26 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat26)).x;
    u_xlat14 = u_xlat26 * u_xlat14;
    u_xlat2.x = u_xlat2.x * u_xlat14;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat39 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat4.xyz = float3(u_xlat39) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat38), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat38 = fma((-u_xlat38), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat38) * u_xlat5.xyz;
    u_xlat38 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat36), u_xlat3.xyz);
    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat36 = max(u_xlat36, 0.00100000005);
    u_xlat36 = rsqrt(u_xlat36);
    u_xlat0.xyz = float3(u_xlat36) * u_xlat0.xyz;
    u_xlat36 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat12.x = dot(u_xlat12.xx, float2(u_xlat38));
    u_xlat12.x = u_xlat12.x + -0.5;
    u_xlat24 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat24 * u_xlat24;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat24 = u_xlat24 * u_xlat1.x;
    u_xlat24 = fma(u_xlat12.x, u_xlat24, 1.0);
    u_xlat1.x = -abs(u_xlat36) + 1.0;
    u_xlat13 = u_xlat1.x * u_xlat1.x;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat1.x = u_xlat1.x * u_xlat13;
    u_xlat12.x = fma(u_xlat12.x, u_xlat1.x, 1.0);
    u_xlat12.x = u_xlat12.x * u_xlat24;
    u_xlat24 = u_xlat38 * u_xlat38;
    u_xlat24 = max(u_xlat24, 0.00200000009);
    u_xlat1.x = (-u_xlat24) + 1.0;
    u_xlat13 = fma(abs(u_xlat36), u_xlat1.x, u_xlat24);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat24);
    u_xlat36 = abs(u_xlat36) * u_xlat1.x;
    u_xlat36 = fma(u_xlat3.x, u_xlat13, u_xlat36);
    u_xlat36 = u_xlat36 + 9.99999975e-06;
    u_xlat36 = 0.5 / u_xlat36;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat1.x = fma(u_xlat15, u_xlat24, (-u_xlat15));
    u_xlat1.x = fma(u_xlat1.x, u_xlat15, 1.0);
    u_xlat24 = u_xlat24 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat24 = u_xlat24 / u_xlat1.x;
    u_xlat24 = u_xlat24 * u_xlat36;
    u_xlat24 = u_xlat24 * 3.14159274;
    u_xlat24 = max(u_xlat24, 9.99999975e-05);
    u_xlat12.y = sqrt(u_xlat24);
    u_xlat12.xy = u_xlat3.xx * u_xlat12.xy;
    u_xlat36 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb36 = u_xlat36!=0.0;
    u_xlat36 = u_xlatb36 ? 1.0 : float(0.0);
    u_xlat24 = u_xlat36 * u_xlat12.y;
    u_xlat1.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.xyz = u_xlat2.xyz * float3(u_xlat24);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat12.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat37) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL SHADOWS_SCREEN _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 7
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_ShadowMapTexture" to slot 6 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0

Constant Buffer "FGlobals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 272
  Vector4 _Splat0_ST at 288
  Vector4 _Splat1_ST at 304
  Vector4 _Splat2_ST at 320
  Vector4 _Splat3_ST at 336
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (7) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb14;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    bool u_xlatb19;
    float u_xlat20;
    float u_xlat21;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat19 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb19 = u_xlat19==0.0;
    if(((int(u_xlatb19) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat8.x = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat14 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = (-u_xlat8.x) + u_xlat14;
    u_xlat8.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat14, u_xlat8.x);
    u_xlat8.x = fma(u_xlat8.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlatb14 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb14 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb14)) ? u_xlat4.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat14 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat20, u_xlat14);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat14 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD4.xy / input.TEXCOORD4.ww;
    u_xlat20 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat14 = (-u_xlat20) + u_xlat14;
    u_xlat8.x = fma(u_xlat8.x, u_xlat14, u_xlat20);
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * input.TEXCOORD0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE SHADOWS_SCREEN _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 8
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 6 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 7 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0

Constant Buffer "FGlobals" (448 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Matrix4x4 unity_WorldToLight at 272
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 336
  Vector4 _Splat0_ST at 352
  Vector4 _Splat1_ST at 368
  Vector4 _Splat2_ST at 384
  Vector4 _Splat3_ST at 400
  Float _Metallic0 at 416
  Float _Metallic1 at 420
  Float _Metallic2 at 424
  Float _Metallic3 at 428
  Float _Smoothness0 at 432
  Float _Smoothness1 at 436
  Float _Smoothness2 at 440
  Float _Smoothness3 at 444
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(6) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    bool u_xlatb4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    float u_xlat12;
    float u_xlat13;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    bool u_xlatb19;
    float u_xlat20;
    float u_xlat21;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat19 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb19 = u_xlat19==0.0;
    if(((int(u_xlatb19) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat8.xy = input.TEXCOORD1.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD1.xx, u_xlat8.xy);
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD1.zz, u_xlat8.xy);
    u_xlat8.xy = u_xlat8.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat20 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat20) + u_xlat4.x;
    u_xlat20 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat4.x, u_xlat20);
    u_xlat20 = fma(u_xlat20, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlatb4 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb4){
        u_xlatb4 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat10.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat10.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat10.xyz);
        u_xlat10.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat10.xyz);
        u_xlat10.xyz = u_xlat10.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat10.xyz : input.TEXCOORD1.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10.x = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat5.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat10.x, u_xlat5.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat4.x = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat10.xy = input.TEXCOORD4.xy / input.TEXCOORD4.ww;
    u_xlat10.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat10.xy).x;
    u_xlat4.x = (-u_xlat10.x) + u_xlat4.x;
    u_xlat20 = fma(u_xlat20, u_xlat4.x, u_xlat10.x);
    u_xlat8.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat8.xy).w;
    u_xlat8.x = u_xlat20 * u_xlat8.x;
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat4.x = rsqrt(u_xlat4.x);
    u_xlat4.xyz = u_xlat4.xxx * input.TEXCOORD0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT SHADOWS_CUBE
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: POINT SHADOWS_CUBE _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 8
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 8 sampler slot 1

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    bool u_xlatb25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat25 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb25 = u_xlat25==0.0;
    if(((int(u_xlatb25) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat21.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat22.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat26 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat10, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb10)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat18, u_xlat10);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat10 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat18 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat18 = max(abs(u_xlat6.z), u_xlat18);
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.z);
    u_xlat18 = max(u_xlat18, 9.99999975e-06);
    u_xlat18 = u_xlat18 * FGlobals._LightProjectionParams.w;
    u_xlat18 = FGlobals._LightProjectionParams.y / u_xlat18;
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.x);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat18), level(0.0));
    u_xlat27 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat18 = fma(u_xlat18, u_xlat27, FGlobals._LightShadowData.x);
    u_xlat10 = (-u_xlat18) + u_xlat10;
    u_xlat2.x = fma(u_xlat2.x, u_xlat10, u_xlat18);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat10)).x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat27 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat26), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat3.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat3.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat11, u_xlat16, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT SHADOWS_CUBE SHADOWS_SOFT
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE SHADOWS_CUBE
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: POINT SHADOWS_CUBE SHADOWS_SOFT _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 8
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 8 sampler slot 1

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    bool u_xlatb11;
    float u_xlat12;
    float u_xlat18;
    float u_xlat20;
    bool u_xlatb20;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    bool u_xlatb28;
    float u_xlat29;
    float u_xlat30;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat3.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat28 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb28 = u_xlat28==0.0;
    if(((int(u_xlatb28) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat28 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat29);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat24.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat23.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat24.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat29 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat11 = (-u_xlat2.x) + u_xlat11;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat11, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb11 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb11){
        u_xlatb11 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb11)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat11 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat20, u_xlat11);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat11 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlatb20 = u_xlat2.x<0.99000001;
    if(u_xlatb20){
        u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat20 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat20 = max(abs(u_xlat6.z), u_xlat20);
        u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.z);
        u_xlat20 = max(u_xlat20, 9.99999975e-06);
        u_xlat20 = u_xlat20 * FGlobals._LightProjectionParams.w;
        u_xlat20 = FGlobals._LightProjectionParams.y / u_xlat20;
        u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.x);
        u_xlat20 = (-u_xlat20) + 1.0;
        u_xlat7.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat7.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xyz, saturate(u_xlat20), level(0.0));
        u_xlat8.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat7.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat20), level(0.0));
        u_xlat8.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat7.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat20), level(0.0));
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat7.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat20), level(0.0));
        u_xlat20 = dot(u_xlat7, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat30 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat20 = fma(u_xlat20, u_xlat30, FGlobals._LightShadowData.x);
    } else {
        u_xlat20 = 1.0;
    }
    u_xlat11 = (-u_xlat20) + u_xlat11;
    u_xlat2.x = fma(u_xlat2.x, u_xlat11, u_xlat20);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat11)).x;
    u_xlat2.x = u_xlat2.x * u_xlat11;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat30 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat4.xyz = float3(u_xlat30) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat29), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat3.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat3.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat12, u_xlat18, (-u_xlat12));
    u_xlat1.x = fma(u_xlat1.x, u_xlat12, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat3.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat9.xyz = u_xlat2.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT_COOKIE SHADOWS_CUBE _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 9
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 7 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 9 sampler slot 1

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(6) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    bool u_xlatb25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat25 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb25 = u_xlat25==0.0;
    if(((int(u_xlatb25) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat21.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat22.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat26 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat10, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb10)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat18, u_xlat10);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat10 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat18 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat18 = max(abs(u_xlat6.z), u_xlat18);
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.z);
    u_xlat18 = max(u_xlat18, 9.99999975e-06);
    u_xlat18 = u_xlat18 * FGlobals._LightProjectionParams.w;
    u_xlat18 = FGlobals._LightProjectionParams.y / u_xlat18;
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.x);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat18), level(0.0));
    u_xlat27 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat18 = fma(u_xlat18, u_xlat27, FGlobals._LightShadowData.x);
    u_xlat10 = (-u_xlat18) + u_xlat10;
    u_xlat2.x = fma(u_xlat2.x, u_xlat10, u_xlat18);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat10)).x;
    u_xlat18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat27 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat26), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat3.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat3.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat11, u_xlat16, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 144
  Vector4 _TerrainHeightmapScale at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float2 u_xlat3;
    float u_xlat9;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat3.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat3.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat3.xy);
    u_xlat9 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat3.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat3.xy;
    u_xlat3.x = u_xlat9 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat3.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat3.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat3.xy = u_xlat3.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat3.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat9 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat1.xyz = float3(u_xlat9) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat2.xyz = fma(u_xlat0.zxy, u_xlat1.yzx, (-u_xlat2.xyz));
    u_xlat2.xyz = u_xlat2.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat2.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat0.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat0.x;
    output.TEXCOORD1.y = u_xlat2.y;
    output.TEXCOORD2.y = u_xlat2.z;
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SPOT _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD5 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE INSTANCING_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xy = u_xlat0.yy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, u_xlat0.xx, u_xlat1.xy);
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, u_xlat0.zz, u_xlat0.xy);
    output.TEXCOORD5.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy, u_xlat0.ww, u_xlat0.xy);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH SPOT _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD5 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH SHADOWS_SOFT SPOT _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD5 = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 80
  Vector4 _TerrainHeightmapRecipSize at 160
  Vector4 _TerrainHeightmapScale at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat12 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat2.xyz = float3(u_xlat12) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat0.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat0.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat0.z;
    output.TEXCOORD2.z = u_xlat0.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD6.zw = u_xlat1.zw;
    output.TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE INSTANCING_ON SHADOWS_SCREEN _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (256 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 16
  Matrix4x4 unity_MatrixVP at 96
  Matrix4x4 unity_WorldToLight at 160
  Vector4 _ProjectionParams at 0
  Vector4 unity_WorldTransformParams at 80
  Vector4 _TerrainHeightmapRecipSize at 224
  Vector4 _TerrainHeightmapScale at 240
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _ProjectionParams;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float2 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat4;
    float2 u_xlat5;
    float u_xlat15;
    float u_xlat17;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat5.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat5.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat5.xy);
    u_xlat15 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat5.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat5.xy;
    u_xlat5.x = u_xlat15 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat5.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat5.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat5.xy = u_xlat5.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat5.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.mtl_Position = u_xlat1;
    u_xlat2.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat2.x = rsqrt(u_xlat2.x);
    u_xlat2.xyz = u_xlat2.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat17 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat17 = rsqrt(u_xlat17);
    u_xlat3.xyz = float3(u_xlat17) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
    u_xlat4.xyz = u_xlat4.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat4.x;
    output.TEXCOORD0.x = u_xlat3.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat3.x;
    output.TEXCOORD2.x = u_xlat3.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.y = u_xlat4.y;
    output.TEXCOORD2.y = u_xlat4.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat2.xy = u_xlat0.yy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, u_xlat0.xx, u_xlat2.xy);
    u_xlat0.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, u_xlat0.zz, u_xlat0.xy);
    output.TEXCOORD5.xy = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy, u_xlat0.ww, u_xlat0.xy);
    u_xlat0.x = u_xlat1.y * VGlobals._ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * float2(0.5, 0.5);
    output.TEXCOORD6.zw = u_xlat1.zw;
    output.TEXCOORD6.xy = u_xlat0.zz + u_xlat0.xw;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT SHADOWS_CUBE _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT SHADOWS_CUBE SHADOWS_SOFT _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE SHADOWS_CUBE _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Matrix4x4 unity_WorldToLight at 144
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    float u_xlat13;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD4.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD4.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat13 = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat13 = rsqrt(u_xlat13);
    u_xlat2.xyz = float3(u_xlat13) * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yyy * VGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD5.xyz = fma(VGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz, u_xlat0.www, u_xlat0.xyz);
    output.TEXCOORD6 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 9
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 7 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 9 sampler slot 1

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(6) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    bool u_xlatb11;
    float u_xlat12;
    float u_xlat18;
    float u_xlat20;
    bool u_xlatb20;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    bool u_xlatb28;
    float u_xlat29;
    float u_xlat30;
    u_xlat0.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD1.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat3.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat28 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb28 = u_xlat28==0.0;
    if(((int(u_xlatb28) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD2.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat28 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat29);
    u_xlat5.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat24.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat23.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat24.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat29 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD1.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD1.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat11 = (-u_xlat2.x) + u_xlat11;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat11, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb11 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb11){
        u_xlatb11 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb11)) ? u_xlat6.xyz : input.TEXCOORD1.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat11 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat20, u_xlat11);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat11 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlatb20 = u_xlat2.x<0.99000001;
    if(u_xlatb20){
        u_xlat6.xyz = input.TEXCOORD1.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat20 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat20 = max(abs(u_xlat6.z), u_xlat20);
        u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.z);
        u_xlat20 = max(u_xlat20, 9.99999975e-06);
        u_xlat20 = u_xlat20 * FGlobals._LightProjectionParams.w;
        u_xlat20 = FGlobals._LightProjectionParams.y / u_xlat20;
        u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.x);
        u_xlat20 = (-u_xlat20) + 1.0;
        u_xlat7.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat7.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xyz, saturate(u_xlat20), level(0.0));
        u_xlat8.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat7.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat20), level(0.0));
        u_xlat8.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat7.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat20), level(0.0));
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat7.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat20), level(0.0));
        u_xlat20 = dot(u_xlat7, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat30 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat20 = fma(u_xlat20, u_xlat30, FGlobals._LightShadowData.x);
    } else {
        u_xlat20 = 1.0;
    }
    u_xlat11 = (-u_xlat20) + u_xlat11;
    u_xlat2.x = fma(u_xlat2.x, u_xlat11, u_xlat20);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat11)).x;
    u_xlat20 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat11 = u_xlat20 * u_xlat11;
    u_xlat2.x = u_xlat2.x * u_xlat11;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat30 = dot(input.TEXCOORD0.xyz, input.TEXCOORD0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat4.xyz = float3(u_xlat30) * input.TEXCOORD0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat29), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat29) * u_xlat5.xyz;
    u_xlat29 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat3.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat3.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat12, u_xlat18, (-u_xlat12));
    u_xlat1.x = fma(u_xlat1.x, u_xlat12, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat3.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat9.xyz = u_xlat2.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 11
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_Normal0" to slot 6 sampler slot 7
Set 2D Texture "_Normal1" to slot 7 sampler slot 8
Set 2D Texture "_Normal2" to slot 8 sampler slot 9
Set 2D Texture "_Normal3" to slot 9 sampler slot 10
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (11) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float3 u_xlat11;
    float u_xlat13;
    float u_xlat16;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    bool u_xlatb25;
    float u_xlat26;
    float u_xlat27;
    bool u_xlatb27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat2.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat25 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb25 = u_xlat25==0.0;
    if(((int(u_xlatb25) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat25 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat26);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat20.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat21.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat26 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat7.z = sqrt(u_xlat26);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat4.z = sqrt(u_xlat26);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat26 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat7.z = sqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat21.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat5.z = sqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat26 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb27 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb27){
        u_xlatb27 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb27)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat27 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat13 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat27, u_xlat13);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat27 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat27 = clamp(u_xlat27, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat27 * u_xlat3.x;
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat11.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat11.x = rsqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat26), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz;
    u_xlat26 = (-u_xlat6.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat11.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat10 = dot(u_xlat11.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat2.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat10, u_xlat16, (-u_xlat10));
    u_xlat1.x = fma(u_xlat1.x, u_xlat10, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat2.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat4.xyz;
    u_xlat8.xyz = u_xlat4.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 10
Set 2D Texture "_Control" to slot 1
Set 2D Texture "_Splat0" to slot 2
Set 2D Texture "_Splat1" to slot 3
Set 2D Texture "_Splat2" to slot 4
Set 2D Texture "_Splat3" to slot 5
Set 2D Texture "_Normal0" to slot 6
Set 2D Texture "_Normal1" to slot 7
Set 2D Texture "_Normal2" to slot 8
Set 2D Texture "_Normal3" to slot 9
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0

Constant Buffer "FGlobals" (304 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 176
  Vector4 _Splat0_ST at 192
  Vector4 _Splat1_ST at 208
  Vector4 _Splat2_ST at 224
  Vector4 _Splat3_ST at 240
  Float _NormalScale0 at 256
  Float _NormalScale1 at 260
  Float _NormalScale2 at 264
  Float _NormalScale3 at 268
  Float _Metallic0 at 272
  Float _Metallic1 at 276
  Float _Metallic2 at 280
  Float _Metallic3 at 284
  Float _Smoothness0 at 288
  Float _Smoothness1 at 292
  Float _Smoothness2 at 296
  Float _Smoothness3 at 300
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler_Normal0 [[ sampler (6) ]],
    sampler sampler_Normal1 [[ sampler (7) ]],
    sampler sampler_Normal2 [[ sampler (8) ]],
    sampler sampler_Normal3 [[ sampler (9) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (10) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float3 u_xlat9;
    bool u_xlatb9;
    float u_xlat14;
    float u_xlat15;
    float u_xlat16;
    float2 u_xlat17;
    float2 u_xlat18;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat24;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat22 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb22 = u_xlat22==0.0;
    if(((int(u_xlatb22) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat22 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat22 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat17.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat17.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat18.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat17.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat3.z = sqrt(u_xlat24);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat24 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat6.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat18.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat4.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb9 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb9){
        u_xlatb9 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat9.xyz = (bool(u_xlatb9)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat9.xyz = u_xlat9.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat9.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat9.x = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat16 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat16, u_xlat9.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat9.x = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat9.x = clamp(u_xlat9.x, 0.0f, 1.0f);
    u_xlat3.w = u_xlat3.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyw);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = rsqrt(u_xlat16);
    u_xlat3.xyz = float3(u_xlat16) * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat9.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, u_xlat2.xx);
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat14 = u_xlat14 * u_xlat15;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat15 = -abs(u_xlat21) + 1.0;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat15 = u_xlat15 * u_xlat3.x;
    u_xlat7.x = fma(u_xlat7.x, u_xlat15, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat2.x * u_xlat2.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat15 = (-u_xlat14) + 1.0;
    u_xlat2.x = fma(abs(u_xlat21), u_xlat15, u_xlat14);
    u_xlat15 = fma(u_xlat1.x, u_xlat15, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = fma(u_xlat1.x, u_xlat2.x, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat15 = fma(u_xlat8, u_xlat14, (-u_xlat8));
    u_xlat8 = fma(u_xlat15, u_xlat8, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat8 = fma(u_xlat8, u_xlat8, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat8;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat1.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat9.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: SPOT _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 12
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 8
Set 2D Texture "_Normal1" to slot 7 sampler slot 9
Set 2D Texture "_Normal2" to slot 8 sampler slot 10
Set 2D Texture "_Normal3" to slot 9 sampler slot 11
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 11 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (12) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    bool u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float3 u_xlat11;
    float3 u_xlat13;
    bool u_xlatb13;
    float u_xlat16;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    bool u_xlatb25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat2.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat25 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb25 = u_xlat25==0.0;
    if(((int(u_xlatb25) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat25 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat26);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat20.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat21.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat26 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat7.z = sqrt(u_xlat26);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat4.z = sqrt(u_xlat26);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat26 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat7.z = sqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat21.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat5.z = sqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat26 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat3);
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat3);
    u_xlat3 = u_xlat3 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb5 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb5){
        u_xlatb5 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat13.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat13.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat13.xyz);
        u_xlat13.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat13.xyz);
        u_xlat13.xyz = u_xlat13.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb5)) ? u_xlat13.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat13.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat7.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat13.x, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat5.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat5.x = clamp(u_xlat5.x, 0.0f, 1.0f);
    u_xlatb13 = 0.0<u_xlat3.z;
    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat21.xy = u_xlat3.xy / u_xlat3.ww;
    u_xlat21.xy = u_xlat21.xy + float2(0.5, 0.5);
    u_xlat27 = _LightTexture0.sample(sampler_LightTexture0, u_xlat21.xy).w;
    u_xlat27 = u_xlat27 * u_xlat13.x;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat3.x * u_xlat27;
    u_xlat3.x = u_xlat5.x * u_xlat3.x;
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat11.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat11.x = rsqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat26), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz;
    u_xlat26 = (-u_xlat6.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat11.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat10 = dot(u_xlat11.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat2.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat10, u_xlat16, (-u_xlat10));
    u_xlat1.x = fma(u_xlat1.x, u_xlat10, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat2.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat4.xyz;
    u_xlat8.xyz = u_xlat4.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT_COOKIE _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 12
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 8
Set 2D Texture "_Normal1" to slot 7 sampler slot 9
Set 2D Texture "_Normal2" to slot 8 sampler slot 10
Set 2D Texture "_Normal3" to slot 9 sampler slot 11
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 11 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (12) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(10) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float3 u_xlat11;
    float u_xlat13;
    float u_xlat16;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    bool u_xlatb25;
    float u_xlat26;
    float u_xlat27;
    bool u_xlatb27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat2.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat25 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb25 = u_xlat25==0.0;
    if(((int(u_xlatb25) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat25 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat26);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat20.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat21.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat26 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat7.z = sqrt(u_xlat26);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat4.z = sqrt(u_xlat26);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat26 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat7.z = sqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat21.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat26 = min(u_xlat26, 1.0);
    u_xlat26 = (-u_xlat26) + 1.0;
    u_xlat5.z = sqrt(u_xlat26);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat26 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb27 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb27){
        u_xlatb27 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb27)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat27 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat13 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat27, u_xlat13);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat27 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat27 = clamp(u_xlat27, 0.0f, 1.0f);
    u_xlat5.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat5.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat5.xx).x;
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat3.x = u_xlat3.x * u_xlat5.x;
    u_xlat3.x = u_xlat27 * u_xlat3.x;
    u_xlat4.w = u_xlat4.z + 9.99999975e-06;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyw);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyw);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyw);
    u_xlat11.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat11.x = rsqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat26), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz;
    u_xlat26 = (-u_xlat6.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat2.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat11.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat10 = dot(u_xlat11.xyz, u_xlat0.xyz);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat2.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat10, u_xlat16, (-u_xlat10));
    u_xlat1.x = fma(u_xlat1.x, u_xlat10, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat2.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat4.xyz;
    u_xlat8.xyz = u_xlat4.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 11
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_Normal0" to slot 6 sampler slot 7
Set 2D Texture "_Normal1" to slot 7 sampler slot 8
Set 2D Texture "_Normal2" to slot 8 sampler slot 9
Set 2D Texture "_Normal3" to slot 9 sampler slot 10
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (11) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float3 u_xlat9;
    float u_xlat11;
    float u_xlat14;
    float u_xlat15;
    float u_xlat16;
    float2 u_xlat17;
    float2 u_xlat18;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat23;
    bool u_xlatb23;
    float u_xlat24;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat22 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb22 = u_xlat22==0.0;
    if(((int(u_xlatb22) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat22 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat22 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat17.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat17.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat18.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat17.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat3.z = sqrt(u_xlat24);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat24 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat6.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat18.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat4.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat9.xy = input.TEXCOORD3.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat9.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD3.xx, u_xlat9.xy);
    u_xlat9.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD3.zz, u_xlat9.xy);
    u_xlat9.xy = u_xlat9.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb23 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb23){
        u_xlatb23 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb23)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat23 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat11 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat23, u_xlat11);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat23 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat23 = clamp(u_xlat23, 0.0f, 1.0f);
    u_xlat9.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat9.xy).w;
    u_xlat9.x = u_xlat23 * u_xlat9.x;
    u_xlat3.w = u_xlat3.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyw);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = rsqrt(u_xlat16);
    u_xlat3.xyz = float3(u_xlat16) * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat9.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, u_xlat2.xx);
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat14 = u_xlat14 * u_xlat15;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat15 = -abs(u_xlat21) + 1.0;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat15 = u_xlat15 * u_xlat3.x;
    u_xlat7.x = fma(u_xlat7.x, u_xlat15, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat2.x * u_xlat2.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat15 = (-u_xlat14) + 1.0;
    u_xlat2.x = fma(abs(u_xlat21), u_xlat15, u_xlat14);
    u_xlat15 = fma(u_xlat1.x, u_xlat15, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = fma(u_xlat1.x, u_xlat2.x, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat15 = fma(u_xlat8, u_xlat14, (-u_xlat8));
    u_xlat8 = fma(u_xlat15, u_xlat8, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat8 = fma(u_xlat8, u_xlat8, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat8;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat1.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat9.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: SHADOWS_DEPTH SPOT _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 13
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_Normal0" to slot 6 sampler slot 9
Set 2D Texture "_Normal1" to slot 7 sampler slot 10
Set 2D Texture "_Normal2" to slot 8 sampler slot 11
Set 2D Texture "_Normal3" to slot 9 sampler slot 12
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 11 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 13 sampler slot 1

Constant Buffer "FGlobals" (720 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 528
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _Control_TexelSize at 592
  Vector4 _Splat0_ST at 608
  Vector4 _Splat1_ST at 624
  Vector4 _Splat2_ST at 640
  Vector4 _Splat3_ST at 656
  Float _NormalScale0 at 672
  Float _NormalScale1 at 676
  Float _NormalScale2 at 680
  Float _NormalScale3 at 684
  Float _Metallic0 at 688
  Float _Metallic1 at 692
  Float _Metallic2 at 696
  Float _Metallic3 at 700
  Float _Smoothness0 at 704
  Float _Smoothness1 at 708
  Float _Smoothness2 at 712
  Float _Smoothness3 at 716
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (13) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    bool u_xlatb11;
    float u_xlat12;
    float u_xlat18;
    float u_xlat20;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    bool u_xlatb28;
    float u_xlat29;
    float u_xlat30;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat3.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat28 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb28 = u_xlat28==0.0;
    if(((int(u_xlatb28) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat28 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat29);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat24.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat23.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat24.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat8.z = sqrt(u_xlat29);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat23.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat5.z = sqrt(u_xlat29);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat8.z = sqrt(u_xlat29);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat24.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat29 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat6.z = sqrt(u_xlat29);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat29 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat11 = (-u_xlat2.x) + u_xlat11;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat11, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb11 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb11){
        u_xlatb11 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb11)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat11 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat20, u_xlat11);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat11 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat6 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD3.xxxx, u_xlat6);
    u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD3.zzzz, u_xlat6);
    u_xlat6 = u_xlat6 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
    u_xlat20 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat30 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat20 = fma(u_xlat20, u_xlat30, FGlobals._LightShadowData.x);
    u_xlat11 = (-u_xlat20) + u_xlat11;
    u_xlat2.x = fma(u_xlat2.x, u_xlat11, u_xlat20);
    u_xlatb11 = 0.0<u_xlat4.z;
    u_xlat11 = u_xlatb11 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat20 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat11 = u_xlat20 * u_xlat11;
    u_xlat20 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat20 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat20)).x;
    u_xlat11 = u_xlat20 * u_xlat11;
    u_xlat2.x = u_xlat2.x * u_xlat11;
    u_xlat5.w = u_xlat5.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyw);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = rsqrt(u_xlat11);
    u_xlat4.xyz = float3(u_xlat11) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat29), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat7.xyz;
    u_xlat29 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat3.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat3.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat12, u_xlat18, (-u_xlat12));
    u_xlat1.x = fma(u_xlat1.x, u_xlat12, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat3.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat9.xyz = u_xlat2.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: SHADOWS_DEPTH SHADOWS_SOFT SPOT _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 13
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_Normal0" to slot 6 sampler slot 9
Set 2D Texture "_Normal1" to slot 7 sampler slot 10
Set 2D Texture "_Normal2" to slot 8 sampler slot 11
Set 2D Texture "_Normal3" to slot 9 sampler slot 12
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 11 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 13 sampler slot 1

Constant Buffer "FGlobals" (736 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 544
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _ShadowMapTexture_TexelSize at 528
  Vector4 _Control_TexelSize at 608
  Vector4 _Splat0_ST at 624
  Vector4 _Splat1_ST at 640
  Vector4 _Splat2_ST at 656
  Vector4 _Splat3_ST at 672
  Float _NormalScale0 at 688
  Float _NormalScale1 at 692
  Float _NormalScale2 at 696
  Float _NormalScale3 at 700
  Float _Metallic0 at 704
  Float _Metallic1 at 708
  Float _Metallic2 at 712
  Float _Metallic3 at 716
  Float _Smoothness0 at 720
  Float _Smoothness1 at 724
  Float _Smoothness2 at 728
  Float _Smoothness3 at 732
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _ShadowMapTexture_TexelSize;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (13) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float4 u_xlat12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat16;
    float u_xlat26;
    float u_xlat28;
    bool u_xlatb28;
    float2 u_xlat31;
    float2 u_xlat32;
    float2 u_xlat34;
    float u_xlat39;
    bool u_xlatb39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    float u_xlat42;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat2.xyz;
    u_xlat40 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb40 = u_xlat40==0.0;
    if(((int(u_xlatb40) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat40 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat41);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat31.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat32.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat41 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat8.z = sqrt(u_xlat41);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat31.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat41 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat5.z = sqrt(u_xlat41);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat41 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat8.z = sqrt(u_xlat41);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat32.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat41 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat6.z = sqrt(u_xlat41);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat41 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat15 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = (-u_xlat2.x) + u_xlat15;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat15, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb15 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat15 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat28 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat28, u_xlat15);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat15 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlatb28 = u_xlat2.x<0.99000001;
    if(u_xlatb28){
        u_xlat6 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD3.xxxx, u_xlat6);
        u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD3.zzzz, u_xlat6);
        u_xlat6 = u_xlat6 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
        u_xlat8.xy = fma(u_xlat6.xy, FGlobals._ShadowMapTexture_TexelSize.zw, float2(0.5, 0.5));
        u_xlat8.xy = floor(u_xlat8.xy);
        u_xlat6.xy = fma(u_xlat6.xy, FGlobals._ShadowMapTexture_TexelSize.zw, (-u_xlat8.xy));
        u_xlat9 = u_xlat6.xxyy + float4(0.5, 1.0, 0.5, 1.0);
        u_xlat10.xw = u_xlat9.xz * u_xlat9.xz;
        u_xlat34.xy = fma(u_xlat10.xw, float2(0.5, 0.5), (-u_xlat6.xy));
        u_xlat9.xz = (-u_xlat6.xy) + float2(1.0, 1.0);
        u_xlat11.xy = min(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat9.xz = fma((-u_xlat11.xy), u_xlat11.xy, u_xlat9.xz);
        u_xlat6.xy = max(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat6.xy = fma((-u_xlat6.xy), u_xlat6.xy, u_xlat9.yw);
        u_xlat11.x = u_xlat34.x;
        u_xlat11.y = u_xlat9.x;
        u_xlat11.z = u_xlat6.x;
        u_xlat11.w = u_xlat10.x;
        u_xlat11 = u_xlat11 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10.x = u_xlat34.y;
        u_xlat10.y = u_xlat9.z;
        u_xlat10.z = u_xlat6.y;
        u_xlat9 = u_xlat10 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10 = u_xlat11.ywyw + u_xlat11.xzxz;
        u_xlat12 = u_xlat9.yyww + u_xlat9.xxzz;
        u_xlat6.xy = u_xlat11.yw / u_xlat10.zw;
        u_xlat6.xy = u_xlat6.xy + float2(-1.5, 0.5);
        u_xlat34.xy = u_xlat9.yw / u_xlat12.yw;
        u_xlat34.xy = u_xlat34.xy + float2(-1.5, 0.5);
        u_xlat9.xy = u_xlat6.xy * FGlobals._ShadowMapTexture_TexelSize.xx;
        u_xlat9.zw = u_xlat34.xy * FGlobals._ShadowMapTexture_TexelSize.yy;
        u_xlat10 = u_xlat10 * u_xlat12;
        u_xlat11 = fma(u_xlat8.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat9.xzyz);
        u_xlat28 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat11.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat11.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat42 = u_xlat42 * u_xlat10.y;
        u_xlat28 = fma(u_xlat10.x, u_xlat28, u_xlat42);
        u_xlat8 = fma(u_xlat8.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat9.xwyw);
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat28 = fma(u_xlat10.z, u_xlat42, u_xlat28);
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat28 = fma(u_xlat10.w, u_xlat42, u_xlat28);
        u_xlat42 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat28 = fma(u_xlat28, u_xlat42, FGlobals._LightShadowData.x);
    } else {
        u_xlat28 = 1.0;
    }
    u_xlat15 = (-u_xlat28) + u_xlat15;
    u_xlat2.x = fma(u_xlat2.x, u_xlat15, u_xlat28);
    u_xlatb15 = 0.0<u_xlat4.z;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat28 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat28)).x;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat2.x = u_xlat2.x * u_xlat15;
    u_xlat5.w = u_xlat5.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyw);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat41), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat41) * u_xlat7.xyz;
    u_xlat41 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), u_xlat3.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat26 * u_xlat26;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat1.x;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat1.x = -abs(u_xlat39) + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat14;
    u_xlat13.x = fma(u_xlat13.x, u_xlat1.x, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat1.x = (-u_xlat26) + 1.0;
    u_xlat14 = fma(abs(u_xlat39), u_xlat1.x, u_xlat26);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat1.x;
    u_xlat39 = fma(u_xlat3.x, u_xlat14, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat26 = u_xlat26 * u_xlat26;
    u_xlat1.x = fma(u_xlat16, u_xlat26, (-u_xlat16));
    u_xlat1.x = fma(u_xlat1.x, u_xlat16, 1.0);
    u_xlat26 = u_xlat26 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat26 = u_xlat26 / u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat39;
    u_xlat26 = u_xlat26 * 3.14159274;
    u_xlat26 = max(u_xlat26, 9.99999975e-05);
    u_xlat13.y = sqrt(u_xlat26);
    u_xlat13.xy = u_xlat3.xx * u_xlat13.xy;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb39 = u_xlat39!=0.0;
    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
    u_xlat26 = u_xlat39 * u_xlat13.y;
    u_xlat1.xyz = u_xlat13.xxx * u_xlat2.xyz;
    u_xlat13.xyz = u_xlat2.xyz * float3(u_xlat26);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL SHADOWS_SCREEN _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 11
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_Normal0" to slot 6 sampler slot 7
Set 2D Texture "_Normal1" to slot 7 sampler slot 8
Set 2D Texture "_Normal2" to slot 8 sampler slot 9
Set 2D Texture "_Normal3" to slot 9 sampler slot 10
Set 2D Texture "_ShadowMapTexture" to slot 10 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0

Constant Buffer "FGlobals" (400 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 272
  Vector4 _Splat0_ST at 288
  Vector4 _Splat1_ST at 304
  Vector4 _Splat2_ST at 320
  Vector4 _Splat3_ST at 336
  Float _NormalScale0 at 352
  Float _NormalScale1 at 356
  Float _NormalScale2 at 360
  Float _NormalScale3 at 364
  Float _Metallic0 at 368
  Float _Metallic1 at 372
  Float _Metallic2 at 376
  Float _Metallic3 at 380
  Float _Smoothness0 at 384
  Float _Smoothness1 at 388
  Float _Smoothness2 at 392
  Float _Smoothness3 at 396
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (11) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float3 u_xlat9;
    float u_xlat14;
    float u_xlat15;
    float u_xlat16;
    bool u_xlatb16;
    float2 u_xlat17;
    float2 u_xlat18;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat23;
    float u_xlat24;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat22 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb22 = u_xlat22==0.0;
    if(((int(u_xlatb22) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat22 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat22 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat17.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat17.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat18.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat17.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat3.z = sqrt(u_xlat24);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat24 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat6.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat18.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat4.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat9.x = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = sqrt(u_xlat16);
    u_xlat16 = (-u_xlat9.x) + u_xlat16;
    u_xlat9.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat16, u_xlat9.x);
    u_xlat9.x = fma(u_xlat9.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat9.x = clamp(u_xlat9.x, 0.0f, 1.0f);
    u_xlatb16 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb16){
        u_xlatb16 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb16)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat16 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat23 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat23, u_xlat16);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat16 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat23 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat16 = (-u_xlat23) + u_xlat16;
    u_xlat9.x = fma(u_xlat9.x, u_xlat16, u_xlat23);
    u_xlat3.w = u_xlat3.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyw);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = rsqrt(u_xlat16);
    u_xlat3.xyz = float3(u_xlat16) * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat9.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, u_xlat2.xx);
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat14 = u_xlat14 * u_xlat15;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat15 = -abs(u_xlat21) + 1.0;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat15 = u_xlat15 * u_xlat3.x;
    u_xlat7.x = fma(u_xlat7.x, u_xlat15, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat2.x * u_xlat2.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat15 = (-u_xlat14) + 1.0;
    u_xlat2.x = fma(abs(u_xlat21), u_xlat15, u_xlat14);
    u_xlat15 = fma(u_xlat1.x, u_xlat15, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = fma(u_xlat1.x, u_xlat2.x, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat15 = fma(u_xlat8, u_xlat14, (-u_xlat8));
    u_xlat8 = fma(u_xlat15, u_xlat8, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat8 = fma(u_xlat8, u_xlat8, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat8;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat1.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat9.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE SHADOWS_SCREEN _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 12
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 8
Set 2D Texture "_Normal1" to slot 7 sampler slot 9
Set 2D Texture "_Normal2" to slot 8 sampler slot 10
Set 2D Texture "_Normal3" to slot 9 sampler slot 11
Set 2D Texture "_ShadowMapTexture" to slot 10 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 11 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0

Constant Buffer "FGlobals" (464 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Matrix4x4 unity_WorldToLight at 272
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 336
  Vector4 _Splat0_ST at 352
  Vector4 _Splat1_ST at 368
  Vector4 _Splat2_ST at 384
  Vector4 _Splat3_ST at 400
  Float _NormalScale0 at 416
  Float _NormalScale1 at 420
  Float _NormalScale2 at 424
  Float _NormalScale3 at 428
  Float _Metallic0 at 432
  Float _Metallic1 at 436
  Float _Metallic2 at 440
  Float _Metallic3 at 444
  Float _Smoothness0 at 448
  Float _Smoothness1 at 452
  Float _Smoothness2 at 456
  Float _Smoothness3 at 460
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (12) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(10) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    bool u_xlatb4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float3 u_xlat9;
    float3 u_xlat11;
    float u_xlat14;
    float u_xlat15;
    float u_xlat16;
    float2 u_xlat17;
    float2 u_xlat18;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat23;
    float u_xlat24;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat22 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb22 = u_xlat22==0.0;
    if(((int(u_xlatb22) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat22 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat22 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat17.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat17.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat18.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat17.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat3.z = sqrt(u_xlat24);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat24 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat6.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat18.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat24 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat24 = min(u_xlat24, 1.0);
    u_xlat24 = (-u_xlat24) + 1.0;
    u_xlat4.z = sqrt(u_xlat24);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat9.xy = input.TEXCOORD3.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat9.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD3.xx, u_xlat9.xy);
    u_xlat9.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD3.zz, u_xlat9.xy);
    u_xlat9.xy = u_xlat9.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat23 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat4.x = sqrt(u_xlat4.x);
    u_xlat4.x = (-u_xlat23) + u_xlat4.x;
    u_xlat23 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat4.x, u_xlat23);
    u_xlat23 = fma(u_xlat23, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat23 = clamp(u_xlat23, 0.0f, 1.0f);
    u_xlatb4 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb4){
        u_xlatb4 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat11.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat11.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat11.xyz);
        u_xlat11.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat11.xyz);
        u_xlat11.xyz = u_xlat11.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat11.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat11.x = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat6.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat11.x, u_xlat6.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat4.x = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat4.x = clamp(u_xlat4.x, 0.0f, 1.0f);
    u_xlat11.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat11.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat11.xy).x;
    u_xlat4.x = (-u_xlat11.x) + u_xlat4.x;
    u_xlat23 = fma(u_xlat23, u_xlat4.x, u_xlat11.x);
    u_xlat9.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat9.xy).w;
    u_xlat9.x = u_xlat23 * u_xlat9.x;
    u_xlat3.w = u_xlat3.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyw);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16 = rsqrt(u_xlat16);
    u_xlat3.xyz = float3(u_xlat16) * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat9.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat8 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat8 = clamp(u_xlat8, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, u_xlat2.xx);
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat1.x) + 1.0;
    u_xlat15 = u_xlat14 * u_xlat14;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat14 = u_xlat14 * u_xlat15;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat15 = -abs(u_xlat21) + 1.0;
    u_xlat3.x = u_xlat15 * u_xlat15;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat15 = u_xlat15 * u_xlat3.x;
    u_xlat7.x = fma(u_xlat7.x, u_xlat15, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat2.x * u_xlat2.x;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat15 = (-u_xlat14) + 1.0;
    u_xlat2.x = fma(abs(u_xlat21), u_xlat15, u_xlat14);
    u_xlat15 = fma(u_xlat1.x, u_xlat15, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat15;
    u_xlat21 = fma(u_xlat1.x, u_xlat2.x, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat15 = fma(u_xlat8, u_xlat14, (-u_xlat8));
    u_xlat8 = fma(u_xlat15, u_xlat8, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat8 = fma(u_xlat8, u_xlat8, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat8;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat1.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat9.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT SHADOWS_CUBE _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 12
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 8
Set 2D Texture "_Normal1" to slot 7 sampler slot 9
Set 2D Texture "_Normal2" to slot 8 sampler slot 10
Set 2D Texture "_Normal3" to slot 9 sampler slot 11
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 12 sampler slot 1

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (12) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    bool u_xlatb11;
    float u_xlat12;
    float u_xlat18;
    float u_xlat20;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    bool u_xlatb28;
    float u_xlat29;
    float u_xlat30;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat3.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat28 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb28 = u_xlat28==0.0;
    if(((int(u_xlatb28) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat28 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat29);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat24.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat23.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat24.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat8.z = sqrt(u_xlat29);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat23.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat5.z = sqrt(u_xlat29);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat8.z = sqrt(u_xlat29);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat24.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat29 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat6.z = sqrt(u_xlat29);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat29 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat11 = (-u_xlat2.x) + u_xlat11;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat11, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb11 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb11){
        u_xlatb11 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb11)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat11 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat20, u_xlat11);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat11 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat20 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat20 = max(abs(u_xlat6.z), u_xlat20);
    u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.z);
    u_xlat20 = max(u_xlat20, 9.99999975e-06);
    u_xlat20 = u_xlat20 * FGlobals._LightProjectionParams.w;
    u_xlat20 = FGlobals._LightProjectionParams.y / u_xlat20;
    u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.x);
    u_xlat20 = (-u_xlat20) + 1.0;
    u_xlat20 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat20), level(0.0));
    u_xlat30 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat20 = fma(u_xlat20, u_xlat30, FGlobals._LightShadowData.x);
    u_xlat11 = (-u_xlat20) + u_xlat11;
    u_xlat2.x = fma(u_xlat2.x, u_xlat11, u_xlat20);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat11)).x;
    u_xlat2.x = u_xlat2.x * u_xlat11;
    u_xlat5.w = u_xlat5.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyw);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = rsqrt(u_xlat11);
    u_xlat4.xyz = float3(u_xlat11) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat29), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat7.xyz;
    u_xlat29 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat3.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat3.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat12, u_xlat18, (-u_xlat12));
    u_xlat1.x = fma(u_xlat1.x, u_xlat12, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat3.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat9.xyz = u_xlat2.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT SHADOWS_CUBE SHADOWS_SOFT _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 12
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 8
Set 2D Texture "_Normal1" to slot 7 sampler slot 9
Set 2D Texture "_Normal2" to slot 8 sampler slot 10
Set 2D Texture "_Normal3" to slot 9 sampler slot 11
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 12 sampler slot 1

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (12) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    bool u_xlatb31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat31 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb31 = u_xlat31==0.0;
    if(((int(u_xlatb31) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb22 = u_xlat2.x<0.99000001;
    if(u_xlatb22){
        u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat22 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat22 = max(abs(u_xlat6.z), u_xlat22);
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
        u_xlat22 = max(u_xlat22, 9.99999975e-06);
        u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
        u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat8.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat22), level(0.0));
        u_xlat22 = dot(u_xlat8, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat12)).x;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat5.w = u_xlat5.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyw);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT_COOKIE SHADOWS_CUBE _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 13
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_Normal0" to slot 6 sampler slot 9
Set 2D Texture "_Normal1" to slot 7 sampler slot 10
Set 2D Texture "_Normal2" to slot 8 sampler slot 11
Set 2D Texture "_Normal3" to slot 9 sampler slot 12
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 11 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 13 sampler slot 1

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (13) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(10) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    bool u_xlatb11;
    float u_xlat12;
    float u_xlat18;
    float u_xlat20;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    bool u_xlatb28;
    float u_xlat29;
    float u_xlat30;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat3.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat28 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb28 = u_xlat28==0.0;
    if(((int(u_xlatb28) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat28 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat29);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat24.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat23.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat24.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat8.z = sqrt(u_xlat29);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat23.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat5.z = sqrt(u_xlat29);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat29 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat8.z = sqrt(u_xlat29);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat24.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat29 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat6.z = sqrt(u_xlat29);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat29 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat11 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat11 = sqrt(u_xlat11);
    u_xlat11 = (-u_xlat2.x) + u_xlat11;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat11, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb11 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb11){
        u_xlatb11 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb11)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat11 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat20, u_xlat11);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat11 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat20 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat20 = max(abs(u_xlat6.z), u_xlat20);
    u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.z);
    u_xlat20 = max(u_xlat20, 9.99999975e-06);
    u_xlat20 = u_xlat20 * FGlobals._LightProjectionParams.w;
    u_xlat20 = FGlobals._LightProjectionParams.y / u_xlat20;
    u_xlat20 = u_xlat20 + (-FGlobals._LightProjectionParams.x);
    u_xlat20 = (-u_xlat20) + 1.0;
    u_xlat20 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat20), level(0.0));
    u_xlat30 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat20 = fma(u_xlat20, u_xlat30, FGlobals._LightShadowData.x);
    u_xlat11 = (-u_xlat20) + u_xlat11;
    u_xlat2.x = fma(u_xlat2.x, u_xlat11, u_xlat20);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat11)).x;
    u_xlat20 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat11 = u_xlat20 * u_xlat11;
    u_xlat2.x = u_xlat2.x * u_xlat11;
    u_xlat5.w = u_xlat5.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyw);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat11 = rsqrt(u_xlat11);
    u_xlat4.xyz = float3(u_xlat11) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat29), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat7.xyz;
    u_xlat29 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat3.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat3.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat12, u_xlat18, (-u_xlat12));
    u_xlat1.x = fma(u_xlat1.x, u_xlat12, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat3.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat2.xyz;
    u_xlat9.xyz = u_xlat2.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 13
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_Normal0" to slot 6 sampler slot 9
Set 2D Texture "_Normal1" to slot 7 sampler slot 10
Set 2D Texture "_Normal2" to slot 8 sampler slot 11
Set 2D Texture "_Normal3" to slot 9 sampler slot 12
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 11 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 13 sampler slot 1

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (13) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(10) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    bool u_xlatb31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat31 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb31 = u_xlat31==0.0;
    if(((int(u_xlatb31) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb22 = u_xlat2.x<0.99000001;
    if(u_xlatb22){
        u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat22 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat22 = max(abs(u_xlat6.z), u_xlat22);
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
        u_xlat22 = max(u_xlat22, 9.99999975e-06);
        u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
        u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat8.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat22), level(0.0));
        u_xlat22 = dot(u_xlat8, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat12)).x;
    u_xlat22 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat12 = u_xlat22 * u_xlat12;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat5.w = u_xlat5.z + 9.99999975e-06;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyw);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyw);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyw);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 7

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    float u_xlat14;
    float2 u_xlat18;
    float2 u_xlat19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat26;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat18.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat19.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat5.xyz = float3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb24)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat24 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat26 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat24, u_xlat26);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat24 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat24 * u_xlat3.x;
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat10.x = rsqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat23), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat23 = fma((-u_xlat23), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat10.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat10.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat10.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = fma(u_xlat7.x, u_xlat1.x, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat1.x = (-u_xlat14) + 1.0;
    u_xlat8 = fma(abs(u_xlat21), u_xlat1.x, u_xlat14);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = fma(u_xlat2.x, u_xlat8, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = fma(u_xlat9, u_xlat14, (-u_xlat9));
    u_xlat1.x = fma(u_xlat1.x, u_xlat9, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat4.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 6

Constant Buffer "FGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 176
  Vector4 _Splat0_ST at 192
  Vector4 _Splat1_ST at 208
  Vector4 _Splat2_ST at 224
  Vector4 _Splat3_ST at 240
  Float _Metallic0 at 256
  Float _Metallic1 at 260
  Float _Metallic2 at 264
  Float _Metallic3 at 268
  Float _Smoothness0 at 272
  Float _Smoothness1 at 276
  Float _Smoothness2 at 280
  Float _Smoothness3 at 284
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (6) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    bool u_xlatb8;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat21;
    float u_xlat22;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat4.xyz = float3(u_xlat22) * u_xlat4.xyz;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb8 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb8){
        u_xlatb8 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat8.xyz = (bool(u_xlatb8)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat8.xyz = u_xlat8.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat8.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat8.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat14 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat14, u_xlat8.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat8.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat14 = rsqrt(u_xlat14);
    u_xlat4.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SPOT
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 8

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    bool u_xlatb6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    float2 u_xlat13;
    float u_xlat14;
    float2 u_xlat18;
    float2 u_xlat19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    float u_xlat26;
    bool u_xlatb26;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat18.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat19.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat5.xyz = float3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat3);
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat3);
    u_xlat3 = u_xlat3 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb26 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb26){
        u_xlatb26 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb26)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat26 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat13.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat26, u_xlat13.x);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat26 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlatb6 = 0.0<u_xlat3.z;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat13.xy = u_xlat3.xy / u_xlat3.ww;
    u_xlat13.xy = u_xlat13.xy + float2(0.5, 0.5);
    u_xlat24 = _LightTexture0.sample(sampler_LightTexture0, u_xlat13.xy).w;
    u_xlat24 = u_xlat24 * u_xlat6.x;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat3.x * u_xlat24;
    u_xlat3.x = u_xlat26 * u_xlat3.x;
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat10.x = rsqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat23), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat23 = fma((-u_xlat23), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat10.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat10.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat10.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = fma(u_xlat7.x, u_xlat1.x, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat1.x = (-u_xlat14) + 1.0;
    u_xlat8 = fma(abs(u_xlat21), u_xlat1.x, u_xlat14);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = fma(u_xlat2.x, u_xlat8, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = fma(u_xlat9, u_xlat14, (-u_xlat9));
    u_xlat1.x = fma(u_xlat1.x, u_xlat9, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat4.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_LightTextureB0" to slot 5 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 6 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 8

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(5) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    float u_xlat14;
    float2 u_xlat18;
    float2 u_xlat19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat26;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat18.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat19.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat5.xyz = float3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb24)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat24 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat26 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat24, u_xlat26);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat24 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat26)).x;
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat3.x = u_xlat3.x * u_xlat26;
    u_xlat3.x = u_xlat24 * u_xlat3.x;
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat10.x = rsqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat23), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat23 = fma((-u_xlat23), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat10.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat10.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat10.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = fma(u_xlat7.x, u_xlat1.x, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat1.x = (-u_xlat14) + 1.0;
    u_xlat8 = fma(abs(u_xlat21), u_xlat1.x, u_xlat14);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = fma(u_xlat2.x, u_xlat8, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = fma(u_xlat9, u_xlat14, (-u_xlat9));
    u_xlat1.x = fma(u_xlat1.x, u_xlat9, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat4.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE INSTANCING_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 7

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat20;
    bool u_xlatb20;
    float u_xlat21;
    float u_xlat22;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat4.xyz = float3(u_xlat22) * u_xlat4.xyz;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat8.xy = input.TEXCOORD3.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD3.xx, u_xlat8.xy);
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD3.zz, u_xlat8.xy);
    u_xlat8.xy = u_xlat8.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb20 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb20){
        u_xlatb20 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb20)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat20 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat20, u_xlat22);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat20 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlat8.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat8.xy).w;
    u_xlat8.x = u_xlat20 * u_xlat8.x;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat14 = rsqrt(u_xlat14);
    u_xlat4.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH SPOT
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 8 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 9

Constant Buffer "FGlobals" (704 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 528
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _Control_TexelSize at 592
  Vector4 _Splat0_ST at 608
  Vector4 _Splat1_ST at 624
  Vector4 _Splat2_ST at 640
  Vector4 _Splat3_ST at 656
  Float _Metallic0 at 672
  Float _Metallic1 at 676
  Float _Metallic2 at 680
  Float _Metallic3 at 684
  Float _Smoothness0 at 688
  Float _Smoothness1 at 692
  Float _Smoothness2 at 696
  Float _Smoothness3 at 700
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat21.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat22.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz;
    u_xlat26 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat7.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat10, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb10)) ? u_xlat7.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10 = fma(u_xlat7.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat7.x = max(u_xlat18, u_xlat10);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat10 = dot(u_xlat7, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat7 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat7 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD3.xxxx, u_xlat7);
    u_xlat7 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD3.zzzz, u_xlat7);
    u_xlat7 = u_xlat7 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat7.xyz = u_xlat7.xyz / u_xlat7.www;
    u_xlat18 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xy, saturate(u_xlat7.z), level(0.0));
    u_xlat27 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat18 = fma(u_xlat18, u_xlat27, FGlobals._LightShadowData.x);
    u_xlat10 = (-u_xlat18) + u_xlat10;
    u_xlat2.x = fma(u_xlat2.x, u_xlat10, u_xlat18);
    u_xlatb10 = 0.0<u_xlat4.z;
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat7.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat7.xy = u_xlat7.xy + float2(0.5, 0.5);
    u_xlat18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat7.xy).w;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat18)).x;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    u_xlat4.xyz = float3(u_xlat10) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat26), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat3.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat3.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat11, u_xlat16, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH SHADOWS_SOFT SPOT
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 8 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 9

Constant Buffer "FGlobals" (720 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 544
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _ShadowMapTexture_TexelSize at 528
  Vector4 _Control_TexelSize at 608
  Vector4 _Splat0_ST at 624
  Vector4 _Splat1_ST at 640
  Vector4 _Splat2_ST at 656
  Vector4 _Splat3_ST at 672
  Float _Metallic0 at 688
  Float _Metallic1 at 692
  Float _Metallic2 at 696
  Float _Metallic3 at 700
  Float _Smoothness0 at 704
  Float _Smoothness1 at 708
  Float _Smoothness2 at 712
  Float _Smoothness3 at 716
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _ShadowMapTexture_TexelSize;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float4 u_xlat12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat16;
    float u_xlat26;
    float u_xlat28;
    bool u_xlatb28;
    float2 u_xlat31;
    float2 u_xlat32;
    float2 u_xlat34;
    float u_xlat39;
    bool u_xlatb39;
    float u_xlat40;
    float u_xlat41;
    float u_xlat42;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat40 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat41);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat31.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat32.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat41 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat41 = rsqrt(u_xlat41);
    u_xlat6.xyz = float3(u_xlat41) * u_xlat6.xyz;
    u_xlat41 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat7.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = (-u_xlat2.x) + u_xlat15;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat15, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb15 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb15)) ? u_xlat7.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat15 = fma(u_xlat7.y, 0.25, 0.75);
        u_xlat28 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat7.x = max(u_xlat28, u_xlat15);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat15 = dot(u_xlat7, FGlobals.unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlatb28 = u_xlat2.x<0.99000001;
    if(u_xlatb28){
        u_xlat7 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat7 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD3.xxxx, u_xlat7);
        u_xlat7 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD3.zzzz, u_xlat7);
        u_xlat7 = u_xlat7 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat7.xyz = u_xlat7.xyz / u_xlat7.www;
        u_xlat8.xy = fma(u_xlat7.xy, FGlobals._ShadowMapTexture_TexelSize.zw, float2(0.5, 0.5));
        u_xlat8.xy = floor(u_xlat8.xy);
        u_xlat7.xy = fma(u_xlat7.xy, FGlobals._ShadowMapTexture_TexelSize.zw, (-u_xlat8.xy));
        u_xlat9 = u_xlat7.xxyy + float4(0.5, 1.0, 0.5, 1.0);
        u_xlat10.xw = u_xlat9.xz * u_xlat9.xz;
        u_xlat34.xy = fma(u_xlat10.xw, float2(0.5, 0.5), (-u_xlat7.xy));
        u_xlat9.xz = (-u_xlat7.xy) + float2(1.0, 1.0);
        u_xlat11.xy = min(u_xlat7.xy, float2(0.0, 0.0));
        u_xlat9.xz = fma((-u_xlat11.xy), u_xlat11.xy, u_xlat9.xz);
        u_xlat7.xy = max(u_xlat7.xy, float2(0.0, 0.0));
        u_xlat7.xy = fma((-u_xlat7.xy), u_xlat7.xy, u_xlat9.yw);
        u_xlat11.x = u_xlat34.x;
        u_xlat11.y = u_xlat9.x;
        u_xlat11.z = u_xlat7.x;
        u_xlat11.w = u_xlat10.x;
        u_xlat11 = u_xlat11 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10.x = u_xlat34.y;
        u_xlat10.y = u_xlat9.z;
        u_xlat10.z = u_xlat7.y;
        u_xlat9 = u_xlat10 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10 = u_xlat11.ywyw + u_xlat11.xzxz;
        u_xlat12 = u_xlat9.yyww + u_xlat9.xxzz;
        u_xlat7.xy = u_xlat11.yw / u_xlat10.zw;
        u_xlat7.xy = u_xlat7.xy + float2(-1.5, 0.5);
        u_xlat34.xy = u_xlat9.yw / u_xlat12.yw;
        u_xlat34.xy = u_xlat34.xy + float2(-1.5, 0.5);
        u_xlat9.xy = u_xlat7.xy * FGlobals._ShadowMapTexture_TexelSize.xx;
        u_xlat9.zw = u_xlat34.xy * FGlobals._ShadowMapTexture_TexelSize.yy;
        u_xlat10 = u_xlat10 * u_xlat12;
        u_xlat11 = fma(u_xlat8.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat9.xzyz);
        u_xlat28 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat11.xy, saturate(u_xlat7.z), level(0.0));
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat11.zw, saturate(u_xlat7.z), level(0.0));
        u_xlat42 = u_xlat42 * u_xlat10.y;
        u_xlat28 = fma(u_xlat10.x, u_xlat28, u_xlat42);
        u_xlat8 = fma(u_xlat8.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat9.xwyw);
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xy, saturate(u_xlat7.z), level(0.0));
        u_xlat28 = fma(u_xlat10.z, u_xlat42, u_xlat28);
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.zw, saturate(u_xlat7.z), level(0.0));
        u_xlat28 = fma(u_xlat10.w, u_xlat42, u_xlat28);
        u_xlat42 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat28 = fma(u_xlat28, u_xlat42, FGlobals._LightShadowData.x);
    } else {
        u_xlat28 = 1.0;
    }
    u_xlat15 = (-u_xlat28) + u_xlat15;
    u_xlat2.x = fma(u_xlat2.x, u_xlat15, u_xlat28);
    u_xlatb15 = 0.0<u_xlat4.z;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat7.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat7.xy = u_xlat7.xy + float2(0.5, 0.5);
    u_xlat28 = _LightTexture0.sample(sampler_LightTexture0, u_xlat7.xy).w;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat28)).x;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat2.x = u_xlat2.x * u_xlat15;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat41), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat41) * u_xlat5.xyz;
    u_xlat41 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), u_xlat3.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat26 * u_xlat26;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat1.x;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat1.x = -abs(u_xlat39) + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat14;
    u_xlat13.x = fma(u_xlat13.x, u_xlat1.x, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat1.x = (-u_xlat26) + 1.0;
    u_xlat14 = fma(abs(u_xlat39), u_xlat1.x, u_xlat26);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat1.x;
    u_xlat39 = fma(u_xlat3.x, u_xlat14, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat26 = u_xlat26 * u_xlat26;
    u_xlat1.x = fma(u_xlat16, u_xlat26, (-u_xlat16));
    u_xlat1.x = fma(u_xlat1.x, u_xlat16, 1.0);
    u_xlat26 = u_xlat26 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat26 = u_xlat26 / u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat39;
    u_xlat26 = u_xlat26 * 3.14159274;
    u_xlat26 = max(u_xlat26, 9.99999975e-05);
    u_xlat13.y = sqrt(u_xlat26);
    u_xlat13.xy = u_xlat3.xx * u_xlat13.xy;
    u_xlat39 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb39 = u_xlat39!=0.0;
    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
    u_xlat26 = u_xlat39 * u_xlat13.y;
    u_xlat1.xyz = u_xlat13.xxx * u_xlat2.xyz;
    u_xlat13.xyz = u_xlat2.xyz * float3(u_xlat26);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_ShadowMapTexture" to slot 5 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 7

Constant Buffer "FGlobals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 272
  Vector4 _Splat0_ST at 288
  Vector4 _Splat1_ST at 304
  Vector4 _Splat2_ST at 320
  Vector4 _Splat3_ST at 336
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb14;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat20;
    float u_xlat21;
    float u_xlat22;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat4.xyz = float3(u_xlat22) * u_xlat4.xyz;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat5.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat8.x = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = (-u_xlat8.x) + u_xlat14;
    u_xlat8.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat14, u_xlat8.x);
    u_xlat8.x = fma(u_xlat8.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlatb14 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb14 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb14)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat14 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat20, u_xlat14);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat14 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat20 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat14 = (-u_xlat20) + u_xlat14;
    u_xlat8.x = fma(u_xlat8.x, u_xlat14, u_xlat20);
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat14 = rsqrt(u_xlat14);
    u_xlat4.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE INSTANCING_ON SHADOWS_SCREEN
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 5 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 8

Constant Buffer "FGlobals" (448 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Matrix4x4 unity_WorldToLight at 272
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 336
  Vector4 _Splat0_ST at 352
  Vector4 _Splat1_ST at 368
  Vector4 _Splat2_ST at 384
  Vector4 _Splat3_ST at 400
  Float _Metallic0 at 416
  Float _Metallic1 at 420
  Float _Metallic2 at 424
  Float _Metallic3 at 428
  Float _Smoothness0 at 432
  Float _Smoothness1 at 436
  Float _Smoothness2 at 440
  Float _Smoothness3 at 444
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat11;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    float u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat4.xyz = float3(u_xlat22) * u_xlat4.xyz;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat8.xy = input.TEXCOORD3.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD3.xx, u_xlat8.xy);
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD3.zz, u_xlat8.xy);
    u_xlat8.xy = u_xlat8.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat5.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat20 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = sqrt(u_xlat22);
    u_xlat22 = (-u_xlat20) + u_xlat22;
    u_xlat20 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat22, u_xlat20);
    u_xlat20 = fma(u_xlat20, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlatb22 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb22){
        u_xlatb22 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb22)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat22 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat11 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat22, u_xlat11);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat22 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat22 = clamp(u_xlat22, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat5.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat22 = u_xlat22 + (-u_xlat5.x);
    u_xlat20 = fma(u_xlat20, u_xlat22, u_xlat5.x);
    u_xlat8.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat8.xy).w;
    u_xlat8.x = u_xlat20 * u_xlat8.x;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat14 = rsqrt(u_xlat14);
    u_xlat4.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT SHADOWS_CUBE
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 7 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 8

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(7) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat21.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat22.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz;
    u_xlat26 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat10, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb10)) ? u_xlat7.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10 = fma(u_xlat7.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat7.x = max(u_xlat18, u_xlat10);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat10 = dot(u_xlat7, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat18 = max(abs(u_xlat7.y), abs(u_xlat7.x));
    u_xlat18 = max(abs(u_xlat7.z), u_xlat18);
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.z);
    u_xlat18 = max(u_xlat18, 9.99999975e-06);
    u_xlat18 = u_xlat18 * FGlobals._LightProjectionParams.w;
    u_xlat18 = FGlobals._LightProjectionParams.y / u_xlat18;
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.x);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xyz, saturate(u_xlat18), level(0.0));
    u_xlat27 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat18 = fma(u_xlat18, u_xlat27, FGlobals._LightShadowData.x);
    u_xlat10 = (-u_xlat18) + u_xlat10;
    u_xlat2.x = fma(u_xlat2.x, u_xlat10, u_xlat18);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat10)).x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    u_xlat4.xyz = float3(u_xlat10) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat26), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat3.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat3.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat11, u_xlat16, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT SHADOWS_CUBE SHADOWS_SOFT
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_LightTexture0" to slot 5 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 7 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 8

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(7) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat32 = rsqrt(u_xlat32);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat6.xyz;
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb12)) ? u_xlat7.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat7.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat7.x = max(u_xlat22, u_xlat12);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat7, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb22 = u_xlat2.x<0.99000001;
    if(u_xlatb22){
        u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat22 = max(abs(u_xlat7.y), abs(u_xlat7.x));
        u_xlat22 = max(abs(u_xlat7.z), u_xlat22);
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
        u_xlat22 = max(u_xlat22, 9.99999975e-06);
        u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
        u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat8.xyz = u_xlat7.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat7.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat7.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat7.xyz = u_xlat7.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xyz, saturate(u_xlat22), level(0.0));
        u_xlat22 = dot(u_xlat8, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat12)).x;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat32), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE SHADOWS_CUBE
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_LightTextureB0" to slot 5 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 8 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 9

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(5) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat21.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat22.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz;
    u_xlat26 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat10, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb10)) ? u_xlat7.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10 = fma(u_xlat7.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat7.x = max(u_xlat18, u_xlat10);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat10 = dot(u_xlat7, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat18 = max(abs(u_xlat7.y), abs(u_xlat7.x));
    u_xlat18 = max(abs(u_xlat7.z), u_xlat18);
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.z);
    u_xlat18 = max(u_xlat18, 9.99999975e-06);
    u_xlat18 = u_xlat18 * FGlobals._LightProjectionParams.w;
    u_xlat18 = FGlobals._LightProjectionParams.y / u_xlat18;
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.x);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xyz, saturate(u_xlat18), level(0.0));
    u_xlat27 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat18 = fma(u_xlat18, u_xlat27, FGlobals._LightShadowData.x);
    u_xlat10 = (-u_xlat18) + u_xlat10;
    u_xlat2.x = fma(u_xlat2.x, u_xlat10, u_xlat18);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat10)).x;
    u_xlat18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    u_xlat4.xyz = float3(u_xlat10) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat26), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat3.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat3.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat11, u_xlat16, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_LightTextureB0" to slot 5 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 8 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 9

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(5) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat32 = rsqrt(u_xlat32);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat6.xyz;
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb12)) ? u_xlat7.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat7.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat7.x = max(u_xlat22, u_xlat12);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat7, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb22 = u_xlat2.x<0.99000001;
    if(u_xlatb22){
        u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat22 = max(abs(u_xlat7.y), abs(u_xlat7.x));
        u_xlat22 = max(abs(u_xlat7.z), u_xlat22);
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
        u_xlat22 = max(u_xlat22, 9.99999975e-06);
        u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
        u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat8.xyz = u_xlat7.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat7.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat7.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat7.xyz = u_xlat7.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xyz, saturate(u_xlat22), level(0.0));
        u_xlat22 = dot(u_xlat8, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat12)).x;
    u_xlat22 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat12 = u_xlat22 * u_xlat12;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat32), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 11 sampler slot 7

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    float3 u_xlat12;
    float3 u_xlat13;
    float u_xlat18;
    float2 u_xlat22;
    float2 u_xlat23;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat2.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat28 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat29);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat22.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat23.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat29 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat7.z = sqrt(u_xlat29);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat22.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat29 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat4.z = sqrt(u_xlat29);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat29 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat7.z = sqrt(u_xlat29);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat23.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat5.z = sqrt(u_xlat29);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat29 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat5.xyz = u_xlat22.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat22.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat7.xyz = u_xlat22.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat22.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat8.xyz = u_xlat22.xxx * u_xlat8.xyz;
    u_xlat13.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat13.xyz);
    u_xlat4.xyz = fma(float3(u_xlat29), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat29 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb30 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb30){
        u_xlatb30 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb30)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat30 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat31 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat30, u_xlat31);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat30 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat30 * u_xlat3.x;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat12.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12.x = rsqrt(u_xlat12.x);
    u_xlat12.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat29), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat6.xyz;
    u_xlat29 = (-u_xlat6.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat2.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat12.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat12.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat12.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat2.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat11, u_xlat18, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat2.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat4.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 2D Texture "_Normal0" to slot 5 sampler slot 7
Set 2D Texture "_Normal1" to slot 6 sampler slot 8
Set 2D Texture "_Normal2" to slot 7 sampler slot 9
Set 2D Texture "_Normal3" to slot 8 sampler slot 10
Set 3D Texture "unity_ProbeVolumeSH" to slot 9 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 10 sampler slot 6

Constant Buffer "FGlobals" (304 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 176
  Vector4 _Splat0_ST at 192
  Vector4 _Splat1_ST at 208
  Vector4 _Splat2_ST at 224
  Vector4 _Splat3_ST at 240
  Float _NormalScale0 at 256
  Float _NormalScale1 at 260
  Float _NormalScale2 at 264
  Float _NormalScale3 at 268
  Float _Metallic0 at 272
  Float _Metallic1 at 276
  Float _Metallic2 at 280
  Float _Metallic3 at 284
  Float _Smoothness0 at 288
  Float _Smoothness1 at 292
  Float _Smoothness2 at 296
  Float _Smoothness3 at 300
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(9) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat18;
    float2 u_xlat19;
    float2 u_xlat20;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat25 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat25 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat19.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat20.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat19.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat27 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat3.z = sqrt(u_xlat27);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat27 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat6.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat27 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat4.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat19.x = u_xlat3.z + 9.99999975e-06;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat4.yzx * float3(0.0, 0.0, 1.0);
    u_xlat6.xyz = fma(u_xlat4.zxy, float3(1.0, 0.0, 0.0), (-u_xlat6.xyz));
    u_xlat27 = dot(u_xlat6.xz, u_xlat6.xz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat6.xyz = float3(u_xlat27) * u_xlat6.xyz;
    u_xlat7.xyz = u_xlat4.zxy * u_xlat6.yzx;
    u_xlat7.xyz = fma(u_xlat6.zxy, u_xlat4.yzx, (-u_xlat7.xyz));
    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat7.xyz = float3(u_xlat27) * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
    u_xlat3.xyw = fma(u_xlat3.xxx, u_xlat6.xyz, u_xlat7.xyz);
    u_xlat3.xyz = fma(u_xlat19.xxx, u_xlat4.xyz, u_xlat3.xyw);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.xyz = (bool(u_xlatb10)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat10.xyz = u_xlat10.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat10.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10.x = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat18, u_xlat10.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat10.x = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10.x = clamp(u_xlat10.x, 0.0f, 1.0f);
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3.xyz = float3(u_xlat18) * u_xlat4.xyz;
    u_xlat10.xyz = u_xlat10.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, u_xlat2.xx);
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat1.x) + 1.0;
    u_xlat17 = u_xlat16 * u_xlat16;
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat16 = u_xlat16 * u_xlat17;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat17 = -abs(u_xlat24) + 1.0;
    u_xlat3.x = u_xlat17 * u_xlat17;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat17 = u_xlat17 * u_xlat3.x;
    u_xlat8.x = fma(u_xlat8.x, u_xlat17, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat2.x * u_xlat2.x;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat17 = (-u_xlat16) + 1.0;
    u_xlat2.x = fma(abs(u_xlat24), u_xlat17, u_xlat16);
    u_xlat17 = fma(u_xlat1.x, u_xlat17, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat17;
    u_xlat24 = fma(u_xlat1.x, u_xlat2.x, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat17 = fma(u_xlat9, u_xlat16, (-u_xlat9));
    u_xlat9 = fma(u_xlat17, u_xlat9, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat9 = fma(u_xlat9, u_xlat9, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat9;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat1.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat10.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SPOT _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 12 sampler slot 8

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    bool u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    float3 u_xlat12;
    float3 u_xlat13;
    float2 u_xlat14;
    float u_xlat18;
    float2 u_xlat22;
    float2 u_xlat23;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    bool u_xlatb31;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat2.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat28 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat29);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat22.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat23.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat29 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat7.z = sqrt(u_xlat29);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat22.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat29 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat4.z = sqrt(u_xlat29);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat29 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat7.z = sqrt(u_xlat29);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat23.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat5.z = sqrt(u_xlat29);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat29 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat5.xyz = u_xlat22.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat22.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat7.xyz = u_xlat22.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat22.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat8.xyz = u_xlat22.xxx * u_xlat8.xyz;
    u_xlat13.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat13.xyz);
    u_xlat4.xyz = fma(float3(u_xlat29), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat29 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat3);
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat3);
    u_xlat3 = u_xlat3 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb31 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb31){
        u_xlatb31 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb31)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat31 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat14.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat31, u_xlat14.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat31 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat31 = clamp(u_xlat31, 0.0f, 1.0f);
    u_xlatb5 = 0.0<u_xlat3.z;
    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
    u_xlat14.xy = u_xlat3.xy / u_xlat3.ww;
    u_xlat14.xy = u_xlat14.xy + float2(0.5, 0.5);
    u_xlat30 = _LightTexture0.sample(sampler_LightTexture0, u_xlat14.xy).w;
    u_xlat30 = u_xlat30 * u_xlat5.x;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat3.x * u_xlat30;
    u_xlat3.x = u_xlat31 * u_xlat3.x;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat12.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12.x = rsqrt(u_xlat12.x);
    u_xlat12.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat29), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat6.xyz;
    u_xlat29 = (-u_xlat6.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat2.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat12.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat12.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat12.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat2.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat11, u_xlat18, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat2.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat4.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set 2D Texture "_LightTextureB0" to slot 9 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 10 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 12 sampler slot 8

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(9) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    float3 u_xlat12;
    float3 u_xlat13;
    float u_xlat18;
    float2 u_xlat22;
    float2 u_xlat23;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat2.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat28 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat29);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat22.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat23.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat29 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat7.z = sqrt(u_xlat29);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat22.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat29 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat4.z = sqrt(u_xlat29);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat29 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat7.z = sqrt(u_xlat29);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat23.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat5.z = sqrt(u_xlat29);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat29 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat5.xyz = u_xlat22.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat22.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat7.xyz = u_xlat22.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat22.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat8.xyz = u_xlat22.xxx * u_xlat8.xyz;
    u_xlat13.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat13.xyz);
    u_xlat4.xyz = fma(float3(u_xlat29), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat29 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb30 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb30){
        u_xlatb30 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb30)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat30 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat31 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat30, u_xlat31);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat30 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat31)).x;
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat3.x = u_xlat3.x * u_xlat31;
    u_xlat3.x = u_xlat30 * u_xlat3.x;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat12.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12.x = rsqrt(u_xlat12.x);
    u_xlat12.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat29), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat6.xyz;
    u_xlat29 = (-u_xlat6.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat2.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat12.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat12.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat12.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat2.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat11, u_xlat18, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat2.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat4.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE INSTANCING_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 11 sampler slot 7

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat18;
    float2 u_xlat19;
    float2 u_xlat20;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat25 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat25 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat19.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat20.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat19.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat27 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat3.z = sqrt(u_xlat27);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat27 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat6.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat27 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat4.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat19.x = u_xlat3.z + 9.99999975e-06;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat4.yzx * float3(0.0, 0.0, 1.0);
    u_xlat6.xyz = fma(u_xlat4.zxy, float3(1.0, 0.0, 0.0), (-u_xlat6.xyz));
    u_xlat27 = dot(u_xlat6.xz, u_xlat6.xz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat6.xyz = float3(u_xlat27) * u_xlat6.xyz;
    u_xlat7.xyz = u_xlat4.zxy * u_xlat6.yzx;
    u_xlat7.xyz = fma(u_xlat6.zxy, u_xlat4.yzx, (-u_xlat7.xyz));
    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat7.xyz = float3(u_xlat27) * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
    u_xlat3.xyw = fma(u_xlat3.xxx, u_xlat6.xyz, u_xlat7.xyz);
    u_xlat3.xyz = fma(u_xlat19.xxx, u_xlat4.xyz, u_xlat3.xyw);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat10.xy = input.TEXCOORD3.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat10.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD3.xx, u_xlat10.xy);
    u_xlat10.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD3.zz, u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb26 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb26){
        u_xlatb26 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb26)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat26 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat27 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat26, u_xlat27);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat26 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat10.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat10.xy).w;
    u_xlat10.x = u_xlat26 * u_xlat10.x;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3.xyz = float3(u_xlat18) * u_xlat4.xyz;
    u_xlat10.xyz = u_xlat10.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, u_xlat2.xx);
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat1.x) + 1.0;
    u_xlat17 = u_xlat16 * u_xlat16;
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat16 = u_xlat16 * u_xlat17;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat17 = -abs(u_xlat24) + 1.0;
    u_xlat3.x = u_xlat17 * u_xlat17;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat17 = u_xlat17 * u_xlat3.x;
    u_xlat8.x = fma(u_xlat8.x, u_xlat17, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat2.x * u_xlat2.x;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat17 = (-u_xlat16) + 1.0;
    u_xlat2.x = fma(abs(u_xlat24), u_xlat17, u_xlat16);
    u_xlat17 = fma(u_xlat1.x, u_xlat17, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat17;
    u_xlat24 = fma(u_xlat1.x, u_xlat2.x, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat17 = fma(u_xlat9, u_xlat16, (-u_xlat9));
    u_xlat9 = fma(u_xlat17, u_xlat9, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat9 = fma(u_xlat9, u_xlat9, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat9;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat1.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat10.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH SPOT _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_Normal0" to slot 5 sampler slot 10
Set 2D Texture "_Normal1" to slot 6 sampler slot 11
Set 2D Texture "_Normal2" to slot 7 sampler slot 12
Set 2D Texture "_Normal3" to slot 8 sampler slot 13
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 12 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 13 sampler slot 9

Constant Buffer "FGlobals" (720 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 528
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _Control_TexelSize at 592
  Vector4 _Splat0_ST at 608
  Vector4 _Splat1_ST at 624
  Vector4 _Splat2_ST at 640
  Vector4 _Splat3_ST at 656
  Float _NormalScale0 at 672
  Float _NormalScale1 at 676
  Float _NormalScale2 at 680
  Float _NormalScale3 at 684
  Float _Metallic0 at 688
  Float _Metallic1 at 692
  Float _Metallic2 at 696
  Float _Metallic3 at 700
  Float _Smoothness0 at 704
  Float _Smoothness1 at 708
  Float _Smoothness2 at 712
  Float _Smoothness3 at 716
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    sampler sampler_Normal0 [[ sampler (10) ]],
    sampler sampler_Normal1 [[ sampler (11) ]],
    sampler sampler_Normal2 [[ sampler (12) ]],
    sampler sampler_Normal3 [[ sampler (13) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(12) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float3 u_xlat15;
    float u_xlat20;
    float u_xlat22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = u_xlat5.z + 9.99999975e-06;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
    u_xlat8.xyz = u_xlat6.yzx * float3(0.0, 0.0, 1.0);
    u_xlat8.xyz = fma(u_xlat6.zxy, float3(1.0, 0.0, 0.0), (-u_xlat8.xyz));
    u_xlat33 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat6.zxy * u_xlat8.yzx;
    u_xlat9.xyz = fma(u_xlat8.zxy, u_xlat6.yzx, (-u_xlat9.xyz));
    u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat9.xyz = float3(u_xlat33) * u_xlat9.xyz;
    u_xlat15.xyz = u_xlat5.yyy * u_xlat9.xyz;
    u_xlat5.xyz = fma(u_xlat5.xxx, u_xlat8.xyz, u_xlat15.xyz);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat6.xyz, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat6 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD3.xxxx, u_xlat6);
    u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD3.zzzz, u_xlat6);
    u_xlat6 = u_xlat6 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
    u_xlat22 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlatb12 = 0.0<u_xlat4.z;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat22 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat12 = u_xlat22 * u_xlat12;
    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat22)).x;
    u_xlat12 = u_xlat22 * u_xlat12;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH SHADOWS_SOFT SPOT _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_Normal0" to slot 5 sampler slot 10
Set 2D Texture "_Normal1" to slot 6 sampler slot 11
Set 2D Texture "_Normal2" to slot 7 sampler slot 12
Set 2D Texture "_Normal3" to slot 8 sampler slot 13
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 12 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 13 sampler slot 9

Constant Buffer "FGlobals" (736 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 544
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _ShadowMapTexture_TexelSize at 528
  Vector4 _Control_TexelSize at 608
  Vector4 _Splat0_ST at 624
  Vector4 _Splat1_ST at 640
  Vector4 _Splat2_ST at 656
  Vector4 _Splat3_ST at 672
  Float _NormalScale0 at 688
  Float _NormalScale1 at 692
  Float _NormalScale2 at 696
  Float _NormalScale3 at 700
  Float _Metallic0 at 704
  Float _Metallic1 at 708
  Float _Metallic2 at 712
  Float _Metallic3 at 716
  Float _Smoothness0 at 720
  Float _Smoothness1 at 724
  Float _Smoothness2 at 728
  Float _Smoothness3 at 732
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _ShadowMapTexture_TexelSize;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    sampler sampler_Normal0 [[ sampler (10) ]],
    sampler sampler_Normal1 [[ sampler (11) ]],
    sampler sampler_Normal2 [[ sampler (12) ]],
    sampler sampler_Normal3 [[ sampler (13) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(12) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float4 u_xlat12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat16;
    float3 u_xlat18;
    float u_xlat26;
    float u_xlat28;
    bool u_xlatb28;
    float2 u_xlat31;
    float2 u_xlat32;
    float2 u_xlat34;
    float u_xlat39;
    bool u_xlatb39;
    float u_xlat40;
    float u_xlat41;
    float u_xlat42;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat40 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat41);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat31.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat32.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat41 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat8.z = sqrt(u_xlat41);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat31.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat41 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat5.z = sqrt(u_xlat41);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat41 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat8.z = sqrt(u_xlat41);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat32.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat41 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat6.z = sqrt(u_xlat41);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat41 = u_xlat5.z + 9.99999975e-06;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat6.xyz = float3(u_xlat42) * u_xlat6.xyz;
    u_xlat8.xyz = u_xlat6.yzx * float3(0.0, 0.0, 1.0);
    u_xlat8.xyz = fma(u_xlat6.zxy, float3(1.0, 0.0, 0.0), (-u_xlat8.xyz));
    u_xlat42 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat8.xyz = float3(u_xlat42) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat6.zxy * u_xlat8.yzx;
    u_xlat9.xyz = fma(u_xlat8.zxy, u_xlat6.yzx, (-u_xlat9.xyz));
    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat9.xyz = float3(u_xlat42) * u_xlat9.xyz;
    u_xlat18.xyz = u_xlat5.yyy * u_xlat9.xyz;
    u_xlat5.xyz = fma(u_xlat5.xxx, u_xlat8.xyz, u_xlat18.xyz);
    u_xlat5.xyz = fma(float3(u_xlat41), u_xlat6.xyz, u_xlat5.xyz);
    u_xlat41 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat15 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = (-u_xlat2.x) + u_xlat15;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat15, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb15 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat15 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat28 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat28, u_xlat15);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat15 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlatb28 = u_xlat2.x<0.99000001;
    if(u_xlatb28){
        u_xlat6 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD3.xxxx, u_xlat6);
        u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD3.zzzz, u_xlat6);
        u_xlat6 = u_xlat6 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
        u_xlat8.xy = fma(u_xlat6.xy, FGlobals._ShadowMapTexture_TexelSize.zw, float2(0.5, 0.5));
        u_xlat8.xy = floor(u_xlat8.xy);
        u_xlat6.xy = fma(u_xlat6.xy, FGlobals._ShadowMapTexture_TexelSize.zw, (-u_xlat8.xy));
        u_xlat9 = u_xlat6.xxyy + float4(0.5, 1.0, 0.5, 1.0);
        u_xlat10.xw = u_xlat9.xz * u_xlat9.xz;
        u_xlat34.xy = fma(u_xlat10.xw, float2(0.5, 0.5), (-u_xlat6.xy));
        u_xlat9.xz = (-u_xlat6.xy) + float2(1.0, 1.0);
        u_xlat11.xy = min(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat9.xz = fma((-u_xlat11.xy), u_xlat11.xy, u_xlat9.xz);
        u_xlat6.xy = max(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat6.xy = fma((-u_xlat6.xy), u_xlat6.xy, u_xlat9.yw);
        u_xlat11.x = u_xlat34.x;
        u_xlat11.y = u_xlat9.x;
        u_xlat11.z = u_xlat6.x;
        u_xlat11.w = u_xlat10.x;
        u_xlat11 = u_xlat11 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10.x = u_xlat34.y;
        u_xlat10.y = u_xlat9.z;
        u_xlat10.z = u_xlat6.y;
        u_xlat9 = u_xlat10 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10 = u_xlat11.ywyw + u_xlat11.xzxz;
        u_xlat12 = u_xlat9.yyww + u_xlat9.xxzz;
        u_xlat6.xy = u_xlat11.yw / u_xlat10.zw;
        u_xlat6.xy = u_xlat6.xy + float2(-1.5, 0.5);
        u_xlat34.xy = u_xlat9.yw / u_xlat12.yw;
        u_xlat34.xy = u_xlat34.xy + float2(-1.5, 0.5);
        u_xlat9.xy = u_xlat6.xy * FGlobals._ShadowMapTexture_TexelSize.xx;
        u_xlat9.zw = u_xlat34.xy * FGlobals._ShadowMapTexture_TexelSize.yy;
        u_xlat10 = u_xlat10 * u_xlat12;
        u_xlat11 = fma(u_xlat8.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat9.xzyz);
        u_xlat28 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat11.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat11.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat42 = u_xlat42 * u_xlat10.y;
        u_xlat28 = fma(u_xlat10.x, u_xlat28, u_xlat42);
        u_xlat8 = fma(u_xlat8.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat9.xwyw);
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat28 = fma(u_xlat10.z, u_xlat42, u_xlat28);
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat28 = fma(u_xlat10.w, u_xlat42, u_xlat28);
        u_xlat42 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat28 = fma(u_xlat28, u_xlat42, FGlobals._LightShadowData.x);
    } else {
        u_xlat28 = 1.0;
    }
    u_xlat15 = (-u_xlat28) + u_xlat15;
    u_xlat2.x = fma(u_xlat2.x, u_xlat15, u_xlat28);
    u_xlatb15 = 0.0<u_xlat4.z;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat28 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat28)).x;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat2.x = u_xlat2.x * u_xlat15;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat41), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat41) * u_xlat7.xyz;
    u_xlat41 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), u_xlat3.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat26 * u_xlat26;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat1.x;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat1.x = -abs(u_xlat39) + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat14;
    u_xlat13.x = fma(u_xlat13.x, u_xlat1.x, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat1.x = (-u_xlat26) + 1.0;
    u_xlat14 = fma(abs(u_xlat39), u_xlat1.x, u_xlat26);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat1.x;
    u_xlat39 = fma(u_xlat3.x, u_xlat14, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat26 = u_xlat26 * u_xlat26;
    u_xlat1.x = fma(u_xlat16, u_xlat26, (-u_xlat16));
    u_xlat1.x = fma(u_xlat1.x, u_xlat16, 1.0);
    u_xlat26 = u_xlat26 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat26 = u_xlat26 / u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat39;
    u_xlat26 = u_xlat26 * 3.14159274;
    u_xlat26 = max(u_xlat26, 9.99999975e-05);
    u_xlat13.y = sqrt(u_xlat26);
    u_xlat13.xy = u_xlat3.xx * u_xlat13.xy;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb39 = u_xlat39!=0.0;
    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
    u_xlat26 = u_xlat39 * u_xlat13.y;
    u_xlat1.xyz = u_xlat13.xxx * u_xlat2.xyz;
    u_xlat13.xyz = u_xlat2.xyz * float3(u_xlat26);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 2
Set 2D Texture "_Splat0" to slot 1 sampler slot 3
Set 2D Texture "_Splat1" to slot 2 sampler slot 4
Set 2D Texture "_Splat2" to slot 3 sampler slot 5
Set 2D Texture "_Splat3" to slot 4 sampler slot 6
Set 2D Texture "_Normal0" to slot 5 sampler slot 8
Set 2D Texture "_Normal1" to slot 6 sampler slot 9
Set 2D Texture "_Normal2" to slot 7 sampler slot 10
Set 2D Texture "_Normal3" to slot 8 sampler slot 11
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 11 sampler slot 7

Constant Buffer "FGlobals" (400 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 272
  Vector4 _Splat0_ST at 288
  Vector4 _Splat1_ST at 304
  Vector4 _Splat2_ST at 320
  Vector4 _Splat3_ST at 336
  Float _NormalScale0 at 352
  Float _NormalScale1 at 356
  Float _NormalScale2 at 360
  Float _NormalScale3 at 364
  Float _Metallic0 at 368
  Float _Metallic1 at 372
  Float _Metallic2 at 376
  Float _Metallic3 at 380
  Float _Smoothness0 at 384
  Float _Smoothness1 at 388
  Float _Smoothness2 at 392
  Float _Smoothness3 at 396
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat18;
    bool u_xlatb18;
    float2 u_xlat19;
    float2 u_xlat20;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat25 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat25 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat19.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat20.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat19.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat27 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat3.z = sqrt(u_xlat27);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat27 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat6.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat27 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat4.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat19.x = u_xlat3.z + 9.99999975e-06;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat4.yzx * float3(0.0, 0.0, 1.0);
    u_xlat6.xyz = fma(u_xlat4.zxy, float3(1.0, 0.0, 0.0), (-u_xlat6.xyz));
    u_xlat27 = dot(u_xlat6.xz, u_xlat6.xz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat6.xyz = float3(u_xlat27) * u_xlat6.xyz;
    u_xlat7.xyz = u_xlat4.zxy * u_xlat6.yzx;
    u_xlat7.xyz = fma(u_xlat6.zxy, u_xlat4.yzx, (-u_xlat7.xyz));
    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat7.xyz = float3(u_xlat27) * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
    u_xlat3.xyw = fma(u_xlat3.xxx, u_xlat6.xyz, u_xlat7.xyz);
    u_xlat3.xyz = fma(u_xlat19.xxx, u_xlat4.xyz, u_xlat3.xyw);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat10.x = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = (-u_xlat10.x) + u_xlat18;
    u_xlat10.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat18, u_xlat10.x);
    u_xlat10.x = fma(u_xlat10.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat10.x = clamp(u_xlat10.x, 0.0f, 1.0f);
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat26 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat26, u_xlat18);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat18 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat18 = clamp(u_xlat18, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat26 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat18 = (-u_xlat26) + u_xlat18;
    u_xlat10.x = fma(u_xlat10.x, u_xlat18, u_xlat26);
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3.xyz = float3(u_xlat18) * u_xlat4.xyz;
    u_xlat10.xyz = u_xlat10.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, u_xlat2.xx);
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat1.x) + 1.0;
    u_xlat17 = u_xlat16 * u_xlat16;
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat16 = u_xlat16 * u_xlat17;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat17 = -abs(u_xlat24) + 1.0;
    u_xlat3.x = u_xlat17 * u_xlat17;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat17 = u_xlat17 * u_xlat3.x;
    u_xlat8.x = fma(u_xlat8.x, u_xlat17, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat2.x * u_xlat2.x;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat17 = (-u_xlat16) + 1.0;
    u_xlat2.x = fma(abs(u_xlat24), u_xlat17, u_xlat16);
    u_xlat17 = fma(u_xlat1.x, u_xlat17, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat17;
    u_xlat24 = fma(u_xlat1.x, u_xlat2.x, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat17 = fma(u_xlat9, u_xlat16, (-u_xlat9));
    u_xlat9 = fma(u_xlat17, u_xlat9, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat9 = fma(u_xlat9, u_xlat9, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat9;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat1.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat10.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE INSTANCING_ON SHADOWS_SCREEN _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 12 sampler slot 8

Constant Buffer "FGlobals" (464 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Matrix4x4 unity_WorldToLight at 272
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 336
  Vector4 _Splat0_ST at 352
  Vector4 _Splat1_ST at 368
  Vector4 _Splat2_ST at 384
  Vector4 _Splat3_ST at 400
  Float _NormalScale0 at 416
  Float _NormalScale1 at 420
  Float _NormalScale2 at 424
  Float _NormalScale3 at 428
  Float _Metallic0 at 432
  Float _Metallic1 at 436
  Float _Metallic2 at 440
  Float _Metallic3 at 444
  Float _Smoothness0 at 448
  Float _Smoothness1 at 452
  Float _Smoothness2 at 456
  Float _Smoothness3 at 460
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    float u_xlat12;
    float u_xlat16;
    float u_xlat17;
    float u_xlat18;
    float2 u_xlat19;
    float2 u_xlat20;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    float u_xlat27;
    bool u_xlatb27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat25 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat25 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat19.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat20.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat19.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat27 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat3.z = sqrt(u_xlat27);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat27 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat6.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat27 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat4.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat19.x = u_xlat3.z + 9.99999975e-06;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat4.yzx * float3(0.0, 0.0, 1.0);
    u_xlat6.xyz = fma(u_xlat4.zxy, float3(1.0, 0.0, 0.0), (-u_xlat6.xyz));
    u_xlat27 = dot(u_xlat6.xz, u_xlat6.xz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat6.xyz = float3(u_xlat27) * u_xlat6.xyz;
    u_xlat7.xyz = u_xlat4.zxy * u_xlat6.yzx;
    u_xlat7.xyz = fma(u_xlat6.zxy, u_xlat4.yzx, (-u_xlat7.xyz));
    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat7.xyz = float3(u_xlat27) * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
    u_xlat3.xyw = fma(u_xlat3.xxx, u_xlat6.xyz, u_xlat7.xyz);
    u_xlat3.xyz = fma(u_xlat19.xxx, u_xlat4.xyz, u_xlat3.xyw);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat10.xy = input.TEXCOORD3.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat10.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD3.xx, u_xlat10.xy);
    u_xlat10.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD3.zz, u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat26 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat26) + u_xlat27;
    u_xlat26 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat27, u_xlat26);
    u_xlat26 = fma(u_xlat26, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlatb27 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb27){
        u_xlatb27 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat27 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat12 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat27, u_xlat12);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat27 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat27 = clamp(u_xlat27, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat27 = u_xlat27 + (-u_xlat4.x);
    u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat4.x);
    u_xlat10.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat10.xy).w;
    u_xlat10.x = u_xlat26 * u_xlat10.x;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3.xyz = float3(u_xlat18) * u_xlat4.xyz;
    u_xlat10.xyz = u_xlat10.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, u_xlat2.xx);
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat1.x) + 1.0;
    u_xlat17 = u_xlat16 * u_xlat16;
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat16 = u_xlat16 * u_xlat17;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat17 = -abs(u_xlat24) + 1.0;
    u_xlat3.x = u_xlat17 * u_xlat17;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat17 = u_xlat17 * u_xlat3.x;
    u_xlat8.x = fma(u_xlat8.x, u_xlat17, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat2.x * u_xlat2.x;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat17 = (-u_xlat16) + 1.0;
    u_xlat2.x = fma(abs(u_xlat24), u_xlat17, u_xlat16);
    u_xlat17 = fma(u_xlat1.x, u_xlat17, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat17;
    u_xlat24 = fma(u_xlat1.x, u_xlat2.x, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat17 = fma(u_xlat9, u_xlat16, (-u_xlat9));
    u_xlat9 = fma(u_xlat17, u_xlat9, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat9 = fma(u_xlat9, u_xlat9, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat9;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat1.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat10.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT SHADOWS_CUBE _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 11 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 12 sampler slot 8

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(11) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float3 u_xlat15;
    float u_xlat20;
    float u_xlat22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = u_xlat5.z + 9.99999975e-06;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
    u_xlat8.xyz = u_xlat6.yzx * float3(0.0, 0.0, 1.0);
    u_xlat8.xyz = fma(u_xlat6.zxy, float3(1.0, 0.0, 0.0), (-u_xlat8.xyz));
    u_xlat33 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat6.zxy * u_xlat8.yzx;
    u_xlat9.xyz = fma(u_xlat8.zxy, u_xlat6.yzx, (-u_xlat9.xyz));
    u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat9.xyz = float3(u_xlat33) * u_xlat9.xyz;
    u_xlat15.xyz = u_xlat5.yyy * u_xlat9.xyz;
    u_xlat5.xyz = fma(u_xlat5.xxx, u_xlat8.xyz, u_xlat15.xyz);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat6.xyz, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat22 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat22 = max(abs(u_xlat6.z), u_xlat22);
    u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
    u_xlat22 = max(u_xlat22, 9.99999975e-06);
    u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
    u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
    u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat22), level(0.0));
    u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat12)).x;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT SHADOWS_CUBE SHADOWS_SOFT _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 3
Set 2D Texture "_Splat0" to slot 1 sampler slot 4
Set 2D Texture "_Splat1" to slot 2 sampler slot 5
Set 2D Texture "_Splat2" to slot 3 sampler slot 6
Set 2D Texture "_Splat3" to slot 4 sampler slot 7
Set 2D Texture "_Normal0" to slot 5 sampler slot 9
Set 2D Texture "_Normal1" to slot 6 sampler slot 10
Set 2D Texture "_Normal2" to slot 7 sampler slot 11
Set 2D Texture "_Normal3" to slot 8 sampler slot 12
Set 2D Texture "_LightTexture0" to slot 9 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 11 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 12 sampler slot 8

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(11) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float3 u_xlat15;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = u_xlat5.z + 9.99999975e-06;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
    u_xlat8.xyz = u_xlat6.yzx * float3(0.0, 0.0, 1.0);
    u_xlat8.xyz = fma(u_xlat6.zxy, float3(1.0, 0.0, 0.0), (-u_xlat8.xyz));
    u_xlat33 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat6.zxy * u_xlat8.yzx;
    u_xlat9.xyz = fma(u_xlat8.zxy, u_xlat6.yzx, (-u_xlat9.xyz));
    u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat9.xyz = float3(u_xlat33) * u_xlat9.xyz;
    u_xlat15.xyz = u_xlat5.yyy * u_xlat9.xyz;
    u_xlat5.xyz = fma(u_xlat5.xxx, u_xlat8.xyz, u_xlat15.xyz);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat6.xyz, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb22 = u_xlat2.x<0.99000001;
    if(u_xlatb22){
        u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat22 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat22 = max(abs(u_xlat6.z), u_xlat22);
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
        u_xlat22 = max(u_xlat22, 9.99999975e-06);
        u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
        u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat8.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat22), level(0.0));
        u_xlat22 = dot(u_xlat8, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat12)).x;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE SHADOWS_CUBE _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_Normal0" to slot 5 sampler slot 10
Set 2D Texture "_Normal1" to slot 6 sampler slot 11
Set 2D Texture "_Normal2" to slot 7 sampler slot 12
Set 2D Texture "_Normal3" to slot 8 sampler slot 13
Set 2D Texture "_LightTextureB0" to slot 9 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 12 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 13 sampler slot 9

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    sampler sampler_Normal0 [[ sampler (10) ]],
    sampler sampler_Normal1 [[ sampler (11) ]],
    sampler sampler_Normal2 [[ sampler (12) ]],
    sampler sampler_Normal3 [[ sampler (13) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(9) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(12) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float3 u_xlat15;
    float u_xlat20;
    float u_xlat22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = u_xlat5.z + 9.99999975e-06;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
    u_xlat8.xyz = u_xlat6.yzx * float3(0.0, 0.0, 1.0);
    u_xlat8.xyz = fma(u_xlat6.zxy, float3(1.0, 0.0, 0.0), (-u_xlat8.xyz));
    u_xlat33 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat6.zxy * u_xlat8.yzx;
    u_xlat9.xyz = fma(u_xlat8.zxy, u_xlat6.yzx, (-u_xlat9.xyz));
    u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat9.xyz = float3(u_xlat33) * u_xlat9.xyz;
    u_xlat15.xyz = u_xlat5.yyy * u_xlat9.xyz;
    u_xlat5.xyz = fma(u_xlat5.xxx, u_xlat8.xyz, u_xlat15.xyz);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat6.xyz, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat22 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat22 = max(abs(u_xlat6.z), u_xlat22);
    u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
    u_xlat22 = max(u_xlat22, 9.99999975e-06);
    u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
    u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
    u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat22), level(0.0));
    u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat12)).x;
    u_xlat22 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat12 = u_xlat22 * u_xlat12;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 4
Set 2D Texture "_Splat0" to slot 1 sampler slot 5
Set 2D Texture "_Splat1" to slot 2 sampler slot 6
Set 2D Texture "_Splat2" to slot 3 sampler slot 7
Set 2D Texture "_Splat3" to slot 4 sampler slot 8
Set 2D Texture "_Normal0" to slot 5 sampler slot 10
Set 2D Texture "_Normal1" to slot 6 sampler slot 11
Set 2D Texture "_Normal2" to slot 7 sampler slot 12
Set 2D Texture "_Normal3" to slot 8 sampler slot 13
Set 2D Texture "_LightTextureB0" to slot 9 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 12 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 13 sampler slot 9

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    sampler sampler_Normal0 [[ sampler (10) ]],
    sampler sampler_Normal1 [[ sampler (11) ]],
    sampler sampler_Normal2 [[ sampler (12) ]],
    sampler sampler_Normal3 [[ sampler (13) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(9) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(12) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float3 u_xlat15;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = u_xlat5.z + 9.99999975e-06;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
    u_xlat8.xyz = u_xlat6.yzx * float3(0.0, 0.0, 1.0);
    u_xlat8.xyz = fma(u_xlat6.zxy, float3(1.0, 0.0, 0.0), (-u_xlat8.xyz));
    u_xlat33 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat6.zxy * u_xlat8.yzx;
    u_xlat9.xyz = fma(u_xlat8.zxy, u_xlat6.yzx, (-u_xlat9.xyz));
    u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat9.xyz = float3(u_xlat33) * u_xlat9.xyz;
    u_xlat15.xyz = u_xlat5.yyy * u_xlat9.xyz;
    u_xlat5.xyz = fma(u_xlat5.xxx, u_xlat8.xyz, u_xlat15.xyz);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat6.xyz, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb22 = u_xlat2.x<0.99000001;
    if(u_xlatb22){
        u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat22 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat22 = max(abs(u_xlat6.z), u_xlat22);
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
        u_xlat22 = max(u_xlat22, 9.99999975e-06);
        u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
        u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat8.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat22), level(0.0));
        u_xlat22 = dot(u_xlat8, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat12)).x;
    u_xlat22 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat12 = u_xlat22 * u_xlat12;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 8
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 8 sampler slot 7

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    float u_xlat14;
    float2 u_xlat18;
    float2 u_xlat19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat26;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat22 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb22 = u_xlat22==0.0;
    if(((int(u_xlatb22) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat18.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat19.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat5.xyz = float3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb24)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat24 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat26 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat24, u_xlat26);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat24 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat24 * u_xlat3.x;
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat10.x = rsqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat23), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat23 = fma((-u_xlat23), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat10.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat10.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat10.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = fma(u_xlat7.x, u_xlat1.x, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat1.x = (-u_xlat14) + 1.0;
    u_xlat8 = fma(abs(u_xlat21), u_xlat1.x, u_xlat14);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = fma(u_xlat2.x, u_xlat8, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = fma(u_xlat9, u_xlat14, (-u_xlat9));
    u_xlat1.x = fma(u_xlat1.x, u_xlat9, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat4.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 7
Set 2D Texture "_Control" to slot 1
Set 2D Texture "_Splat0" to slot 2
Set 2D Texture "_Splat1" to slot 3
Set 2D Texture "_Splat2" to slot 4
Set 2D Texture "_Splat3" to slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 7 sampler slot 6

Constant Buffer "FGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 176
  Vector4 _Splat0_ST at 192
  Vector4 _Splat1_ST at 208
  Vector4 _Splat2_ST at 224
  Vector4 _Splat3_ST at 240
  Float _Metallic0 at 256
  Float _Metallic1 at 260
  Float _Metallic2 at 264
  Float _Metallic3 at 268
  Float _Smoothness0 at 272
  Float _Smoothness1 at 276
  Float _Smoothness2 at 280
  Float _Smoothness3 at 284
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (6) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (7) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    bool u_xlatb8;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    bool u_xlatb19;
    float u_xlat21;
    float u_xlat22;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat19 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb19 = u_xlat19==0.0;
    if(((int(u_xlatb19) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat4.xyz = float3(u_xlat22) * u_xlat4.xyz;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb8 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb8){
        u_xlatb8 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat8.xyz = (bool(u_xlatb8)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat8.xyz = u_xlat8.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat8.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat8.x = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat14 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat14, u_xlat8.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat8.x = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat14 = rsqrt(u_xlat14);
    u_xlat4.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SPOT _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 9
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 7 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 9 sampler slot 8

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    bool u_xlatb6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    float2 u_xlat13;
    float u_xlat14;
    float2 u_xlat18;
    float2 u_xlat19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat23;
    float u_xlat24;
    float u_xlat26;
    bool u_xlatb26;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat22 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb22 = u_xlat22==0.0;
    if(((int(u_xlatb22) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat18.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat19.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat5.xyz = float3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat3);
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat3);
    u_xlat3 = u_xlat3 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb26 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb26){
        u_xlatb26 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb26)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat26 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat13.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat26, u_xlat13.x);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat26 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlatb6 = 0.0<u_xlat3.z;
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat13.xy = u_xlat3.xy / u_xlat3.ww;
    u_xlat13.xy = u_xlat13.xy + float2(0.5, 0.5);
    u_xlat24 = _LightTexture0.sample(sampler_LightTexture0, u_xlat13.xy).w;
    u_xlat24 = u_xlat24 * u_xlat6.x;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat3.x * u_xlat24;
    u_xlat3.x = u_xlat26 * u_xlat3.x;
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat10.x = rsqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat23), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat23 = fma((-u_xlat23), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat10.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat10.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat10.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = fma(u_xlat7.x, u_xlat1.x, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat1.x = (-u_xlat14) + 1.0;
    u_xlat8 = fma(abs(u_xlat21), u_xlat1.x, u_xlat14);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = fma(u_xlat2.x, u_xlat8, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = fma(u_xlat9, u_xlat14, (-u_xlat9));
    u_xlat1.x = fma(u_xlat1.x, u_xlat9, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat4.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 9
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 7 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 9 sampler slot 8

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(6) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    float u_xlat14;
    float2 u_xlat18;
    float2 u_xlat19;
    float u_xlat21;
    bool u_xlatb21;
    float u_xlat22;
    bool u_xlatb22;
    float u_xlat23;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat26;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat1.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat22 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb22 = u_xlat22==0.0;
    if(((int(u_xlatb22) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat22 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat23 = u_xlat22 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat23);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat18.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat18.xy);
    u_xlat4 = u_xlat3.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat6 = u_xlat3.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat6;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat19.xy);
    u_xlat5 = u_xlat3.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat5.xyz = float3(u_xlat23) * u_xlat5.xyz;
    u_xlat23 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb24 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb24){
        u_xlatb24 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb24)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat24 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat26 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat24, u_xlat26);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat24 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat24 = clamp(u_xlat24, 0.0f, 1.0f);
    u_xlat26 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat26 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat26)).x;
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat3.x = u_xlat3.x * u_xlat26;
    u_xlat3.x = u_xlat24 * u_xlat3.x;
    u_xlat6.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat6.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat6.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat10.x = rsqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat6.xyz;
    u_xlat5.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat23), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat23 = fma((-u_xlat23), 0.779083729, 0.779083729);
    u_xlat4.xyz = float3(u_xlat23) * u_xlat4.xyz;
    u_xlat23 = (-u_xlat4.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat21), u_xlat2.xyz);
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = rsqrt(u_xlat21);
    u_xlat0.xyz = float3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(u_xlat10.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat10.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat10.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat7.x = u_xlat0.x * u_xlat0.x;
    u_xlat7.x = dot(u_xlat7.xx, float2(u_xlat23));
    u_xlat7.x = u_xlat7.x + -0.5;
    u_xlat14 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat1.x;
    u_xlat14 = fma(u_xlat7.x, u_xlat14, 1.0);
    u_xlat1.x = -abs(u_xlat21) + 1.0;
    u_xlat8 = u_xlat1.x * u_xlat1.x;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat1.x = u_xlat1.x * u_xlat8;
    u_xlat7.x = fma(u_xlat7.x, u_xlat1.x, 1.0);
    u_xlat7.x = u_xlat7.x * u_xlat14;
    u_xlat14 = u_xlat23 * u_xlat23;
    u_xlat14 = max(u_xlat14, 0.00200000009);
    u_xlat1.x = (-u_xlat14) + 1.0;
    u_xlat8 = fma(abs(u_xlat21), u_xlat1.x, u_xlat14);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat14);
    u_xlat21 = abs(u_xlat21) * u_xlat1.x;
    u_xlat21 = fma(u_xlat2.x, u_xlat8, u_xlat21);
    u_xlat21 = u_xlat21 + 9.99999975e-06;
    u_xlat21 = 0.5 / u_xlat21;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = fma(u_xlat9, u_xlat14, (-u_xlat9));
    u_xlat1.x = fma(u_xlat1.x, u_xlat9, 1.0);
    u_xlat14 = u_xlat14 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat14 = u_xlat14 / u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat21;
    u_xlat14 = u_xlat14 * 3.14159274;
    u_xlat14 = max(u_xlat14, 9.99999975e-05);
    u_xlat7.y = sqrt(u_xlat14);
    u_xlat7.xy = u_xlat2.xx * u_xlat7.xy;
    u_xlat21 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb21 = u_xlat21!=0.0;
    u_xlat21 = u_xlatb21 ? 1.0 : float(0.0);
    u_xlat14 = u_xlat21 * u_xlat7.y;
    u_xlat1.xyz = u_xlat7.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.xyz * float3(u_xlat14);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat7.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat4.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat22) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE INSTANCING_ON _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 8
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 8 sampler slot 7

Constant Buffer "FGlobals" (352 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _Metallic0 at 320
  Float _Metallic1 at 324
  Float _Metallic2 at 328
  Float _Metallic3 at 332
  Float _Smoothness0 at 336
  Float _Smoothness1 at 340
  Float _Smoothness2 at 344
  Float _Smoothness3 at 348
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    bool u_xlatb19;
    float u_xlat20;
    bool u_xlatb20;
    float u_xlat21;
    float u_xlat22;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat19 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb19 = u_xlat19==0.0;
    if(((int(u_xlatb19) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat4.xyz = float3(u_xlat22) * u_xlat4.xyz;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat8.xy = input.TEXCOORD3.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD3.xx, u_xlat8.xy);
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD3.zz, u_xlat8.xy);
    u_xlat8.xy = u_xlat8.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb20 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb20){
        u_xlatb20 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb20)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat20 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat20, u_xlat22);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat20 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlat8.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat8.xy).w;
    u_xlat8.x = u_xlat20 * u_xlat8.x;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat14 = rsqrt(u_xlat14);
    u_xlat4.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH SPOT _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 10
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 7 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 10 sampler slot 9

Constant Buffer "FGlobals" (704 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 528
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _Control_TexelSize at 592
  Vector4 _Splat0_ST at 608
  Vector4 _Splat1_ST at 624
  Vector4 _Splat2_ST at 640
  Vector4 _Splat3_ST at 656
  Float _Metallic0 at 672
  Float _Metallic1 at 676
  Float _Metallic2 at 680
  Float _Metallic3 at 684
  Float _Smoothness0 at 688
  Float _Smoothness1 at 692
  Float _Smoothness2 at 696
  Float _Smoothness3 at 700
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (10) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    bool u_xlatb25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat25 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb25 = u_xlat25==0.0;
    if(((int(u_xlatb25) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat21.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat22.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz;
    u_xlat26 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat7.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat10, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb10)) ? u_xlat7.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10 = fma(u_xlat7.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat7.x = max(u_xlat18, u_xlat10);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat10 = dot(u_xlat7, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat7 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat7 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD3.xxxx, u_xlat7);
    u_xlat7 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD3.zzzz, u_xlat7);
    u_xlat7 = u_xlat7 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat7.xyz = u_xlat7.xyz / u_xlat7.www;
    u_xlat18 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xy, saturate(u_xlat7.z), level(0.0));
    u_xlat27 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat18 = fma(u_xlat18, u_xlat27, FGlobals._LightShadowData.x);
    u_xlat10 = (-u_xlat18) + u_xlat10;
    u_xlat2.x = fma(u_xlat2.x, u_xlat10, u_xlat18);
    u_xlatb10 = 0.0<u_xlat4.z;
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat7.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat7.xy = u_xlat7.xy + float2(0.5, 0.5);
    u_xlat18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat7.xy).w;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat18)).x;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    u_xlat4.xyz = float3(u_xlat10) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat26), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat3.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat3.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat11, u_xlat16, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH SHADOWS_SOFT SPOT _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 10
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 7 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 10 sampler slot 9

Constant Buffer "FGlobals" (720 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 544
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _ShadowMapTexture_TexelSize at 528
  Vector4 _Control_TexelSize at 608
  Vector4 _Splat0_ST at 624
  Vector4 _Splat1_ST at 640
  Vector4 _Splat2_ST at 656
  Vector4 _Splat3_ST at 672
  Float _Metallic0 at 688
  Float _Metallic1 at 692
  Float _Metallic2 at 696
  Float _Metallic3 at 700
  Float _Smoothness0 at 704
  Float _Smoothness1 at 708
  Float _Smoothness2 at 712
  Float _Smoothness3 at 716
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _ShadowMapTexture_TexelSize;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (10) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float4 u_xlat12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat16;
    float u_xlat26;
    float u_xlat28;
    bool u_xlatb28;
    float2 u_xlat31;
    float2 u_xlat32;
    float2 u_xlat34;
    float u_xlat39;
    bool u_xlatb39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    float u_xlat42;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat2.xyz;
    u_xlat40 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb40 = u_xlat40==0.0;
    if(((int(u_xlatb40) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat40 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat41);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat31.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat32.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat41 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat41 = rsqrt(u_xlat41);
    u_xlat6.xyz = float3(u_xlat41) * u_xlat6.xyz;
    u_xlat41 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat7.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat15 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = (-u_xlat2.x) + u_xlat15;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat15, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb15 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb15)) ? u_xlat7.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat15 = fma(u_xlat7.y, 0.25, 0.75);
        u_xlat28 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat7.x = max(u_xlat28, u_xlat15);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat15 = dot(u_xlat7, FGlobals.unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlatb28 = u_xlat2.x<0.99000001;
    if(u_xlatb28){
        u_xlat7 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat7 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD3.xxxx, u_xlat7);
        u_xlat7 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD3.zzzz, u_xlat7);
        u_xlat7 = u_xlat7 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat7.xyz = u_xlat7.xyz / u_xlat7.www;
        u_xlat8.xy = fma(u_xlat7.xy, FGlobals._ShadowMapTexture_TexelSize.zw, float2(0.5, 0.5));
        u_xlat8.xy = floor(u_xlat8.xy);
        u_xlat7.xy = fma(u_xlat7.xy, FGlobals._ShadowMapTexture_TexelSize.zw, (-u_xlat8.xy));
        u_xlat9 = u_xlat7.xxyy + float4(0.5, 1.0, 0.5, 1.0);
        u_xlat10.xw = u_xlat9.xz * u_xlat9.xz;
        u_xlat34.xy = fma(u_xlat10.xw, float2(0.5, 0.5), (-u_xlat7.xy));
        u_xlat9.xz = (-u_xlat7.xy) + float2(1.0, 1.0);
        u_xlat11.xy = min(u_xlat7.xy, float2(0.0, 0.0));
        u_xlat9.xz = fma((-u_xlat11.xy), u_xlat11.xy, u_xlat9.xz);
        u_xlat7.xy = max(u_xlat7.xy, float2(0.0, 0.0));
        u_xlat7.xy = fma((-u_xlat7.xy), u_xlat7.xy, u_xlat9.yw);
        u_xlat11.x = u_xlat34.x;
        u_xlat11.y = u_xlat9.x;
        u_xlat11.z = u_xlat7.x;
        u_xlat11.w = u_xlat10.x;
        u_xlat11 = u_xlat11 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10.x = u_xlat34.y;
        u_xlat10.y = u_xlat9.z;
        u_xlat10.z = u_xlat7.y;
        u_xlat9 = u_xlat10 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10 = u_xlat11.ywyw + u_xlat11.xzxz;
        u_xlat12 = u_xlat9.yyww + u_xlat9.xxzz;
        u_xlat7.xy = u_xlat11.yw / u_xlat10.zw;
        u_xlat7.xy = u_xlat7.xy + float2(-1.5, 0.5);
        u_xlat34.xy = u_xlat9.yw / u_xlat12.yw;
        u_xlat34.xy = u_xlat34.xy + float2(-1.5, 0.5);
        u_xlat9.xy = u_xlat7.xy * FGlobals._ShadowMapTexture_TexelSize.xx;
        u_xlat9.zw = u_xlat34.xy * FGlobals._ShadowMapTexture_TexelSize.yy;
        u_xlat10 = u_xlat10 * u_xlat12;
        u_xlat11 = fma(u_xlat8.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat9.xzyz);
        u_xlat28 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat11.xy, saturate(u_xlat7.z), level(0.0));
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat11.zw, saturate(u_xlat7.z), level(0.0));
        u_xlat42 = u_xlat42 * u_xlat10.y;
        u_xlat28 = fma(u_xlat10.x, u_xlat28, u_xlat42);
        u_xlat8 = fma(u_xlat8.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat9.xwyw);
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xy, saturate(u_xlat7.z), level(0.0));
        u_xlat28 = fma(u_xlat10.z, u_xlat42, u_xlat28);
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.zw, saturate(u_xlat7.z), level(0.0));
        u_xlat28 = fma(u_xlat10.w, u_xlat42, u_xlat28);
        u_xlat42 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat28 = fma(u_xlat28, u_xlat42, FGlobals._LightShadowData.x);
    } else {
        u_xlat28 = 1.0;
    }
    u_xlat15 = (-u_xlat28) + u_xlat15;
    u_xlat2.x = fma(u_xlat2.x, u_xlat15, u_xlat28);
    u_xlatb15 = 0.0<u_xlat4.z;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat7.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat7.xy = u_xlat7.xy + float2(0.5, 0.5);
    u_xlat28 = _LightTexture0.sample(sampler_LightTexture0, u_xlat7.xy).w;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat28)).x;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat2.x = u_xlat2.x * u_xlat15;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat41), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat41) * u_xlat5.xyz;
    u_xlat41 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), u_xlat3.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat26 * u_xlat26;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat1.x;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat1.x = -abs(u_xlat39) + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat14;
    u_xlat13.x = fma(u_xlat13.x, u_xlat1.x, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat1.x = (-u_xlat26) + 1.0;
    u_xlat14 = fma(abs(u_xlat39), u_xlat1.x, u_xlat26);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat1.x;
    u_xlat39 = fma(u_xlat3.x, u_xlat14, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat26 = u_xlat26 * u_xlat26;
    u_xlat1.x = fma(u_xlat16, u_xlat26, (-u_xlat16));
    u_xlat1.x = fma(u_xlat1.x, u_xlat16, 1.0);
    u_xlat26 = u_xlat26 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat26 = u_xlat26 / u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat39;
    u_xlat26 = u_xlat26 * 3.14159274;
    u_xlat26 = max(u_xlat26, 9.99999975e-05);
    u_xlat13.y = sqrt(u_xlat26);
    u_xlat13.xy = u_xlat3.xx * u_xlat13.xy;
    u_xlat39 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb39 = u_xlat39!=0.0;
    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
    u_xlat26 = u_xlat39 * u_xlat13.y;
    u_xlat1.xyz = u_xlat13.xxx * u_xlat2.xyz;
    u_xlat13.xyz = u_xlat2.xyz * float3(u_xlat26);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 8
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_ShadowMapTexture" to slot 6 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 8 sampler slot 7

Constant Buffer "FGlobals" (384 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 272
  Vector4 _Splat0_ST at 288
  Vector4 _Splat1_ST at 304
  Vector4 _Splat2_ST at 320
  Vector4 _Splat3_ST at 336
  Float _Metallic0 at 352
  Float _Metallic1 at 356
  Float _Metallic2 at 360
  Float _Metallic3 at 364
  Float _Smoothness0 at 368
  Float _Smoothness1 at 372
  Float _Smoothness2 at 376
  Float _Smoothness3 at 380
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (8) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    bool u_xlatb14;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    bool u_xlatb19;
    float u_xlat20;
    float u_xlat21;
    float u_xlat22;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat19 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb19 = u_xlat19==0.0;
    if(((int(u_xlatb19) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat4.xyz = float3(u_xlat22) * u_xlat4.xyz;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat5.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat8.x = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat14 = sqrt(u_xlat14);
    u_xlat14 = (-u_xlat8.x) + u_xlat14;
    u_xlat8.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat14, u_xlat8.x);
    u_xlat8.x = fma(u_xlat8.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
    u_xlatb14 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb14){
        u_xlatb14 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb14)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat14 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat20 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat20, u_xlat14);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat14 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat14 = clamp(u_xlat14, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat20 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat14 = (-u_xlat20) + u_xlat14;
    u_xlat8.x = fma(u_xlat8.x, u_xlat14, u_xlat20);
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat14 = rsqrt(u_xlat14);
    u_xlat4.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE INSTANCING_ON SHADOWS_SCREEN _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 9
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_ShadowMapTexture" to slot 6 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 7 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 9 sampler slot 8

Constant Buffer "FGlobals" (448 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Matrix4x4 unity_WorldToLight at 272
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 336
  Vector4 _Splat0_ST at 352
  Vector4 _Splat1_ST at 368
  Vector4 _Splat2_ST at 384
  Vector4 _Splat3_ST at 400
  Float _Metallic0 at 416
  Float _Metallic1 at 420
  Float _Metallic2 at 424
  Float _Metallic3 at 428
  Float _Smoothness0 at 432
  Float _Smoothness1 at 436
  Float _Smoothness2 at 440
  Float _Smoothness3 at 444
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(6) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float3 u_xlat6;
    float u_xlat7;
    float3 u_xlat8;
    float u_xlat11;
    float u_xlat12;
    float u_xlat13;
    float u_xlat14;
    float2 u_xlat15;
    float2 u_xlat16;
    float u_xlat18;
    bool u_xlatb18;
    float u_xlat19;
    bool u_xlatb19;
    float u_xlat20;
    float u_xlat21;
    float u_xlat22;
    bool u_xlatb22;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat19 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb19 = u_xlat19==0.0;
    if(((int(u_xlatb19) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat19 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat19 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat15.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat15.xy);
    u_xlat3 = u_xlat2.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat3 = u_xlat3 + u_xlat5;
    u_xlat4 = _Splat3.sample(sampler_Splat3, u_xlat16.xy);
    u_xlat4 = u_xlat2.wwww * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness3;
    u_xlat3 = u_xlat3 + u_xlat4;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat4.xyz = float3(u_xlat22) * u_xlat4.xyz;
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat8.xy = input.TEXCOORD3.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD3.xx, u_xlat8.xy);
    u_xlat8.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD3.zz, u_xlat8.xy);
    u_xlat8.xy = u_xlat8.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat5.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat5.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat5.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat20 = dot(u_xlat0.xyz, u_xlat5.xyz);
    u_xlat5.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22 = sqrt(u_xlat22);
    u_xlat22 = (-u_xlat20) + u_xlat22;
    u_xlat20 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat22, u_xlat20);
    u_xlat20 = fma(u_xlat20, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat20 = clamp(u_xlat20, 0.0f, 1.0f);
    u_xlatb22 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb22){
        u_xlatb22 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb22)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat22 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat11 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat22, u_xlat11);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat22 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat22 = clamp(u_xlat22, 0.0f, 1.0f);
    u_xlat5.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat5.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat5.xy).x;
    u_xlat22 = u_xlat22 + (-u_xlat5.x);
    u_xlat20 = fma(u_xlat20, u_xlat22, u_xlat5.x);
    u_xlat8.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat8.xy).w;
    u_xlat8.x = u_xlat20 * u_xlat8.x;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat14 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat14 = rsqrt(u_xlat14);
    u_xlat4.xyz = float3(u_xlat14) * u_xlat5.xyz;
    u_xlat8.xyz = u_xlat8.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat3.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(u_xlat2.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat3.xyz = u_xlat2.xxx * u_xlat3.xyz;
    u_xlat2.x = (-u_xlat3.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat18), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat0.xyz = float3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat4.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat7 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat7 = clamp(u_xlat7, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat6.x = u_xlat0.x * u_xlat0.x;
    u_xlat6.x = dot(u_xlat6.xx, u_xlat2.xx);
    u_xlat6.x = u_xlat6.x + -0.5;
    u_xlat12 = (-u_xlat1.x) + 1.0;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat12 = fma(u_xlat6.x, u_xlat12, 1.0);
    u_xlat13 = -abs(u_xlat18) + 1.0;
    u_xlat21 = u_xlat13 * u_xlat13;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat13 = u_xlat13 * u_xlat21;
    u_xlat6.x = fma(u_xlat6.x, u_xlat13, 1.0);
    u_xlat6.x = u_xlat6.x * u_xlat12;
    u_xlat12 = u_xlat2.x * u_xlat2.x;
    u_xlat12 = max(u_xlat12, 0.00200000009);
    u_xlat13 = (-u_xlat12) + 1.0;
    u_xlat2.x = fma(abs(u_xlat18), u_xlat13, u_xlat12);
    u_xlat13 = fma(u_xlat1.x, u_xlat13, u_xlat12);
    u_xlat18 = abs(u_xlat18) * u_xlat13;
    u_xlat18 = fma(u_xlat1.x, u_xlat2.x, u_xlat18);
    u_xlat18 = u_xlat18 + 9.99999975e-06;
    u_xlat18 = 0.5 / u_xlat18;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat13 = fma(u_xlat7, u_xlat12, (-u_xlat7));
    u_xlat7 = fma(u_xlat13, u_xlat7, 1.0);
    u_xlat12 = u_xlat12 * 0.318309873;
    u_xlat7 = fma(u_xlat7, u_xlat7, 1.00000001e-07);
    u_xlat12 = u_xlat12 / u_xlat7;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = u_xlat12 * 3.14159274;
    u_xlat12 = max(u_xlat12, 9.99999975e-05);
    u_xlat6.y = sqrt(u_xlat12);
    u_xlat6.xy = u_xlat1.xx * u_xlat6.xy;
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat6.y;
    u_xlat1.xyz = u_xlat6.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat8.xyz * float3(u_xlat12);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat6.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat3.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat19) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT SHADOWS_CUBE _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 9
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 8 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 9 sampler slot 8

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    bool u_xlatb25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat25 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb25 = u_xlat25==0.0;
    if(((int(u_xlatb25) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat21.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat22.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz;
    u_xlat26 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat10, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb10)) ? u_xlat7.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10 = fma(u_xlat7.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat7.x = max(u_xlat18, u_xlat10);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat10 = dot(u_xlat7, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat18 = max(abs(u_xlat7.y), abs(u_xlat7.x));
    u_xlat18 = max(abs(u_xlat7.z), u_xlat18);
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.z);
    u_xlat18 = max(u_xlat18, 9.99999975e-06);
    u_xlat18 = u_xlat18 * FGlobals._LightProjectionParams.w;
    u_xlat18 = FGlobals._LightProjectionParams.y / u_xlat18;
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.x);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xyz, saturate(u_xlat18), level(0.0));
    u_xlat27 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat18 = fma(u_xlat18, u_xlat27, FGlobals._LightShadowData.x);
    u_xlat10 = (-u_xlat18) + u_xlat10;
    u_xlat2.x = fma(u_xlat2.x, u_xlat10, u_xlat18);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat10)).x;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    u_xlat4.xyz = float3(u_xlat10) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat26), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat3.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat3.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat11, u_xlat16, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT SHADOWS_CUBE SHADOWS_SOFT _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 9
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_LightTexture0" to slot 6 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 7 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 8 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 9 sampler slot 8

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(6) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(7) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    bool u_xlatb31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat31 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb31 = u_xlat31==0.0;
    if(((int(u_xlatb31) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat32 = rsqrt(u_xlat32);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat6.xyz;
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb12)) ? u_xlat7.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat7.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat7.x = max(u_xlat22, u_xlat12);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat7, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb22 = u_xlat2.x<0.99000001;
    if(u_xlatb22){
        u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat22 = max(abs(u_xlat7.y), abs(u_xlat7.x));
        u_xlat22 = max(abs(u_xlat7.z), u_xlat22);
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
        u_xlat22 = max(u_xlat22, 9.99999975e-06);
        u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
        u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat8.xyz = u_xlat7.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat7.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat7.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat7.xyz = u_xlat7.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xyz, saturate(u_xlat22), level(0.0));
        u_xlat22 = dot(u_xlat8, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat12)).x;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat32), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE SHADOWS_CUBE _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 10
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 7 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 10 sampler slot 9

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (10) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(6) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat11;
    float u_xlat16;
    float u_xlat18;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    bool u_xlatb25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat25 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat25 = rsqrt(u_xlat25);
    u_xlat3.xyz = float3(u_xlat25) * u_xlat2.xyz;
    u_xlat25 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb25 = u_xlat25==0.0;
    if(((int(u_xlatb25) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat25 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat26 = u_xlat25 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat26);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat21.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat21.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat22.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat26 = rsqrt(u_xlat26);
    u_xlat6.xyz = float3(u_xlat26) * u_xlat6.xyz;
    u_xlat26 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat10 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat10 = sqrt(u_xlat10);
    u_xlat10 = (-u_xlat2.x) + u_xlat10;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat10, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb10)) ? u_xlat7.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10 = fma(u_xlat7.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat7.x = max(u_xlat18, u_xlat10);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat10 = dot(u_xlat7, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10 = clamp(u_xlat10, 0.0f, 1.0f);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat18 = max(abs(u_xlat7.y), abs(u_xlat7.x));
    u_xlat18 = max(abs(u_xlat7.z), u_xlat18);
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.z);
    u_xlat18 = max(u_xlat18, 9.99999975e-06);
    u_xlat18 = u_xlat18 * FGlobals._LightProjectionParams.w;
    u_xlat18 = FGlobals._LightProjectionParams.y / u_xlat18;
    u_xlat18 = u_xlat18 + (-FGlobals._LightProjectionParams.x);
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xyz, saturate(u_xlat18), level(0.0));
    u_xlat27 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat18 = fma(u_xlat18, u_xlat27, FGlobals._LightShadowData.x);
    u_xlat10 = (-u_xlat18) + u_xlat10;
    u_xlat2.x = fma(u_xlat2.x, u_xlat10, u_xlat18);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat10)).x;
    u_xlat18 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat10 = u_xlat18 * u_xlat10;
    u_xlat2.x = u_xlat2.x * u_xlat10;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat10 = rsqrt(u_xlat10);
    u_xlat4.xyz = float3(u_xlat10) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat26), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat26 = fma((-u_xlat26), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat26) * u_xlat5.xyz;
    u_xlat26 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), u_xlat3.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, float2(u_xlat26));
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat16 * u_xlat16;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat1.x;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat1.x = -abs(u_xlat24) + 1.0;
    u_xlat9 = u_xlat1.x * u_xlat1.x;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat1.x = u_xlat1.x * u_xlat9;
    u_xlat8.x = fma(u_xlat8.x, u_xlat1.x, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat26 * u_xlat26;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat1.x = (-u_xlat16) + 1.0;
    u_xlat9 = fma(abs(u_xlat24), u_xlat1.x, u_xlat16);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat1.x;
    u_xlat24 = fma(u_xlat3.x, u_xlat9, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat1.x = fma(u_xlat11, u_xlat16, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat1.x;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat3.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat2.xyz;
    u_xlat8.xyz = u_xlat2.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 10
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_LightTextureB0" to slot 6 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 7 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 8 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 9 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 10 sampler slot 9

Constant Buffer "FGlobals" (480 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _Metallic0 at 448
  Float _Metallic1 at 452
  Float _Metallic2 at 456
  Float _Metallic3 at 460
  Float _Smoothness0 at 464
  Float _Smoothness1 at 468
  Float _Smoothness2 at 472
  Float _Smoothness3 at 476
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (10) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(6) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(7) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(8) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(9) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    bool u_xlatb31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat31 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb31 = u_xlat31==0.0;
    if(((int(u_xlatb31) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat5 = u_xlat4.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat7 = u_xlat4.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat7;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat6 = u_xlat4.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat32 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat32 = rsqrt(u_xlat32);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat6.xyz;
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat7.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat7.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat7.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat7.xyz);
    u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat7.xyz);
        u_xlat7.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat7.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb12)) ? u_xlat7.xyz : input.TEXCOORD3.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat7.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat7.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat7.x = max(u_xlat22, u_xlat12);
        u_xlat7 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xzw);
    } else {
        u_xlat7.x = float(1.0);
        u_xlat7.y = float(1.0);
        u_xlat7.z = float(1.0);
        u_xlat7.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat7, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb22 = u_xlat2.x<0.99000001;
    if(u_xlatb22){
        u_xlat7.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat22 = max(abs(u_xlat7.y), abs(u_xlat7.x));
        u_xlat22 = max(abs(u_xlat7.z), u_xlat22);
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
        u_xlat22 = max(u_xlat22, 9.99999975e-06);
        u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
        u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat8.xyz = u_xlat7.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat7.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat7.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat7.xyz = u_xlat7.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat7.xyz, saturate(u_xlat22), level(0.0));
        u_xlat22 = dot(u_xlat8, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat12)).x;
    u_xlat22 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat12 = u_xlat22 * u_xlat12;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat6.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat6.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat6.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat6.xyz = fma(float3(u_xlat32), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat5.xyz = float3(u_xlat32) * u_xlat5.xyz;
    u_xlat32 = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat6.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat6.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 12
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_Normal0" to slot 6 sampler slot 8
Set 2D Texture "_Normal1" to slot 7 sampler slot 9
Set 2D Texture "_Normal2" to slot 8 sampler slot 10
Set 2D Texture "_Normal3" to slot 9 sampler slot 11
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 12 sampler slot 7

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (12) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    float3 u_xlat12;
    float3 u_xlat13;
    float u_xlat18;
    float2 u_xlat22;
    float2 u_xlat23;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    bool u_xlatb28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat2.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat28 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb28 = u_xlat28==0.0;
    if(((int(u_xlatb28) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat28 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat29);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat22.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat23.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat29 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat7.z = sqrt(u_xlat29);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat22.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat29 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat4.z = sqrt(u_xlat29);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat29 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat7.z = sqrt(u_xlat29);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat23.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat5.z = sqrt(u_xlat29);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat29 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat5.xyz = u_xlat22.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat22.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat7.xyz = u_xlat22.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat22.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat8.xyz = u_xlat22.xxx * u_xlat8.xyz;
    u_xlat13.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat13.xyz);
    u_xlat4.xyz = fma(float3(u_xlat29), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat29 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb30 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb30){
        u_xlatb30 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb30)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat30 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat31 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat30, u_xlat31);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat30 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat30 * u_xlat3.x;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat12.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12.x = rsqrt(u_xlat12.x);
    u_xlat12.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat29), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat6.xyz;
    u_xlat29 = (-u_xlat6.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat2.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat12.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat12.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat12.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat2.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat11, u_xlat18, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat2.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat4.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 11
Set 2D Texture "_Control" to slot 1
Set 2D Texture "_Splat0" to slot 2
Set 2D Texture "_Splat1" to slot 3
Set 2D Texture "_Splat2" to slot 4
Set 2D Texture "_Splat3" to slot 5
Set 2D Texture "_Normal0" to slot 6 sampler slot 7
Set 2D Texture "_Normal1" to slot 7 sampler slot 8
Set 2D Texture "_Normal2" to slot 8 sampler slot 9
Set 2D Texture "_Normal3" to slot 9 sampler slot 10
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 11 sampler slot 6

Constant Buffer "FGlobals" (304 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 176
  Vector4 _Splat0_ST at 192
  Vector4 _Splat1_ST at 208
  Vector4 _Splat2_ST at 224
  Vector4 _Splat3_ST at 240
  Float _NormalScale0 at 256
  Float _NormalScale1 at 260
  Float _NormalScale2 at 264
  Float _NormalScale3 at 268
  Float _Metallic0 at 272
  Float _Metallic1 at 276
  Float _Metallic2 at 280
  Float _Metallic3 at 284
  Float _Smoothness0 at 288
  Float _Smoothness1 at 292
  Float _Smoothness2 at 296
  Float _Smoothness3 at 300
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (11) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat18;
    float2 u_xlat19;
    float2 u_xlat20;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    bool u_xlatb25;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat25 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb25 = u_xlat25==0.0;
    if(((int(u_xlatb25) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat25 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat25 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat19.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat20.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat19.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat27 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat3.z = sqrt(u_xlat27);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat27 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat6.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat27 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat4.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat19.x = u_xlat3.z + 9.99999975e-06;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat4.yzx * float3(0.0, 0.0, 1.0);
    u_xlat6.xyz = fma(u_xlat4.zxy, float3(1.0, 0.0, 0.0), (-u_xlat6.xyz));
    u_xlat27 = dot(u_xlat6.xz, u_xlat6.xz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat6.xyz = float3(u_xlat27) * u_xlat6.xyz;
    u_xlat7.xyz = u_xlat4.zxy * u_xlat6.yzx;
    u_xlat7.xyz = fma(u_xlat6.zxy, u_xlat4.yzx, (-u_xlat7.xyz));
    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat7.xyz = float3(u_xlat27) * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
    u_xlat3.xyw = fma(u_xlat3.xxx, u_xlat6.xyz, u_xlat7.xyz);
    u_xlat3.xyz = fma(u_xlat19.xxx, u_xlat4.xyz, u_xlat3.xyw);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb10 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb10){
        u_xlatb10 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.xyz = (bool(u_xlatb10)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat10.xyz = u_xlat10.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat10.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat10.x = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat18 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat18, u_xlat10.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat10.x = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat10.x = clamp(u_xlat10.x, 0.0f, 1.0f);
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3.xyz = float3(u_xlat18) * u_xlat4.xyz;
    u_xlat10.xyz = u_xlat10.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, u_xlat2.xx);
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat1.x) + 1.0;
    u_xlat17 = u_xlat16 * u_xlat16;
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat16 = u_xlat16 * u_xlat17;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat17 = -abs(u_xlat24) + 1.0;
    u_xlat3.x = u_xlat17 * u_xlat17;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat17 = u_xlat17 * u_xlat3.x;
    u_xlat8.x = fma(u_xlat8.x, u_xlat17, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat2.x * u_xlat2.x;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat17 = (-u_xlat16) + 1.0;
    u_xlat2.x = fma(abs(u_xlat24), u_xlat17, u_xlat16);
    u_xlat17 = fma(u_xlat1.x, u_xlat17, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat17;
    u_xlat24 = fma(u_xlat1.x, u_xlat2.x, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat17 = fma(u_xlat9, u_xlat16, (-u_xlat9));
    u_xlat9 = fma(u_xlat17, u_xlat9, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat9 = fma(u_xlat9, u_xlat9, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat9;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat1.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat10.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SPOT _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 13
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 9
Set 2D Texture "_Normal1" to slot 7 sampler slot 10
Set 2D Texture "_Normal2" to slot 8 sampler slot 11
Set 2D Texture "_Normal3" to slot 9 sampler slot 12
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 1
Set 2D Texture "_LightTextureB0" to slot 11 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 13 sampler slot 8

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (13) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    bool u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    float3 u_xlat12;
    float3 u_xlat13;
    float2 u_xlat14;
    float u_xlat18;
    float2 u_xlat22;
    float2 u_xlat23;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    bool u_xlatb28;
    float u_xlat29;
    float u_xlat30;
    float u_xlat31;
    bool u_xlatb31;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat2.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat28 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb28 = u_xlat28==0.0;
    if(((int(u_xlatb28) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat28 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat29);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat22.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat23.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat29 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat7.z = sqrt(u_xlat29);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat22.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat29 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat4.z = sqrt(u_xlat29);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat29 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat7.z = sqrt(u_xlat29);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat23.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat5.z = sqrt(u_xlat29);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat29 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat5.xyz = u_xlat22.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat22.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat7.xyz = u_xlat22.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat22.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat8.xyz = u_xlat22.xxx * u_xlat8.xyz;
    u_xlat13.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat13.xyz);
    u_xlat4.xyz = fma(float3(u_xlat29), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat29 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat3);
    u_xlat3 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat3);
    u_xlat3 = u_xlat3 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlatb31 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb31){
        u_xlatb31 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb31)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat31 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat14.x = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat31, u_xlat14.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat31 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat31 = clamp(u_xlat31, 0.0f, 1.0f);
    u_xlatb5 = 0.0<u_xlat3.z;
    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
    u_xlat14.xy = u_xlat3.xy / u_xlat3.ww;
    u_xlat14.xy = u_xlat14.xy + float2(0.5, 0.5);
    u_xlat30 = _LightTexture0.sample(sampler_LightTexture0, u_xlat14.xy).w;
    u_xlat30 = u_xlat30 * u_xlat5.x;
    u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat3.x = _LightTextureB0.sample(sampler_LightTextureB0, u_xlat3.xx).x;
    u_xlat3.x = u_xlat3.x * u_xlat30;
    u_xlat3.x = u_xlat31 * u_xlat3.x;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat12.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12.x = rsqrt(u_xlat12.x);
    u_xlat12.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat29), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat6.xyz;
    u_xlat29 = (-u_xlat6.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat2.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat12.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat12.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat12.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat2.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat11, u_xlat18, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat2.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat4.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 13
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 9
Set 2D Texture "_Normal1" to slot 7 sampler slot 10
Set 2D Texture "_Normal2" to slot 8 sampler slot 11
Set 2D Texture "_Normal3" to slot 9 sampler slot 12
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 2
Set CUBE Texture "_LightTexture0" to slot 11 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 13 sampler slot 8

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_LightTextureB0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (13) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(10) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float4 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat9;
    float u_xlat10;
    float u_xlat11;
    float3 u_xlat12;
    float3 u_xlat13;
    float u_xlat18;
    float2 u_xlat22;
    float2 u_xlat23;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    bool u_xlatb28;
    float u_xlat29;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat1.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat28 = rsqrt(u_xlat28);
    u_xlat2.xyz = float3(u_xlat28) * u_xlat2.xyz;
    u_xlat28 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb28 = u_xlat28==0.0;
    if(((int(u_xlatb28) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat3.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat3.xy = fma(input.TEXCOORD4.xy, u_xlat3.xy, float2(0.5, 0.5));
    u_xlat3.xy = u_xlat3.xy * FGlobals._Control_TexelSize.xy;
    u_xlat3 = _Control.sample(sampler_Control, u_xlat3.xy);
    u_xlat28 = dot(u_xlat3, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat29 = u_xlat28 + 0.00100000005;
    u_xlat3 = u_xlat3 / float4(u_xlat29);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat22.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat23.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat0.sample(sampler_Splat0, u_xlat4.xy);
    u_xlat6 = u_xlat3.xxxx * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness0;
    u_xlat7 = _Splat1.sample(sampler_Splat1, u_xlat22.xy);
    u_xlat7 = u_xlat3.yyyy * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness1;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat2.sample(sampler_Splat2, u_xlat5.xy);
    u_xlat7 = u_xlat3.zzzz * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness2;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7 = _Splat3.sample(sampler_Splat3, u_xlat23.xy);
    u_xlat7 = u_xlat3.wwww * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness3;
    u_xlat6 = u_xlat6 + u_xlat7;
    u_xlat7.xyz = _Normal0.sample(sampler_Normal0, u_xlat4.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat4.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat4.xy * float2(FGlobals._NormalScale0);
    u_xlat29 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat7.z = sqrt(u_xlat29);
    u_xlat4.xyz = _Normal1.sample(sampler_Normal1, u_xlat22.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale1);
    u_xlat29 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat4.z = sqrt(u_xlat29);
    u_xlat4.xyz = u_xlat3.yyy * u_xlat4.xyz;
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.xxx, u_xlat4.xyz);
    u_xlat7.xyz = _Normal2.sample(sampler_Normal2, u_xlat5.xy).xyw;
    u_xlat7.x = u_xlat7.z * u_xlat7.x;
    u_xlat5.xy = fma(u_xlat7.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat7.xy = u_xlat5.xy * float2(FGlobals._NormalScale2);
    u_xlat29 = dot(u_xlat7.xy, u_xlat7.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat7.z = sqrt(u_xlat29);
    u_xlat4.xyz = fma(u_xlat7.xyz, u_xlat3.zzz, u_xlat4.xyz);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat23.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale3);
    u_xlat29 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat29 = min(u_xlat29, 1.0);
    u_xlat29 = (-u_xlat29) + 1.0;
    u_xlat5.z = sqrt(u_xlat29);
    u_xlat4.xyz = fma(u_xlat5.xyz, u_xlat3.www, u_xlat4.xyz);
    u_xlat29 = u_xlat4.z + 9.99999975e-06;
    u_xlat5.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat5.xyz = fma(u_xlat5.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat5.xyz = u_xlat22.xxx * u_xlat5.xyz;
    u_xlat7.xyz = u_xlat5.yzx * float3(0.0, 0.0, 1.0);
    u_xlat7.xyz = fma(u_xlat5.zxy, float3(1.0, 0.0, 0.0), (-u_xlat7.xyz));
    u_xlat22.x = dot(u_xlat7.xz, u_xlat7.xz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat7.xyz = u_xlat22.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat5.zxy * u_xlat7.yzx;
    u_xlat8.xyz = fma(u_xlat7.zxy, u_xlat5.yzx, (-u_xlat8.xyz));
    u_xlat22.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat22.x = rsqrt(u_xlat22.x);
    u_xlat8.xyz = u_xlat22.xxx * u_xlat8.xyz;
    u_xlat13.xyz = u_xlat4.yyy * u_xlat8.xyz;
    u_xlat4.xyz = fma(u_xlat4.xxx, u_xlat7.xyz, u_xlat13.xyz);
    u_xlat4.xyz = fma(float3(u_xlat29), u_xlat5.xyz, u_xlat4.xyz);
    u_xlat29 = dot(u_xlat3, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat3.xyz);
    u_xlat3.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat3.xyz);
    u_xlat3.xyz = u_xlat3.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlatb30 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb30){
        u_xlatb30 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat5.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat5.xyz);
        u_xlat5.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat5.xyz);
        u_xlat5.xyz = u_xlat5.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat5.xyz = (bool(u_xlatb30)) ? u_xlat5.xyz : input.TEXCOORD3.xyz;
        u_xlat5.xyz = u_xlat5.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat5.yzw = u_xlat5.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat30 = fma(u_xlat5.y, 0.25, 0.75);
        u_xlat31 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat5.x = max(u_xlat30, u_xlat31);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat5.xzw);
    } else {
        u_xlat5.x = float(1.0);
        u_xlat5.y = float(1.0);
        u_xlat5.z = float(1.0);
        u_xlat5.w = float(1.0);
    }
    u_xlat30 = dot(u_xlat5, FGlobals.unity_OcclusionMaskSelector);
    u_xlat30 = clamp(u_xlat30, 0.0f, 1.0f);
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat31)).x;
    u_xlat3.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat3.xyz).w;
    u_xlat3.x = u_xlat3.x * u_xlat31;
    u_xlat3.x = u_xlat30 * u_xlat3.x;
    u_xlat5.x = dot(input.TEXCOORD0.xyz, u_xlat4.xyz);
    u_xlat5.y = dot(input.TEXCOORD1.xyz, u_xlat4.xyz);
    u_xlat5.z = dot(input.TEXCOORD2.xyz, u_xlat4.xyz);
    u_xlat12.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat12.x = rsqrt(u_xlat12.x);
    u_xlat12.xyz = u_xlat12.xxx * u_xlat5.xyz;
    u_xlat4.xyz = u_xlat3.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat6.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat29), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat29 = fma((-u_xlat29), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat29) * u_xlat6.xyz;
    u_xlat29 = (-u_xlat6.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat27), u_xlat2.xyz);
    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat27 = max(u_xlat27, 0.00100000005);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat0.xyz = float3(u_xlat27) * u_xlat0.xyz;
    u_xlat27 = dot(u_xlat12.xyz, u_xlat2.xyz);
    u_xlat2.x = dot(u_xlat12.xyz, u_xlat1.xyz);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlat11 = dot(u_xlat12.xyz, u_xlat0.xyz);
    u_xlat11 = clamp(u_xlat11, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat9.x = u_xlat0.x * u_xlat0.x;
    u_xlat9.x = dot(u_xlat9.xx, float2(u_xlat29));
    u_xlat9.x = u_xlat9.x + -0.5;
    u_xlat18 = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat18 * u_xlat18;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = fma(u_xlat9.x, u_xlat18, 1.0);
    u_xlat1.x = -abs(u_xlat27) + 1.0;
    u_xlat10 = u_xlat1.x * u_xlat1.x;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat1.x = u_xlat1.x * u_xlat10;
    u_xlat9.x = fma(u_xlat9.x, u_xlat1.x, 1.0);
    u_xlat9.x = u_xlat9.x * u_xlat18;
    u_xlat18 = u_xlat29 * u_xlat29;
    u_xlat18 = max(u_xlat18, 0.00200000009);
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat10 = fma(abs(u_xlat27), u_xlat1.x, u_xlat18);
    u_xlat1.x = fma(u_xlat2.x, u_xlat1.x, u_xlat18);
    u_xlat27 = abs(u_xlat27) * u_xlat1.x;
    u_xlat27 = fma(u_xlat2.x, u_xlat10, u_xlat27);
    u_xlat27 = u_xlat27 + 9.99999975e-06;
    u_xlat27 = 0.5 / u_xlat27;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat1.x = fma(u_xlat11, u_xlat18, (-u_xlat11));
    u_xlat1.x = fma(u_xlat1.x, u_xlat11, 1.0);
    u_xlat18 = u_xlat18 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat18 = u_xlat18 / u_xlat1.x;
    u_xlat18 = u_xlat18 * u_xlat27;
    u_xlat18 = u_xlat18 * 3.14159274;
    u_xlat18 = max(u_xlat18, 9.99999975e-05);
    u_xlat9.y = sqrt(u_xlat18);
    u_xlat9.xy = u_xlat2.xx * u_xlat9.xy;
    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb27 = u_xlat27!=0.0;
    u_xlat27 = u_xlatb27 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat27 * u_xlat9.y;
    u_xlat1.xyz = u_xlat9.xxx * u_xlat4.xyz;
    u_xlat9.xyz = u_xlat4.xyz * float3(u_xlat18);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat9.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat28) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE INSTANCING_ON _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 12
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_Normal0" to slot 6 sampler slot 8
Set 2D Texture "_Normal1" to slot 7 sampler slot 9
Set 2D Texture "_Normal2" to slot 8 sampler slot 10
Set 2D Texture "_Normal3" to slot 9 sampler slot 11
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 12 sampler slot 7

Constant Buffer "FGlobals" (368 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Matrix4x4 unity_WorldToLight at 176
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _LightColor0 at 160
  Vector4 _Control_TexelSize at 240
  Vector4 _Splat0_ST at 256
  Vector4 _Splat1_ST at 272
  Vector4 _Splat2_ST at 288
  Vector4 _Splat3_ST at 304
  Float _NormalScale0 at 320
  Float _NormalScale1 at 324
  Float _NormalScale2 at 328
  Float _NormalScale3 at 332
  Float _Metallic0 at 336
  Float _Metallic1 at 340
  Float _Metallic2 at 344
  Float _Metallic3 at 348
  Float _Smoothness0 at 352
  Float _Smoothness1 at 356
  Float _Smoothness2 at 360
  Float _Smoothness3 at 364
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_LightTexture0 [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (12) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat18;
    float2 u_xlat19;
    float2 u_xlat20;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    bool u_xlatb25;
    float u_xlat26;
    bool u_xlatb26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat25 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb25 = u_xlat25==0.0;
    if(((int(u_xlatb25) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat25 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat25 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat19.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat20.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat19.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat27 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat3.z = sqrt(u_xlat27);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat27 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat6.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat27 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat4.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat19.x = u_xlat3.z + 9.99999975e-06;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat4.yzx * float3(0.0, 0.0, 1.0);
    u_xlat6.xyz = fma(u_xlat4.zxy, float3(1.0, 0.0, 0.0), (-u_xlat6.xyz));
    u_xlat27 = dot(u_xlat6.xz, u_xlat6.xz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat6.xyz = float3(u_xlat27) * u_xlat6.xyz;
    u_xlat7.xyz = u_xlat4.zxy * u_xlat6.yzx;
    u_xlat7.xyz = fma(u_xlat6.zxy, u_xlat4.yzx, (-u_xlat7.xyz));
    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat7.xyz = float3(u_xlat27) * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
    u_xlat3.xyw = fma(u_xlat3.xxx, u_xlat6.xyz, u_xlat7.xyz);
    u_xlat3.xyz = fma(u_xlat19.xxx, u_xlat4.xyz, u_xlat3.xyw);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat10.xy = input.TEXCOORD3.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat10.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD3.xx, u_xlat10.xy);
    u_xlat10.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD3.zz, u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlatb26 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb26){
        u_xlatb26 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb26)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat26 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat27 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat26, u_xlat27);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat26 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlat10.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat10.xy).w;
    u_xlat10.x = u_xlat26 * u_xlat10.x;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3.xyz = float3(u_xlat18) * u_xlat4.xyz;
    u_xlat10.xyz = u_xlat10.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, u_xlat2.xx);
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat1.x) + 1.0;
    u_xlat17 = u_xlat16 * u_xlat16;
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat16 = u_xlat16 * u_xlat17;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat17 = -abs(u_xlat24) + 1.0;
    u_xlat3.x = u_xlat17 * u_xlat17;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat17 = u_xlat17 * u_xlat3.x;
    u_xlat8.x = fma(u_xlat8.x, u_xlat17, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat2.x * u_xlat2.x;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat17 = (-u_xlat16) + 1.0;
    u_xlat2.x = fma(abs(u_xlat24), u_xlat17, u_xlat16);
    u_xlat17 = fma(u_xlat1.x, u_xlat17, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat17;
    u_xlat24 = fma(u_xlat1.x, u_xlat2.x, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat17 = fma(u_xlat9, u_xlat16, (-u_xlat9));
    u_xlat9 = fma(u_xlat17, u_xlat9, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat9 = fma(u_xlat9, u_xlat9, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat9;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat1.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat10.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH SPOT _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 14
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_Normal0" to slot 6 sampler slot 10
Set 2D Texture "_Normal1" to slot 7 sampler slot 11
Set 2D Texture "_Normal2" to slot 8 sampler slot 12
Set 2D Texture "_Normal3" to slot 9 sampler slot 13
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 11 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 13 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 14 sampler slot 9

Constant Buffer "FGlobals" (720 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 528
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _Control_TexelSize at 592
  Vector4 _Splat0_ST at 608
  Vector4 _Splat1_ST at 624
  Vector4 _Splat2_ST at 640
  Vector4 _Splat3_ST at 656
  Float _NormalScale0 at 672
  Float _NormalScale1 at 676
  Float _NormalScale2 at 680
  Float _NormalScale3 at 684
  Float _Metallic0 at 688
  Float _Metallic1 at 692
  Float _Metallic2 at 696
  Float _Metallic3 at 700
  Float _Smoothness0 at 704
  Float _Smoothness1 at 708
  Float _Smoothness2 at 712
  Float _Smoothness3 at 716
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    sampler sampler_Normal0 [[ sampler (10) ]],
    sampler sampler_Normal1 [[ sampler (11) ]],
    sampler sampler_Normal2 [[ sampler (12) ]],
    sampler sampler_Normal3 [[ sampler (13) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (14) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(13) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(14) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float3 u_xlat15;
    float u_xlat20;
    float u_xlat22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    bool u_xlatb31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat31 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb31 = u_xlat31==0.0;
    if(((int(u_xlatb31) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = u_xlat5.z + 9.99999975e-06;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
    u_xlat8.xyz = u_xlat6.yzx * float3(0.0, 0.0, 1.0);
    u_xlat8.xyz = fma(u_xlat6.zxy, float3(1.0, 0.0, 0.0), (-u_xlat8.xyz));
    u_xlat33 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat6.zxy * u_xlat8.yzx;
    u_xlat9.xyz = fma(u_xlat8.zxy, u_xlat6.yzx, (-u_xlat9.xyz));
    u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat9.xyz = float3(u_xlat33) * u_xlat9.xyz;
    u_xlat15.xyz = u_xlat5.yyy * u_xlat9.xyz;
    u_xlat5.xyz = fma(u_xlat5.xxx, u_xlat8.xyz, u_xlat15.xyz);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat6.xyz, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat6 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
    u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD3.xxxx, u_xlat6);
    u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD3.zzzz, u_xlat6);
    u_xlat6 = u_xlat6 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
    u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
    u_xlat22 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xy, saturate(u_xlat6.z), level(0.0));
    u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlatb12 = 0.0<u_xlat4.z;
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat22 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat12 = u_xlat22 * u_xlat12;
    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat22)).x;
    u_xlat12 = u_xlat22 * u_xlat12;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH SHADOWS_SOFT SPOT _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 14
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_Normal0" to slot 6 sampler slot 10
Set 2D Texture "_Normal1" to slot 7 sampler slot 11
Set 2D Texture "_Normal2" to slot 8 sampler slot 12
Set 2D Texture "_Normal3" to slot 9 sampler slot 13
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 2
Set 2D Texture "_LightTextureB0" to slot 11 sampler slot 3
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0
Set 2D Texture "_ShadowMapTexture" to slot 13 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 14 sampler slot 9

Constant Buffer "FGlobals" (736 bytes) on slot 0 {
  Matrix4x4 unity_WorldToShadow[4] at 48
  Matrix4x4 unity_MatrixV at 336
  Matrix4x4 unity_ProbeVolumeWorldToObject at 416
  Matrix4x4 unity_WorldToLight at 544
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 304
  Vector4 unity_ShadowFadeCenterAndType at 320
  Vector4 unity_ProbeVolumeParams at 400
  Vector3 unity_ProbeVolumeSizeInv at 480
  Vector3 unity_ProbeVolumeMin at 496
  Vector4 _LightColor0 at 512
  Vector4 _ShadowMapTexture_TexelSize at 528
  Vector4 _Control_TexelSize at 608
  Vector4 _Splat0_ST at 624
  Vector4 _Splat1_ST at 640
  Vector4 _Splat2_ST at 656
  Vector4 _Splat3_ST at 672
  Float _NormalScale0 at 688
  Float _NormalScale1 at 692
  Float _NormalScale2 at 696
  Float _NormalScale3 at 700
  Float _Metallic0 at 704
  Float _Metallic1 at 708
  Float _Metallic2 at 712
  Float _Metallic3 at 716
  Float _Smoothness0 at 720
  Float _Smoothness1 at 724
  Float _Smoothness2 at 728
  Float _Smoothness3 at 732
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _ShadowMapTexture_TexelSize;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    sampler sampler_Normal0 [[ sampler (10) ]],
    sampler sampler_Normal1 [[ sampler (11) ]],
    sampler sampler_Normal2 [[ sampler (12) ]],
    sampler sampler_Normal3 [[ sampler (13) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (14) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    depth2d<float, access::sample > _ShadowMapTexture [[ texture(13) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(14) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float4 u_xlat9;
    float4 u_xlat10;
    float4 u_xlat11;
    float4 u_xlat12;
    float3 u_xlat13;
    float u_xlat14;
    float u_xlat15;
    bool u_xlatb15;
    float u_xlat16;
    float3 u_xlat18;
    float u_xlat26;
    float u_xlat28;
    bool u_xlatb28;
    float2 u_xlat31;
    float2 u_xlat32;
    float2 u_xlat34;
    float u_xlat39;
    bool u_xlatb39;
    float u_xlat40;
    bool u_xlatb40;
    float u_xlat41;
    float u_xlat42;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat1.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat40 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat40 = rsqrt(u_xlat40);
    u_xlat3.xyz = float3(u_xlat40) * u_xlat2.xyz;
    u_xlat40 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb40 = u_xlat40==0.0;
    if(((int(u_xlatb40) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat40 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat41 = u_xlat40 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat41);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat31.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat32.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat31.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat32.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat41 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat8.z = sqrt(u_xlat41);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat31.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat41 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat5.z = sqrt(u_xlat41);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat41 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat8.z = sqrt(u_xlat41);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat32.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat41 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat41 = min(u_xlat41, 1.0);
    u_xlat41 = (-u_xlat41) + 1.0;
    u_xlat6.z = sqrt(u_xlat41);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat41 = u_xlat5.z + 9.99999975e-06;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat42 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat6.xyz = float3(u_xlat42) * u_xlat6.xyz;
    u_xlat8.xyz = u_xlat6.yzx * float3(0.0, 0.0, 1.0);
    u_xlat8.xyz = fma(u_xlat6.zxy, float3(1.0, 0.0, 0.0), (-u_xlat8.xyz));
    u_xlat42 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat8.xyz = float3(u_xlat42) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat6.zxy * u_xlat8.yzx;
    u_xlat9.xyz = fma(u_xlat8.zxy, u_xlat6.yzx, (-u_xlat9.xyz));
    u_xlat42 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat42 = rsqrt(u_xlat42);
    u_xlat9.xyz = float3(u_xlat42) * u_xlat9.xyz;
    u_xlat18.xyz = u_xlat5.yyy * u_xlat9.xyz;
    u_xlat5.xyz = fma(u_xlat5.xxx, u_xlat8.xyz, u_xlat18.xyz);
    u_xlat5.xyz = fma(float3(u_xlat41), u_xlat6.xyz, u_xlat5.xyz);
    u_xlat41 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1];
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0], input.TEXCOORD3.xxxx, u_xlat4);
    u_xlat4 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2], input.TEXCOORD3.zzzz, u_xlat4);
    u_xlat4 = u_xlat4 + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3];
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat15 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = (-u_xlat2.x) + u_xlat15;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat15, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb15 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb15){
        u_xlatb15 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb15)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat15 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat28 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat28, u_xlat15);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat15 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat15 = clamp(u_xlat15, 0.0f, 1.0f);
    u_xlatb28 = u_xlat2.x<0.99000001;
    if(u_xlatb28){
        u_xlat6 = input.TEXCOORD3.yyyy * FGlobals.hlslcc_mtx4x4unity_WorldToShadow[1];
        u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[0], input.TEXCOORD3.xxxx, u_xlat6);
        u_xlat6 = fma(FGlobals.hlslcc_mtx4x4unity_WorldToShadow[2], input.TEXCOORD3.zzzz, u_xlat6);
        u_xlat6 = u_xlat6 + FGlobals.hlslcc_mtx4x4unity_WorldToShadow[3];
        u_xlat6.xyz = u_xlat6.xyz / u_xlat6.www;
        u_xlat8.xy = fma(u_xlat6.xy, FGlobals._ShadowMapTexture_TexelSize.zw, float2(0.5, 0.5));
        u_xlat8.xy = floor(u_xlat8.xy);
        u_xlat6.xy = fma(u_xlat6.xy, FGlobals._ShadowMapTexture_TexelSize.zw, (-u_xlat8.xy));
        u_xlat9 = u_xlat6.xxyy + float4(0.5, 1.0, 0.5, 1.0);
        u_xlat10.xw = u_xlat9.xz * u_xlat9.xz;
        u_xlat34.xy = fma(u_xlat10.xw, float2(0.5, 0.5), (-u_xlat6.xy));
        u_xlat9.xz = (-u_xlat6.xy) + float2(1.0, 1.0);
        u_xlat11.xy = min(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat9.xz = fma((-u_xlat11.xy), u_xlat11.xy, u_xlat9.xz);
        u_xlat6.xy = max(u_xlat6.xy, float2(0.0, 0.0));
        u_xlat6.xy = fma((-u_xlat6.xy), u_xlat6.xy, u_xlat9.yw);
        u_xlat11.x = u_xlat34.x;
        u_xlat11.y = u_xlat9.x;
        u_xlat11.z = u_xlat6.x;
        u_xlat11.w = u_xlat10.x;
        u_xlat11 = u_xlat11 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10.x = u_xlat34.y;
        u_xlat10.y = u_xlat9.z;
        u_xlat10.z = u_xlat6.y;
        u_xlat9 = u_xlat10 * float4(0.444440007, 0.444440007, 0.444440007, 0.222220004);
        u_xlat10 = u_xlat11.ywyw + u_xlat11.xzxz;
        u_xlat12 = u_xlat9.yyww + u_xlat9.xxzz;
        u_xlat6.xy = u_xlat11.yw / u_xlat10.zw;
        u_xlat6.xy = u_xlat6.xy + float2(-1.5, 0.5);
        u_xlat34.xy = u_xlat9.yw / u_xlat12.yw;
        u_xlat34.xy = u_xlat34.xy + float2(-1.5, 0.5);
        u_xlat9.xy = u_xlat6.xy * FGlobals._ShadowMapTexture_TexelSize.xx;
        u_xlat9.zw = u_xlat34.xy * FGlobals._ShadowMapTexture_TexelSize.yy;
        u_xlat10 = u_xlat10 * u_xlat12;
        u_xlat11 = fma(u_xlat8.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat9.xzyz);
        u_xlat28 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat11.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat11.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat42 = u_xlat42 * u_xlat10.y;
        u_xlat28 = fma(u_xlat10.x, u_xlat28, u_xlat42);
        u_xlat8 = fma(u_xlat8.xyxy, FGlobals._ShadowMapTexture_TexelSize.xyxy, u_xlat9.xwyw);
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xy, saturate(u_xlat6.z), level(0.0));
        u_xlat28 = fma(u_xlat10.z, u_xlat42, u_xlat28);
        u_xlat42 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.zw, saturate(u_xlat6.z), level(0.0));
        u_xlat28 = fma(u_xlat10.w, u_xlat42, u_xlat28);
        u_xlat42 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat28 = fma(u_xlat28, u_xlat42, FGlobals._LightShadowData.x);
    } else {
        u_xlat28 = 1.0;
    }
    u_xlat15 = (-u_xlat28) + u_xlat15;
    u_xlat2.x = fma(u_xlat2.x, u_xlat15, u_xlat28);
    u_xlatb15 = 0.0<u_xlat4.z;
    u_xlat15 = u_xlatb15 ? 1.0 : float(0.0);
    u_xlat6.xy = u_xlat4.xy / u_xlat4.ww;
    u_xlat6.xy = u_xlat6.xy + float2(0.5, 0.5);
    u_xlat28 = _LightTexture0.sample(sampler_LightTexture0, u_xlat6.xy).w;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat28 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat28)).x;
    u_xlat15 = u_xlat28 * u_xlat15;
    u_xlat2.x = u_xlat2.x * u_xlat15;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat41), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat41 = fma((-u_xlat41), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat41) * u_xlat7.xyz;
    u_xlat41 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat39), u_xlat3.xyz);
    u_xlat39 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat39 = max(u_xlat39, 0.00100000005);
    u_xlat39 = rsqrt(u_xlat39);
    u_xlat0.xyz = float3(u_xlat39) * u_xlat0.xyz;
    u_xlat39 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat16 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat16 = clamp(u_xlat16, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat13.x = u_xlat0.x * u_xlat0.x;
    u_xlat13.x = dot(u_xlat13.xx, float2(u_xlat41));
    u_xlat13.x = u_xlat13.x + -0.5;
    u_xlat26 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat26 * u_xlat26;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat1.x;
    u_xlat26 = fma(u_xlat13.x, u_xlat26, 1.0);
    u_xlat1.x = -abs(u_xlat39) + 1.0;
    u_xlat14 = u_xlat1.x * u_xlat1.x;
    u_xlat14 = u_xlat14 * u_xlat14;
    u_xlat1.x = u_xlat1.x * u_xlat14;
    u_xlat13.x = fma(u_xlat13.x, u_xlat1.x, 1.0);
    u_xlat13.x = u_xlat13.x * u_xlat26;
    u_xlat26 = u_xlat41 * u_xlat41;
    u_xlat26 = max(u_xlat26, 0.00200000009);
    u_xlat1.x = (-u_xlat26) + 1.0;
    u_xlat14 = fma(abs(u_xlat39), u_xlat1.x, u_xlat26);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat26);
    u_xlat39 = abs(u_xlat39) * u_xlat1.x;
    u_xlat39 = fma(u_xlat3.x, u_xlat14, u_xlat39);
    u_xlat39 = u_xlat39 + 9.99999975e-06;
    u_xlat39 = 0.5 / u_xlat39;
    u_xlat26 = u_xlat26 * u_xlat26;
    u_xlat1.x = fma(u_xlat16, u_xlat26, (-u_xlat16));
    u_xlat1.x = fma(u_xlat1.x, u_xlat16, 1.0);
    u_xlat26 = u_xlat26 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat26 = u_xlat26 / u_xlat1.x;
    u_xlat26 = u_xlat26 * u_xlat39;
    u_xlat26 = u_xlat26 * 3.14159274;
    u_xlat26 = max(u_xlat26, 9.99999975e-05);
    u_xlat13.y = sqrt(u_xlat26);
    u_xlat13.xy = u_xlat3.xx * u_xlat13.xy;
    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb39 = u_xlat39!=0.0;
    u_xlat39 = u_xlatb39 ? 1.0 : float(0.0);
    u_xlat26 = u_xlat39 * u_xlat13.y;
    u_xlat1.xyz = u_xlat13.xxx * u_xlat2.xyz;
    u_xlat13.xyz = u_xlat2.xyz * float3(u_xlat26);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat13.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat40) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL INSTANCING_ON SHADOWS_SCREEN _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 12
Set 2D Texture "_Control" to slot 1 sampler slot 2
Set 2D Texture "_Splat0" to slot 2 sampler slot 3
Set 2D Texture "_Splat1" to slot 3 sampler slot 4
Set 2D Texture "_Splat2" to slot 4 sampler slot 5
Set 2D Texture "_Splat3" to slot 5 sampler slot 6
Set 2D Texture "_Normal0" to slot 6 sampler slot 8
Set 2D Texture "_Normal1" to slot 7 sampler slot 9
Set 2D Texture "_Normal2" to slot 8 sampler slot 10
Set 2D Texture "_Normal3" to slot 9 sampler slot 11
Set 2D Texture "_ShadowMapTexture" to slot 10 sampler slot 1
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 12 sampler slot 7

Constant Buffer "FGlobals" (400 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 272
  Vector4 _Splat0_ST at 288
  Vector4 _Splat1_ST at 304
  Vector4 _Splat2_ST at 320
  Vector4 _Splat3_ST at 336
  Float _NormalScale0 at 352
  Float _NormalScale1 at 356
  Float _NormalScale2 at 360
  Float _NormalScale3 at 364
  Float _Metallic0 at 368
  Float _Metallic1 at 372
  Float _Metallic2 at 376
  Float _Metallic3 at 380
  Float _Smoothness0 at 384
  Float _Smoothness1 at 388
  Float _Smoothness2 at 392
  Float _Smoothness3 at 396
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_Control [[ sampler (2) ]],
    sampler sampler_Splat0 [[ sampler (3) ]],
    sampler sampler_Splat1 [[ sampler (4) ]],
    sampler sampler_Splat2 [[ sampler (5) ]],
    sampler sampler_Splat3 [[ sampler (6) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (7) ]],
    sampler sampler_Normal0 [[ sampler (8) ]],
    sampler sampler_Normal1 [[ sampler (9) ]],
    sampler sampler_Normal2 [[ sampler (10) ]],
    sampler sampler_Normal3 [[ sampler (11) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (12) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(12) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat18;
    bool u_xlatb18;
    float2 u_xlat19;
    float2 u_xlat20;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    bool u_xlatb25;
    float u_xlat26;
    float u_xlat27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat25 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb25 = u_xlat25==0.0;
    if(((int(u_xlatb25) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat25 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat25 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat19.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat20.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat19.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat27 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat3.z = sqrt(u_xlat27);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat27 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat6.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat27 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat4.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat19.x = u_xlat3.z + 9.99999975e-06;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat4.yzx * float3(0.0, 0.0, 1.0);
    u_xlat6.xyz = fma(u_xlat4.zxy, float3(1.0, 0.0, 0.0), (-u_xlat6.xyz));
    u_xlat27 = dot(u_xlat6.xz, u_xlat6.xz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat6.xyz = float3(u_xlat27) * u_xlat6.xyz;
    u_xlat7.xyz = u_xlat4.zxy * u_xlat6.yzx;
    u_xlat7.xyz = fma(u_xlat6.zxy, u_xlat4.yzx, (-u_xlat7.xyz));
    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat7.xyz = float3(u_xlat27) * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
    u_xlat3.xyw = fma(u_xlat3.xxx, u_xlat6.xyz, u_xlat7.xyz);
    u_xlat3.xyz = fma(u_xlat19.xxx, u_xlat4.xyz, u_xlat3.xyw);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat10.x = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = (-u_xlat10.x) + u_xlat18;
    u_xlat10.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat18, u_xlat10.x);
    u_xlat10.x = fma(u_xlat10.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat10.x = clamp(u_xlat10.x, 0.0f, 1.0f);
    u_xlatb18 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb18){
        u_xlatb18 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb18)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat18 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat26 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat26, u_xlat18);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat18 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat18 = clamp(u_xlat18, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat26 = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat18 = (-u_xlat26) + u_xlat18;
    u_xlat10.x = fma(u_xlat10.x, u_xlat18, u_xlat26);
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3.xyz = float3(u_xlat18) * u_xlat4.xyz;
    u_xlat10.xyz = u_xlat10.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, u_xlat2.xx);
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat1.x) + 1.0;
    u_xlat17 = u_xlat16 * u_xlat16;
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat16 = u_xlat16 * u_xlat17;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat17 = -abs(u_xlat24) + 1.0;
    u_xlat3.x = u_xlat17 * u_xlat17;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat17 = u_xlat17 * u_xlat3.x;
    u_xlat8.x = fma(u_xlat8.x, u_xlat17, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat2.x * u_xlat2.x;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat17 = (-u_xlat16) + 1.0;
    u_xlat2.x = fma(abs(u_xlat24), u_xlat17, u_xlat16);
    u_xlat17 = fma(u_xlat1.x, u_xlat17, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat17;
    u_xlat24 = fma(u_xlat1.x, u_xlat2.x, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat17 = fma(u_xlat9, u_xlat16, (-u_xlat9));
    u_xlat9 = fma(u_xlat17, u_xlat9, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat9 = fma(u_xlat9, u_xlat9, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat9;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat1.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat10.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: DIRECTIONAL_COOKIE INSTANCING_ON SHADOWS_SCREEN _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 13
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 9
Set 2D Texture "_Normal1" to slot 7 sampler slot 10
Set 2D Texture "_Normal2" to slot 8 sampler slot 11
Set 2D Texture "_Normal3" to slot 9 sampler slot 12
Set 2D Texture "_ShadowMapTexture" to slot 10 sampler slot 1
Set 2D Texture "_LightTexture0" to slot 11 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 13 sampler slot 8

Constant Buffer "FGlobals" (464 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 80
  Matrix4x4 unity_ProbeVolumeWorldToObject at 160
  Matrix4x4 unity_WorldToLight at 272
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 unity_OcclusionMaskSelector at 32
  Vector4 _LightShadowData at 48
  Vector4 unity_ShadowFadeCenterAndType at 64
  Vector4 unity_ProbeVolumeParams at 144
  Vector3 unity_ProbeVolumeSizeInv at 224
  Vector3 unity_ProbeVolumeMin at 240
  Vector4 _LightColor0 at 256
  Vector4 _Control_TexelSize at 336
  Vector4 _Splat0_ST at 352
  Vector4 _Splat1_ST at 368
  Vector4 _Splat2_ST at 384
  Vector4 _Splat3_ST at 400
  Float _NormalScale0 at 416
  Float _NormalScale1 at 420
  Float _NormalScale2 at 424
  Float _NormalScale3 at 428
  Float _Metallic0 at 432
  Float _Metallic1 at 436
  Float _Metallic2 at 440
  Float _Metallic3 at 444
  Float _Smoothness0 at 448
  Float _Smoothness1 at 452
  Float _Smoothness2 at 456
  Float _Smoothness3 at 460
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
    float4 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (13) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _ShadowMapTexture [[ texture(10) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float3 u_xlat10;
    float u_xlat12;
    float u_xlat16;
    float u_xlat17;
    float u_xlat18;
    float2 u_xlat19;
    float2 u_xlat20;
    float u_xlat24;
    bool u_xlatb24;
    float u_xlat25;
    bool u_xlatb25;
    float u_xlat26;
    float u_xlat27;
    bool u_xlatb27;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat1.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat25 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb25 = u_xlat25==0.0;
    if(((int(u_xlatb25) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD4.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat25 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat25 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat3.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat19.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat20.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat5 = _Splat0.sample(sampler_Splat0, u_xlat3.xy);
    u_xlat5 = u_xlat2.xxxx * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness0;
    u_xlat6 = _Splat1.sample(sampler_Splat1, u_xlat19.xy);
    u_xlat6 = u_xlat2.yyyy * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness1;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat6 = u_xlat2.zzzz * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness2;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat20.xy);
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat5 = u_xlat5 + u_xlat6;
    u_xlat6.xyz = _Normal0.sample(sampler_Normal0, u_xlat3.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat3.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat3.xy * float2(FGlobals._NormalScale0);
    u_xlat3.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat3.x = min(u_xlat3.x, 1.0);
    u_xlat3.x = (-u_xlat3.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat3.x);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat19.xy).xyw;
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat3.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat3.xy = u_xlat3.xy * float2(FGlobals._NormalScale1);
    u_xlat27 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat3.z = sqrt(u_xlat27);
    u_xlat3.xyz = u_xlat2.yyy * u_xlat3.xyz;
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.xxx, u_xlat3.xyz);
    u_xlat6.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat4.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat4.xy * float2(FGlobals._NormalScale2);
    u_xlat27 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat6.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat6.xyz, u_xlat2.zzz, u_xlat3.xyz);
    u_xlat4.xyz = _Normal3.sample(sampler_Normal3, u_xlat20.xy).xyw;
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat4.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat4.xy = u_xlat4.xy * float2(FGlobals._NormalScale3);
    u_xlat27 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat27 = min(u_xlat27, 1.0);
    u_xlat27 = (-u_xlat27) + 1.0;
    u_xlat4.z = sqrt(u_xlat27);
    u_xlat3.xyz = fma(u_xlat4.xyz, u_xlat2.www, u_xlat3.xyz);
    u_xlat19.x = u_xlat3.z + 9.99999975e-06;
    u_xlat4.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat4.xyz = fma(u_xlat4.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat4.xyz = float3(u_xlat27) * u_xlat4.xyz;
    u_xlat6.xyz = u_xlat4.yzx * float3(0.0, 0.0, 1.0);
    u_xlat6.xyz = fma(u_xlat4.zxy, float3(1.0, 0.0, 0.0), (-u_xlat6.xyz));
    u_xlat27 = dot(u_xlat6.xz, u_xlat6.xz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat6.xyz = float3(u_xlat27) * u_xlat6.xyz;
    u_xlat7.xyz = u_xlat4.zxy * u_xlat6.yzx;
    u_xlat7.xyz = fma(u_xlat6.zxy, u_xlat4.yzx, (-u_xlat7.xyz));
    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat27 = rsqrt(u_xlat27);
    u_xlat7.xyz = float3(u_xlat27) * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat3.yyy * u_xlat7.xyz;
    u_xlat3.xyw = fma(u_xlat3.xxx, u_xlat6.xyz, u_xlat7.xyz);
    u_xlat3.xyz = fma(u_xlat19.xxx, u_xlat4.xyz, u_xlat3.xyw);
    u_xlat2.x = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat10.xy = input.TEXCOORD3.yy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xy;
    u_xlat10.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xy, input.TEXCOORD3.xx, u_xlat10.xy);
    u_xlat10.xy = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xy, input.TEXCOORD3.zz, u_xlat10.xy);
    u_xlat10.xy = u_xlat10.xy + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xy;
    u_xlat4.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat4.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat4.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat26 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat4.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat27 = sqrt(u_xlat27);
    u_xlat27 = (-u_xlat26) + u_xlat27;
    u_xlat26 = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat27, u_xlat26);
    u_xlat26 = fma(u_xlat26, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat26 = clamp(u_xlat26, 0.0f, 1.0f);
    u_xlatb27 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb27){
        u_xlatb27 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
        u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
        u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat4.xyz = (bool(u_xlatb27)) ? u_xlat4.xyz : input.TEXCOORD3.xyz;
        u_xlat4.xyz = u_xlat4.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat4.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat27 = fma(u_xlat4.y, 0.25, 0.75);
        u_xlat12 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat4.x = max(u_xlat27, u_xlat12);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
    } else {
        u_xlat4.x = float(1.0);
        u_xlat4.y = float(1.0);
        u_xlat4.z = float(1.0);
        u_xlat4.w = float(1.0);
    }
    u_xlat27 = dot(u_xlat4, FGlobals.unity_OcclusionMaskSelector);
    u_xlat27 = clamp(u_xlat27, 0.0f, 1.0f);
    u_xlat4.xy = input.TEXCOORD6.xy / input.TEXCOORD6.ww;
    u_xlat4.x = _ShadowMapTexture.sample(sampler_ShadowMapTexture, u_xlat4.xy).x;
    u_xlat27 = u_xlat27 + (-u_xlat4.x);
    u_xlat26 = fma(u_xlat26, u_xlat27, u_xlat4.x);
    u_xlat10.x = _LightTexture0.sample(sampler_LightTexture0, u_xlat10.xy).w;
    u_xlat10.x = u_xlat26 * u_xlat10.x;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat3.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat3.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat3.xyz);
    u_xlat18 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat3.xyz = float3(u_xlat18) * u_xlat4.xyz;
    u_xlat10.xyz = u_xlat10.xxx * FGlobals._LightColor0.xyz;
    u_xlat4.xyz = u_xlat5.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat2.xxx, u_xlat4.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat2.x = fma((-u_xlat2.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat2.x = (-u_xlat5.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat24), FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat24 = max(u_xlat24, 0.00100000005);
    u_xlat24 = rsqrt(u_xlat24);
    u_xlat0.xyz = float3(u_xlat24) * u_xlat0.xyz;
    u_xlat24 = dot(u_xlat3.xyz, u_xlat1.xyz);
    u_xlat1.x = dot(u_xlat3.xyz, FGlobals._WorldSpaceLightPos0.xyz);
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat9 = dot(u_xlat3.xyz, u_xlat0.xyz);
    u_xlat9 = clamp(u_xlat9, 0.0f, 1.0f);
    u_xlat0.x = dot(FGlobals._WorldSpaceLightPos0.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat8.x = u_xlat0.x * u_xlat0.x;
    u_xlat8.x = dot(u_xlat8.xx, u_xlat2.xx);
    u_xlat8.x = u_xlat8.x + -0.5;
    u_xlat16 = (-u_xlat1.x) + 1.0;
    u_xlat17 = u_xlat16 * u_xlat16;
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat16 = u_xlat16 * u_xlat17;
    u_xlat16 = fma(u_xlat8.x, u_xlat16, 1.0);
    u_xlat17 = -abs(u_xlat24) + 1.0;
    u_xlat3.x = u_xlat17 * u_xlat17;
    u_xlat3.x = u_xlat3.x * u_xlat3.x;
    u_xlat17 = u_xlat17 * u_xlat3.x;
    u_xlat8.x = fma(u_xlat8.x, u_xlat17, 1.0);
    u_xlat8.x = u_xlat8.x * u_xlat16;
    u_xlat16 = u_xlat2.x * u_xlat2.x;
    u_xlat16 = max(u_xlat16, 0.00200000009);
    u_xlat17 = (-u_xlat16) + 1.0;
    u_xlat2.x = fma(abs(u_xlat24), u_xlat17, u_xlat16);
    u_xlat17 = fma(u_xlat1.x, u_xlat17, u_xlat16);
    u_xlat24 = abs(u_xlat24) * u_xlat17;
    u_xlat24 = fma(u_xlat1.x, u_xlat2.x, u_xlat24);
    u_xlat24 = u_xlat24 + 9.99999975e-06;
    u_xlat24 = 0.5 / u_xlat24;
    u_xlat16 = u_xlat16 * u_xlat16;
    u_xlat17 = fma(u_xlat9, u_xlat16, (-u_xlat9));
    u_xlat9 = fma(u_xlat17, u_xlat9, 1.0);
    u_xlat16 = u_xlat16 * 0.318309873;
    u_xlat9 = fma(u_xlat9, u_xlat9, 1.00000001e-07);
    u_xlat16 = u_xlat16 / u_xlat9;
    u_xlat16 = u_xlat16 * u_xlat24;
    u_xlat16 = u_xlat16 * 3.14159274;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat8.y = sqrt(u_xlat16);
    u_xlat8.xy = u_xlat1.xx * u_xlat8.xy;
    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlatb24 = u_xlat24!=0.0;
    u_xlat24 = u_xlatb24 ? 1.0 : float(0.0);
    u_xlat16 = u_xlat24 * u_xlat8.y;
    u_xlat1.xyz = u_xlat8.xxx * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat10.xyz * float3(u_xlat16);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat4.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat4.xyz);
    u_xlat0.xyz = u_xlat8.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat5.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat25) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT SHADOWS_CUBE _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 13
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 9
Set 2D Texture "_Normal1" to slot 7 sampler slot 10
Set 2D Texture "_Normal2" to slot 8 sampler slot 11
Set 2D Texture "_Normal3" to slot 9 sampler slot 12
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 12 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 13 sampler slot 8

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (13) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(12) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float3 u_xlat15;
    float u_xlat20;
    float u_xlat22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    bool u_xlatb31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat31 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb31 = u_xlat31==0.0;
    if(((int(u_xlatb31) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = u_xlat5.z + 9.99999975e-06;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
    u_xlat8.xyz = u_xlat6.yzx * float3(0.0, 0.0, 1.0);
    u_xlat8.xyz = fma(u_xlat6.zxy, float3(1.0, 0.0, 0.0), (-u_xlat8.xyz));
    u_xlat33 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat6.zxy * u_xlat8.yzx;
    u_xlat9.xyz = fma(u_xlat8.zxy, u_xlat6.yzx, (-u_xlat9.xyz));
    u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat9.xyz = float3(u_xlat33) * u_xlat9.xyz;
    u_xlat15.xyz = u_xlat5.yyy * u_xlat9.xyz;
    u_xlat5.xyz = fma(u_xlat5.xxx, u_xlat8.xyz, u_xlat15.xyz);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat6.xyz, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat22 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat22 = max(abs(u_xlat6.z), u_xlat22);
    u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
    u_xlat22 = max(u_xlat22, 9.99999975e-06);
    u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
    u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
    u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat22), level(0.0));
    u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat12)).x;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT SHADOWS_CUBE SHADOWS_SOFT _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 13
Set 2D Texture "_Control" to slot 1 sampler slot 3
Set 2D Texture "_Splat0" to slot 2 sampler slot 4
Set 2D Texture "_Splat1" to slot 3 sampler slot 5
Set 2D Texture "_Splat2" to slot 4 sampler slot 6
Set 2D Texture "_Splat3" to slot 5 sampler slot 7
Set 2D Texture "_Normal0" to slot 6 sampler slot 9
Set 2D Texture "_Normal1" to slot 7 sampler slot 10
Set 2D Texture "_Normal2" to slot 8 sampler slot 11
Set 2D Texture "_Normal3" to slot 9 sampler slot 12
Set 2D Texture "_LightTexture0" to slot 10 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 11 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 12 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 13 sampler slot 8

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_Control [[ sampler (3) ]],
    sampler sampler_Splat0 [[ sampler (4) ]],
    sampler sampler_Splat1 [[ sampler (5) ]],
    sampler sampler_Splat2 [[ sampler (6) ]],
    sampler sampler_Splat3 [[ sampler (7) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (8) ]],
    sampler sampler_Normal0 [[ sampler (9) ]],
    sampler sampler_Normal1 [[ sampler (10) ]],
    sampler sampler_Normal2 [[ sampler (11) ]],
    sampler sampler_Normal3 [[ sampler (12) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (13) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTexture0 [[ texture(10) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(11) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(12) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(13) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float3 u_xlat15;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    bool u_xlatb31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat31 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb31 = u_xlat31==0.0;
    if(((int(u_xlatb31) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = u_xlat5.z + 9.99999975e-06;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
    u_xlat8.xyz = u_xlat6.yzx * float3(0.0, 0.0, 1.0);
    u_xlat8.xyz = fma(u_xlat6.zxy, float3(1.0, 0.0, 0.0), (-u_xlat8.xyz));
    u_xlat33 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat6.zxy * u_xlat8.yzx;
    u_xlat9.xyz = fma(u_xlat8.zxy, u_xlat6.yzx, (-u_xlat9.xyz));
    u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat9.xyz = float3(u_xlat33) * u_xlat9.xyz;
    u_xlat15.xyz = u_xlat5.yyy * u_xlat9.xyz;
    u_xlat5.xyz = fma(u_xlat5.xxx, u_xlat8.xyz, u_xlat15.xyz);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat6.xyz, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb22 = u_xlat2.x<0.99000001;
    if(u_xlatb22){
        u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat22 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat22 = max(abs(u_xlat6.z), u_xlat22);
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
        u_xlat22 = max(u_xlat22, 9.99999975e-06);
        u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
        u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat8.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat22), level(0.0));
        u_xlat22 = dot(u_xlat8, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTexture0.sample(sampler_LightTexture0, float2(u_xlat12)).x;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE SHADOWS_CUBE _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 14
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_Normal0" to slot 6 sampler slot 10
Set 2D Texture "_Normal1" to slot 7 sampler slot 11
Set 2D Texture "_Normal2" to slot 8 sampler slot 12
Set 2D Texture "_Normal3" to slot 9 sampler slot 13
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 11 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 13 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 14 sampler slot 9

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    sampler sampler_Normal0 [[ sampler (10) ]],
    sampler sampler_Normal1 [[ sampler (11) ]],
    sampler sampler_Normal2 [[ sampler (12) ]],
    sampler sampler_Normal3 [[ sampler (13) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (14) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(10) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(13) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(14) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float3 u_xlat15;
    float u_xlat20;
    float u_xlat22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    bool u_xlatb31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat31 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb31 = u_xlat31==0.0;
    if(((int(u_xlatb31) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = u_xlat5.z + 9.99999975e-06;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
    u_xlat8.xyz = u_xlat6.yzx * float3(0.0, 0.0, 1.0);
    u_xlat8.xyz = fma(u_xlat6.zxy, float3(1.0, 0.0, 0.0), (-u_xlat8.xyz));
    u_xlat33 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat6.zxy * u_xlat8.yzx;
    u_xlat9.xyz = fma(u_xlat8.zxy, u_xlat6.yzx, (-u_xlat9.xyz));
    u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat9.xyz = float3(u_xlat33) * u_xlat9.xyz;
    u_xlat15.xyz = u_xlat5.yyy * u_xlat9.xyz;
    u_xlat5.xyz = fma(u_xlat5.xxx, u_xlat8.xyz, u_xlat15.xyz);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat6.xyz, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
    u_xlat22 = max(abs(u_xlat6.y), abs(u_xlat6.x));
    u_xlat22 = max(abs(u_xlat6.z), u_xlat22);
    u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
    u_xlat22 = max(u_xlat22, 9.99999975e-06);
    u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
    u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
    u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat22 = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat22), level(0.0));
    u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
    u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat12)).x;
    u_xlat22 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat12 = u_xlat22 * u_xlat12;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON POINT_COOKIE SHADOWS_CUBE SHADOWS_SOFT _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 14
Set 2D Texture "_Control" to slot 1 sampler slot 4
Set 2D Texture "_Splat0" to slot 2 sampler slot 5
Set 2D Texture "_Splat1" to slot 3 sampler slot 6
Set 2D Texture "_Splat2" to slot 4 sampler slot 7
Set 2D Texture "_Splat3" to slot 5 sampler slot 8
Set 2D Texture "_Normal0" to slot 6 sampler slot 10
Set 2D Texture "_Normal1" to slot 7 sampler slot 11
Set 2D Texture "_Normal2" to slot 8 sampler slot 12
Set 2D Texture "_Normal3" to slot 9 sampler slot 13
Set 2D Texture "_LightTextureB0" to slot 10 sampler slot 3
Set CUBE Texture "_LightTexture0" to slot 11 sampler slot 2
Set 3D Texture "unity_ProbeVolumeSH" to slot 12 sampler slot 0
Set CUBE Texture "_ShadowMapTexture" to slot 13 sampler slot 1
Set 2D Texture "_TerrainNormalmapTexture" to slot 14 sampler slot 9

Constant Buffer "FGlobals" (496 bytes) on slot 0 {
  Matrix4x4 unity_MatrixV at 112
  Matrix4x4 unity_ProbeVolumeWorldToObject at 192
  Matrix4x4 unity_WorldToLight at 304
  Vector3 _WorldSpaceCameraPos at 0
  Vector4 _WorldSpaceLightPos0 at 16
  Vector4 _LightPositionRange at 32
  Vector4 _LightProjectionParams at 48
  Vector4 unity_OcclusionMaskSelector at 64
  Vector4 _LightShadowData at 80
  Vector4 unity_ShadowFadeCenterAndType at 96
  Vector4 unity_ProbeVolumeParams at 176
  Vector3 unity_ProbeVolumeSizeInv at 256
  Vector3 unity_ProbeVolumeMin at 272
  Vector4 _LightColor0 at 288
  Vector4 _Control_TexelSize at 368
  Vector4 _Splat0_ST at 384
  Vector4 _Splat1_ST at 400
  Vector4 _Splat2_ST at 416
  Vector4 _Splat3_ST at 432
  Float _NormalScale0 at 448
  Float _NormalScale1 at 452
  Float _NormalScale2 at 456
  Float _NormalScale3 at 460
  Float _Metallic0 at 464
  Float _Metallic1 at 468
  Float _Metallic2 at 472
  Float _Metallic3 at 476
  Float _Smoothness0 at 480
  Float _Smoothness1 at 484
  Float _Smoothness2 at 488
  Float _Smoothness3 at 492
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float3 _WorldSpaceCameraPos;
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_OcclusionMaskSelector;
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _LightColor0;
    float4 hlslcc_mtx4x4unity_WorldToLight[4];
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float3 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_ShadowMapTexture [[ sampler (1) ]],
    sampler sampler_LightTexture0 [[ sampler (2) ]],
    sampler sampler_LightTextureB0 [[ sampler (3) ]],
    sampler sampler_Control [[ sampler (4) ]],
    sampler sampler_Splat0 [[ sampler (5) ]],
    sampler sampler_Splat1 [[ sampler (6) ]],
    sampler sampler_Splat2 [[ sampler (7) ]],
    sampler sampler_Splat3 [[ sampler (8) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (9) ]],
    sampler sampler_Normal0 [[ sampler (10) ]],
    sampler sampler_Normal1 [[ sampler (11) ]],
    sampler sampler_Normal2 [[ sampler (12) ]],
    sampler sampler_Normal3 [[ sampler (13) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (14) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _LightTextureB0 [[ texture(10) ]] ,
    texturecube<float, access::sample > _LightTexture0 [[ texture(11) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(12) ]] ,
    depthcube<float, access::sample > _ShadowMapTexture [[ texture(13) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(14) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float3 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float3 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float4 u_xlat8;
    float3 u_xlat9;
    float3 u_xlat10;
    float u_xlat11;
    float u_xlat12;
    bool u_xlatb12;
    float u_xlat13;
    float3 u_xlat15;
    float u_xlat20;
    float u_xlat22;
    bool u_xlatb22;
    float2 u_xlat25;
    float2 u_xlat26;
    float u_xlat30;
    bool u_xlatb30;
    float u_xlat31;
    bool u_xlatb31;
    float u_xlat32;
    float u_xlat33;
    u_xlat0.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceLightPos0.xyz;
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat1.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = (-input.TEXCOORD3.xyz) + FGlobals._WorldSpaceCameraPos.xyzx.xyz;
    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat31 = rsqrt(u_xlat31);
    u_xlat3.xyz = float3(u_xlat31) * u_xlat2.xyz;
    u_xlat31 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD4.xy).x;
    u_xlatb31 = u_xlat31==0.0;
    if(((int(u_xlatb31) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat4.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat4.xy = fma(input.TEXCOORD4.xy, u_xlat4.xy, float2(0.5, 0.5));
    u_xlat4.xy = u_xlat4.xy * FGlobals._Control_TexelSize.xy;
    u_xlat4 = _Control.sample(sampler_Control, u_xlat4.xy);
    u_xlat31 = dot(u_xlat4, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat32 = u_xlat31 + 0.00100000005;
    u_xlat4 = u_xlat4 / float4(u_xlat32);
    u_xlat5.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat25.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat6.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat26.xy = fma(input.TEXCOORD4.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat7 = _Splat0.sample(sampler_Splat0, u_xlat5.xy);
    u_xlat7 = u_xlat4.xxxx * u_xlat7;
    u_xlat7.w = u_xlat7.w * FGlobals._Smoothness0;
    u_xlat8 = _Splat1.sample(sampler_Splat1, u_xlat25.xy);
    u_xlat8 = u_xlat4.yyyy * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness1;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat8 = u_xlat4.zzzz * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness2;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8 = _Splat3.sample(sampler_Splat3, u_xlat26.xy);
    u_xlat8 = u_xlat4.wwww * u_xlat8;
    u_xlat8.w = u_xlat8.w * FGlobals._Smoothness3;
    u_xlat7 = u_xlat7 + u_xlat8;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat5.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat5.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat5.xy * float2(FGlobals._NormalScale0);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = _Normal1.sample(sampler_Normal1, u_xlat25.xy).xyw;
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat5.xy * float2(FGlobals._NormalScale1);
    u_xlat32 = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat5.z = sqrt(u_xlat32);
    u_xlat5.xyz = u_xlat4.yyy * u_xlat5.xyz;
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.xxx, u_xlat5.xyz);
    u_xlat8.xyz = _Normal2.sample(sampler_Normal2, u_xlat6.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat6.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat8.xy = u_xlat6.xy * float2(FGlobals._NormalScale2);
    u_xlat32 = dot(u_xlat8.xy, u_xlat8.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat8.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat8.xyz, u_xlat4.zzz, u_xlat5.xyz);
    u_xlat6.xyz = _Normal3.sample(sampler_Normal3, u_xlat26.xy).xyw;
    u_xlat6.x = u_xlat6.z * u_xlat6.x;
    u_xlat6.xy = fma(u_xlat6.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat6.xy * float2(FGlobals._NormalScale3);
    u_xlat32 = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat32 = min(u_xlat32, 1.0);
    u_xlat32 = (-u_xlat32) + 1.0;
    u_xlat6.z = sqrt(u_xlat32);
    u_xlat5.xyz = fma(u_xlat6.xyz, u_xlat4.www, u_xlat5.xyz);
    u_xlat32 = u_xlat5.z + 9.99999975e-06;
    u_xlat6.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD4.zw).xyz;
    u_xlat6.xyz = fma(u_xlat6.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat33 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat6.xyz = float3(u_xlat33) * u_xlat6.xyz;
    u_xlat8.xyz = u_xlat6.yzx * float3(0.0, 0.0, 1.0);
    u_xlat8.xyz = fma(u_xlat6.zxy, float3(1.0, 0.0, 0.0), (-u_xlat8.xyz));
    u_xlat33 = dot(u_xlat8.xz, u_xlat8.xz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat8.xyz = float3(u_xlat33) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat6.zxy * u_xlat8.yzx;
    u_xlat9.xyz = fma(u_xlat8.zxy, u_xlat6.yzx, (-u_xlat9.xyz));
    u_xlat33 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat33 = rsqrt(u_xlat33);
    u_xlat9.xyz = float3(u_xlat33) * u_xlat9.xyz;
    u_xlat15.xyz = u_xlat5.yyy * u_xlat9.xyz;
    u_xlat5.xyz = fma(u_xlat5.xxx, u_xlat8.xyz, u_xlat15.xyz);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat6.xyz, u_xlat5.xyz);
    u_xlat32 = dot(u_xlat4, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat4.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[0].xyz, input.TEXCOORD3.xxx, u_xlat4.xyz);
    u_xlat4.xyz = fma(FGlobals.hlslcc_mtx4x4unity_WorldToLight[2].xyz, input.TEXCOORD3.zzz, u_xlat4.xyz);
    u_xlat4.xyz = u_xlat4.xyz + FGlobals.hlslcc_mtx4x4unity_WorldToLight[3].xyz;
    u_xlat6.x = FGlobals.hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat6.y = FGlobals.hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat6.z = FGlobals.hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat6.xyz);
    u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals.unity_ShadowFadeCenterAndType.xyz);
    u_xlat12 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat2.x) + u_xlat12;
    u_xlat2.x = fma(FGlobals.unity_ShadowFadeCenterAndType.w, u_xlat12, u_xlat2.x);
    u_xlat2.x = fma(u_xlat2.x, FGlobals._LightShadowData.z, FGlobals._LightShadowData.w);
    u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
    u_xlatb12 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb12){
        u_xlatb12 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat6.xyz = input.TEXCOORD3.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD3.xxx, u_xlat6.xyz);
        u_xlat6.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD3.zzz, u_xlat6.xyz);
        u_xlat6.xyz = u_xlat6.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat6.xyz = (bool(u_xlatb12)) ? u_xlat6.xyz : input.TEXCOORD3.xyz;
        u_xlat6.xyz = u_xlat6.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat6.yzw = u_xlat6.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat12 = fma(u_xlat6.y, 0.25, 0.75);
        u_xlat22 = fma(FGlobals.unity_ProbeVolumeParams.z, 0.5, 0.75);
        u_xlat6.x = max(u_xlat22, u_xlat12);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat6.xzw);
    } else {
        u_xlat6.x = float(1.0);
        u_xlat6.y = float(1.0);
        u_xlat6.z = float(1.0);
        u_xlat6.w = float(1.0);
    }
    u_xlat12 = dot(u_xlat6, FGlobals.unity_OcclusionMaskSelector);
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlatb22 = u_xlat2.x<0.99000001;
    if(u_xlatb22){
        u_xlat6.xyz = input.TEXCOORD3.xyz + (-FGlobals._LightPositionRange.xyz);
        u_xlat22 = max(abs(u_xlat6.y), abs(u_xlat6.x));
        u_xlat22 = max(abs(u_xlat6.z), u_xlat22);
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.z);
        u_xlat22 = max(u_xlat22, 9.99999975e-06);
        u_xlat22 = u_xlat22 * FGlobals._LightProjectionParams.w;
        u_xlat22 = FGlobals._LightProjectionParams.y / u_xlat22;
        u_xlat22 = u_xlat22 + (-FGlobals._LightProjectionParams.x);
        u_xlat22 = (-u_xlat22) + 1.0;
        u_xlat8.xyz = u_xlat6.xyz + float3(0.0078125, 0.0078125, 0.0078125);
        u_xlat8.x = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat8.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, -0.0078125, 0.0078125);
        u_xlat8.y = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat9.xyz = u_xlat6.xyz + float3(-0.0078125, 0.0078125, -0.0078125);
        u_xlat8.z = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat9.xyz, saturate(u_xlat22), level(0.0));
        u_xlat6.xyz = u_xlat6.xyz + float3(0.0078125, -0.0078125, -0.0078125);
        u_xlat8.w = _ShadowMapTexture.sample_compare(sampler_ShadowMapTexture, u_xlat6.xyz, saturate(u_xlat22), level(0.0));
        u_xlat22 = dot(u_xlat8, float4(0.25, 0.25, 0.25, 0.25));
        u_xlat33 = (-FGlobals._LightShadowData.x) + 1.0;
        u_xlat22 = fma(u_xlat22, u_xlat33, FGlobals._LightShadowData.x);
    } else {
        u_xlat22 = 1.0;
    }
    u_xlat12 = (-u_xlat22) + u_xlat12;
    u_xlat2.x = fma(u_xlat2.x, u_xlat12, u_xlat22);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = _LightTextureB0.sample(sampler_LightTextureB0, float2(u_xlat12)).x;
    u_xlat22 = _LightTexture0.sample(sampler_LightTexture0, u_xlat4.xyz).w;
    u_xlat12 = u_xlat22 * u_xlat12;
    u_xlat2.x = u_xlat2.x * u_xlat12;
    u_xlat4.x = dot(input.TEXCOORD0.xyz, u_xlat5.xyz);
    u_xlat4.y = dot(input.TEXCOORD1.xyz, u_xlat5.xyz);
    u_xlat4.z = dot(input.TEXCOORD2.xyz, u_xlat5.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat4.xyz = float3(u_xlat12) * u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xxx * FGlobals._LightColor0.xyz;
    u_xlat5.xyz = u_xlat7.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat5.xyz = fma(float3(u_xlat32), u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat32 = fma((-u_xlat32), 0.779083729, 0.779083729);
    u_xlat6.xyz = float3(u_xlat32) * u_xlat7.xyz;
    u_xlat32 = (-u_xlat7.w) + 1.0;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(u_xlat30), u_xlat3.xyz);
    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat30 = max(u_xlat30, 0.00100000005);
    u_xlat30 = rsqrt(u_xlat30);
    u_xlat0.xyz = float3(u_xlat30) * u_xlat0.xyz;
    u_xlat30 = dot(u_xlat4.xyz, u_xlat3.xyz);
    u_xlat3.x = dot(u_xlat4.xyz, u_xlat1.xyz);
    u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
    u_xlat13 = dot(u_xlat4.xyz, u_xlat0.xyz);
    u_xlat13 = clamp(u_xlat13, 0.0f, 1.0f);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat0.x = clamp(u_xlat0.x, 0.0f, 1.0f);
    u_xlat10.x = u_xlat0.x * u_xlat0.x;
    u_xlat10.x = dot(u_xlat10.xx, float2(u_xlat32));
    u_xlat10.x = u_xlat10.x + -0.5;
    u_xlat20 = (-u_xlat3.x) + 1.0;
    u_xlat1.x = u_xlat20 * u_xlat20;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat1.x;
    u_xlat20 = fma(u_xlat10.x, u_xlat20, 1.0);
    u_xlat1.x = -abs(u_xlat30) + 1.0;
    u_xlat11 = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat11 * u_xlat11;
    u_xlat1.x = u_xlat1.x * u_xlat11;
    u_xlat10.x = fma(u_xlat10.x, u_xlat1.x, 1.0);
    u_xlat10.x = u_xlat10.x * u_xlat20;
    u_xlat20 = u_xlat32 * u_xlat32;
    u_xlat20 = max(u_xlat20, 0.00200000009);
    u_xlat1.x = (-u_xlat20) + 1.0;
    u_xlat11 = fma(abs(u_xlat30), u_xlat1.x, u_xlat20);
    u_xlat1.x = fma(u_xlat3.x, u_xlat1.x, u_xlat20);
    u_xlat30 = abs(u_xlat30) * u_xlat1.x;
    u_xlat30 = fma(u_xlat3.x, u_xlat11, u_xlat30);
    u_xlat30 = u_xlat30 + 9.99999975e-06;
    u_xlat30 = 0.5 / u_xlat30;
    u_xlat20 = u_xlat20 * u_xlat20;
    u_xlat1.x = fma(u_xlat13, u_xlat20, (-u_xlat13));
    u_xlat1.x = fma(u_xlat1.x, u_xlat13, 1.0);
    u_xlat20 = u_xlat20 * 0.318309873;
    u_xlat1.x = fma(u_xlat1.x, u_xlat1.x, 1.00000001e-07);
    u_xlat20 = u_xlat20 / u_xlat1.x;
    u_xlat20 = u_xlat20 * u_xlat30;
    u_xlat20 = u_xlat20 * 3.14159274;
    u_xlat20 = max(u_xlat20, 9.99999975e-05);
    u_xlat10.y = sqrt(u_xlat20);
    u_xlat10.xy = u_xlat3.xx * u_xlat10.xy;
    u_xlat30 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlatb30 = u_xlat30!=0.0;
    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
    u_xlat20 = u_xlat30 * u_xlat10.y;
    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat10.xyz = u_xlat2.xyz * float3(u_xlat20);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat2.x = u_xlat0.x * u_xlat0.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat0.x = u_xlat0.x * u_xlat2.x;
    u_xlat2.xyz = (-u_xlat5.xyz) + float3(1.0, 1.0, 1.0);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.xxx, u_xlat5.xyz);
    u_xlat0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat0.xyz = fma(u_xlat6.xyz, u_xlat1.xyz, u_xlat0.xyz);
    output.SV_Target0.xyz = float3(u_xlat31) * u_xlat0.xyz;
    output.SV_Target0.w = 1.0;
    return output;
}


 }
 Pass {
  Name "DEFERRED"
  Tags { "LIGHTMODE"="DEFERRED" "QUEUE"="Geometry-100" "RenderType"="Opaque" "TerrainCompatible"="true" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords: <none>
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (128 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0
Set 2D Texture "_Splat0" to slot 1
Set 2D Texture "_Splat1" to slot 2
Set 2D Texture "_Splat2" to slot 3
Set 2D Texture "_Splat3" to slot 4

Constant Buffer "FGlobals" (112 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _Metallic0 at 80
  Float _Metallic1 at 84
  Float _Metallic2 at 88
  Float _Metallic3 at 92
  Float _Smoothness0 at 96
  Float _Smoothness1 at 100
  Float _Smoothness2 at 104
  Float _Smoothness3 at 108
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat2;
    float4 u_xlat3;
    float3 u_xlat5;
    float2 u_xlat6;
    u_xlat0.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat0 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat1.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat1.xy = fma(input.TEXCOORD2.xy, u_xlat1.xy, float2(0.5, 0.5));
    u_xlat1.xy = u_xlat1.xy * FGlobals._Control_TexelSize.xy;
    u_xlat1 = _Control.sample(sampler_Control, u_xlat1.xy);
    u_xlat2 = dot(u_xlat1, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat6.x = u_xlat2 + 0.00100000005;
    u_xlat1 = u_xlat1 / u_xlat6.xxxx;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0.w = u_xlat0.w * FGlobals._Smoothness0;
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat6.xy);
    u_xlat3 = u_xlat1.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat3 = u_xlat1.zzzz * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness2;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat6.xy);
    u_xlat3 = u_xlat1.wwww * u_xlat3;
    u_xlat1.x = dot(u_xlat1, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat5.x = fma((-u_xlat1.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
    output.SV_Target0.xyz = float3(u_xlat2) * u_xlat5.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat5.xyz = u_xlat0.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(u_xlat1.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat2) * u_xlat0;
    u_xlat0.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat2) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat2);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: LIGHTPROBE_SH
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat6));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD5.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat6), u_xlat0.xyz);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 0

Constant Buffer "FGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD2.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat2 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat2 = u_xlat0.zzzz * u_xlat2;
    u_xlat2.w = u_xlat2.w * FGlobals._Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat3 = u_xlat0.wwww * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat7.xyz = u_xlat4.xyz + input.TEXCOORD5.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.xyz = exp2((-u_xlat0.xyz));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat2.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: UNITY_HDR_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (128 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    output.TEXCOORD0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0
Set 2D Texture "_Splat0" to slot 1
Set 2D Texture "_Splat1" to slot 2
Set 2D Texture "_Splat2" to slot 3
Set 2D Texture "_Splat3" to slot 4

Constant Buffer "FGlobals" (112 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _Metallic0 at 80
  Float _Metallic1 at 84
  Float _Metallic2 at 88
  Float _Metallic3 at 92
  Float _Smoothness0 at 96
  Float _Smoothness1 at 100
  Float _Smoothness2 at 104
  Float _Smoothness3 at 108
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat2;
    float4 u_xlat3;
    float3 u_xlat5;
    float2 u_xlat6;
    u_xlat0.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat0 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat1.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat1.xy = fma(input.TEXCOORD2.xy, u_xlat1.xy, float2(0.5, 0.5));
    u_xlat1.xy = u_xlat1.xy * FGlobals._Control_TexelSize.xy;
    u_xlat1 = _Control.sample(sampler_Control, u_xlat1.xy);
    u_xlat2 = dot(u_xlat1, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat6.x = u_xlat2 + 0.00100000005;
    u_xlat1 = u_xlat1 / u_xlat6.xxxx;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0.w = u_xlat0.w * FGlobals._Smoothness0;
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat6.xy);
    u_xlat3 = u_xlat1.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat3 = u_xlat1.zzzz * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness2;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat6.xy);
    u_xlat3 = u_xlat1.wwww * u_xlat3;
    u_xlat1.x = dot(u_xlat1, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat5.x = fma((-u_xlat1.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
    output.SV_Target0.xyz = float3(u_xlat2) * u_xlat5.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat5.xyz = u_xlat0.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(u_xlat1.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat2) * u_xlat0;
    u_xlat0.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat2) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat2) * float4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: LIGHTPROBE_SH UNITY_HDR_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_MatrixVP at 128
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD4 [[ user(TEXCOORD4) ]];
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat6;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat0 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat0);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = rsqrt(u_xlat6);
    u_xlat0.xyz = float3(u_xlat6) * u_xlat0.xyz;
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    output.TEXCOORD4 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat6 = u_xlat0.y * u_xlat0.y;
    u_xlat6 = fma(u_xlat0.x, u_xlat0.x, (-u_xlat6));
    u_xlat1 = u_xlat0.yzzx * u_xlat0.xyzz;
    u_xlat0.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat0.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat0.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD5.xyz = fma(VGlobals.unity_SHC.xyz, float3(u_xlat6), u_xlat0.xyz);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 0

Constant Buffer "FGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD2.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat2 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat2 = u_xlat0.zzzz * u_xlat2;
    u_xlat2.w = u_xlat2.w * FGlobals._Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat3 = u_xlat0.wwww * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat7.xyz = u_xlat4.xyz + input.TEXCOORD5.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat2.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat0.xw));
    u_xlat1.xyz = u_xlat0.www * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xy = input.TEXCOORD0.xy;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0
Set 2D Texture "_Splat0" to slot 1
Set 2D Texture "_Splat1" to slot 2
Set 2D Texture "_Splat2" to slot 3
Set 2D Texture "_Splat3" to slot 4
Set 2D Texture "_Normal0" to slot 5
Set 2D Texture "_Normal1" to slot 6
Set 2D Texture "_Normal2" to slot 7
Set 2D Texture "_Normal3" to slot 8

Constant Buffer "FGlobals" (128 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _NormalScale0 at 80
  Float _NormalScale1 at 84
  Float _NormalScale2 at 88
  Float _NormalScale3 at 92
  Float _Metallic0 at 96
  Float _Metallic1 at 100
  Float _Metallic2 at 104
  Float _Metallic3 at 108
  Float _Smoothness0 at 112
  Float _Smoothness1 at 116
  Float _Smoothness2 at 120
  Float _Smoothness3 at 124
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler_Normal0 [[ sampler (5) ]],
    sampler sampler_Normal1 [[ sampler (6) ]],
    sampler sampler_Normal2 [[ sampler (7) ]],
    sampler sampler_Normal3 [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    float u_xlat22;
    float u_xlat24;
    float u_xlat25;
    u_xlat0.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat1 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat0.xyz = _Normal0.sample(sampler_Normal0, u_xlat0.xy).xyw;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat21 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat21 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
    u_xlat1.w = u_xlat1.w * FGlobals._Smoothness0;
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat3.xy);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat3.xy).xyw;
    u_xlat4 = u_xlat2.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat1 = u_xlat1 + u_xlat4;
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat4.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat1 = u_xlat1 + u_xlat5;
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat5.xy);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat5.xy).xyw;
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat1 = u_xlat1 + u_xlat6;
    u_xlat24 = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat25 = fma((-u_xlat24), 0.779083729, 0.779083729);
    u_xlat6.xyz = u_xlat1.xyz * float3(u_xlat25);
    output.SV_Target0.xyz = float3(u_xlat21) * u_xlat6.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat6.xyz = u_xlat1.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = fma(float3(u_xlat24), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat21) * u_xlat1;
    u_xlat0.x = u_xlat0.z * u_xlat0.x;
    u_xlat0.xy = fma(u_xlat0.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat0.xy = u_xlat0.xy * float2(FGlobals._NormalScale0);
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat0.z = sqrt(u_xlat1.x);
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat1.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale1);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, u_xlat2.xxx, u_xlat1.xyz);
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat1.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale2);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat2.zzz, u_xlat0.xyz);
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat1.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale3);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat1.xyz = fma(u_xlat1.xyz, u_xlat2.www, u_xlat0.xyz);
    u_xlat1.w = u_xlat1.z + 9.99999975e-06;
    u_xlat0.x = dot(input.TEXCOORD0.xyz, u_xlat1.xyw);
    u_xlat0.y = dot(input.TEXCOORD1.xyz, u_xlat1.xyw);
    u_xlat0.z = dot(input.TEXCOORD2.xyz, u_xlat1.xyw);
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat21);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: LIGHTPROBE_SH _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_WorldTransformParams at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat0.xw));
    u_xlat1.xyz = u_xlat0.www * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD0.x = u_xlat1.z;
    u_xlat2 = input.NORMAL0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyzz, input.NORMAL0.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyzz, input.NORMAL0.zzzz, u_xlat2);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * u_xlat2;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = fma(u_xlat2.ywx, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.z = u_xlat2.x;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD1.z = u_xlat2.y;
    output.TEXCOORD2.z = u_xlat2.w;
    output.TEXCOORD3.xy = input.TEXCOORD0.xy;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = fma(u_xlat2.x, u_xlat2.x, (-u_xlat0.x));
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 2D Texture "_Normal0" to slot 5 sampler slot 6
Set 2D Texture "_Normal1" to slot 6 sampler slot 7
Set 2D Texture "_Normal2" to slot 7 sampler slot 8
Set 2D Texture "_Normal3" to slot 8 sampler slot 9
Set 3D Texture "unity_ProbeVolumeSH" to slot 9 sampler slot 0

Constant Buffer "FGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _NormalScale0 at 240
  Float _NormalScale1 at 244
  Float _NormalScale2 at 248
  Float _NormalScale3 at 252
  Float _Metallic0 at 256
  Float _Metallic1 at 260
  Float _Metallic2 at 264
  Float _Metallic3 at 268
  Float _Smoothness0 at 272
  Float _Smoothness1 at 276
  Float _Smoothness2 at 280
  Float _Smoothness3 at 284
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler_Normal0 [[ sampler (6) ]],
    sampler sampler_Normal1 [[ sampler (7) ]],
    sampler sampler_Normal2 [[ sampler (8) ]],
    sampler sampler_Normal3 [[ sampler (9) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat10;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    float u_xlat23;
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD3.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat5 = u_xlat0.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat5 = u_xlat0.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat8.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat8.xy * float2(FGlobals._NormalScale0);
    u_xlat8.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat5.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = _Normal1.sample(sampler_Normal1, u_xlat2.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat8.xy * float2(FGlobals._NormalScale1);
    u_xlat8.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat0.yyy * u_xlat6.xyz;
    u_xlat8.xyz = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat8.xyz);
    u_xlat2.xyz = _Normal2.sample(sampler_Normal2, u_xlat16.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale2);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat8.xyz = fma(u_xlat2.xyz, u_xlat0.zzz, u_xlat8.xyz);
    u_xlat2.xyz = _Normal3.sample(sampler_Normal3, u_xlat3.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale3);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.www, u_xlat8.xyz);
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat2.w = u_xlat2.z + 9.99999975e-06;
    u_xlat3.x = dot(input.TEXCOORD0.xyz, u_xlat2.xyw);
    u_xlat3.y = dot(input.TEXCOORD1.xyz, u_xlat2.xyw);
    u_xlat3.z = dot(input.TEXCOORD2.xyz, u_xlat2.xyw);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.x = input.TEXCOORD0.w;
        u_xlat10.y = input.TEXCOORD1.w;
        u_xlat10.z = input.TEXCOORD2.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat10.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat2);
        u_xlat5.y = dot(u_xlat6, u_xlat2);
        u_xlat5.z = dot(u_xlat3, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat5.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat5.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD6.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.xyz = exp2((-u_xlat0.xyz));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat4.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: UNITY_HDR_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (144 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat0.xw));
    u_xlat1.xyz = u_xlat0.www * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat2.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].zxy, input.NORMAL0.xxx, u_xlat2.xyz);
    u_xlat2.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].zxy, input.NORMAL0.zzz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat1.z;
    output.TEXCOORD0.z = u_xlat2.y;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.z = u_xlat2.z;
    output.TEXCOORD2.z = u_xlat2.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD3.xy = input.TEXCOORD0.xy;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0
Set 2D Texture "_Splat0" to slot 1
Set 2D Texture "_Splat1" to slot 2
Set 2D Texture "_Splat2" to slot 3
Set 2D Texture "_Splat3" to slot 4
Set 2D Texture "_Normal0" to slot 5
Set 2D Texture "_Normal1" to slot 6
Set 2D Texture "_Normal2" to slot 7
Set 2D Texture "_Normal3" to slot 8

Constant Buffer "FGlobals" (128 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _NormalScale0 at 80
  Float _NormalScale1 at 84
  Float _NormalScale2 at 88
  Float _NormalScale3 at 92
  Float _Metallic0 at 96
  Float _Metallic1 at 100
  Float _Metallic2 at 104
  Float _Metallic3 at 108
  Float _Smoothness0 at 112
  Float _Smoothness1 at 116
  Float _Smoothness2 at 120
  Float _Smoothness3 at 124
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler_Normal0 [[ sampler (5) ]],
    sampler sampler_Normal1 [[ sampler (6) ]],
    sampler sampler_Normal2 [[ sampler (7) ]],
    sampler sampler_Normal3 [[ sampler (8) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    float u_xlat22;
    float u_xlat24;
    float u_xlat25;
    u_xlat0.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat1 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat0.xyz = _Normal0.sample(sampler_Normal0, u_xlat0.xy).xyw;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat21 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat21 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
    u_xlat1.w = u_xlat1.w * FGlobals._Smoothness0;
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat3.xy);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat3.xy).xyw;
    u_xlat4 = u_xlat2.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat1 = u_xlat1 + u_xlat4;
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat4.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat1 = u_xlat1 + u_xlat5;
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat5.xy);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat5.xy).xyw;
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat1 = u_xlat1 + u_xlat6;
    u_xlat24 = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat25 = fma((-u_xlat24), 0.779083729, 0.779083729);
    u_xlat6.xyz = u_xlat1.xyz * float3(u_xlat25);
    output.SV_Target0.xyz = float3(u_xlat21) * u_xlat6.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat6.xyz = u_xlat1.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = fma(float3(u_xlat24), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat21) * u_xlat1;
    u_xlat0.x = u_xlat0.z * u_xlat0.x;
    u_xlat0.xy = fma(u_xlat0.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat0.xy = u_xlat0.xy * float2(FGlobals._NormalScale0);
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat0.z = sqrt(u_xlat1.x);
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat1.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale1);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, u_xlat2.xxx, u_xlat1.xyz);
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat1.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale2);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat2.zzz, u_xlat0.xyz);
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat1.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale3);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat1.xyz = fma(u_xlat1.xyz, u_xlat2.www, u_xlat0.xyz);
    u_xlat1.w = u_xlat1.z + 9.99999975e-06;
    u_xlat0.x = dot(input.TEXCOORD0.xyz, u_xlat1.xyw);
    u_xlat0.y = dot(input.TEXCOORD1.xyz, u_xlat1.xyw);
    u_xlat0.z = dot(input.TEXCOORD2.xyz, u_xlat1.xyw);
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat21) * float4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: LIGHTPROBE_SH UNITY_HDR_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (208 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_WorldTransformParams at 128
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    u_xlat0 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat0);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat0);
    u_xlat1 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    u_xlat2 = u_xlat1.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat1.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat1.zzzz, u_xlat2);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat2);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.xw = input.NORMAL0.zx * float2(0.0, 1.0);
    u_xlat0.xw = fma(input.NORMAL0.yz, float2(1.0, 0.0), (-u_xlat0.xw));
    u_xlat1.xyz = u_xlat0.www * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
    output.TEXCOORD0.x = u_xlat1.z;
    u_xlat2 = input.NORMAL0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyzz, input.NORMAL0.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyzz, input.NORMAL0.zzzz, u_xlat2);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * u_xlat2;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = fma(u_xlat2.ywx, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.z = u_xlat2.x;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD1.z = u_xlat2.y;
    output.TEXCOORD2.z = u_xlat2.w;
    output.TEXCOORD3.xy = input.TEXCOORD0.xy;
    output.TEXCOORD3.zw = float2(0.0, 0.0);
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = fma(u_xlat2.x, u_xlat2.x, (-u_xlat0.x));
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 2D Texture "_Normal0" to slot 5 sampler slot 6
Set 2D Texture "_Normal1" to slot 6 sampler slot 7
Set 2D Texture "_Normal2" to slot 7 sampler slot 8
Set 2D Texture "_Normal3" to slot 8 sampler slot 9
Set 3D Texture "unity_ProbeVolumeSH" to slot 9 sampler slot 0

Constant Buffer "FGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _NormalScale0 at 240
  Float _NormalScale1 at 244
  Float _NormalScale2 at 248
  Float _NormalScale3 at 252
  Float _Metallic0 at 256
  Float _Metallic1 at 260
  Float _Metallic2 at 264
  Float _Metallic3 at 268
  Float _Smoothness0 at 272
  Float _Smoothness1 at 276
  Float _Smoothness2 at 280
  Float _Smoothness3 at 284
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler_Normal0 [[ sampler (6) ]],
    sampler sampler_Normal1 [[ sampler (7) ]],
    sampler sampler_Normal2 [[ sampler (8) ]],
    sampler sampler_Normal3 [[ sampler (9) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat10;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    float u_xlat23;
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD3.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat5 = u_xlat0.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat5 = u_xlat0.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat8.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat8.xy * float2(FGlobals._NormalScale0);
    u_xlat8.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat5.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = _Normal1.sample(sampler_Normal1, u_xlat2.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat8.xy * float2(FGlobals._NormalScale1);
    u_xlat8.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat0.yyy * u_xlat6.xyz;
    u_xlat8.xyz = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat8.xyz);
    u_xlat2.xyz = _Normal2.sample(sampler_Normal2, u_xlat16.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale2);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat8.xyz = fma(u_xlat2.xyz, u_xlat0.zzz, u_xlat8.xyz);
    u_xlat2.xyz = _Normal3.sample(sampler_Normal3, u_xlat3.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale3);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.www, u_xlat8.xyz);
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat2.w = u_xlat2.z + 9.99999975e-06;
    u_xlat3.x = dot(input.TEXCOORD0.xyz, u_xlat2.xyw);
    u_xlat3.y = dot(input.TEXCOORD1.xyz, u_xlat2.xyw);
    u_xlat3.z = dot(input.TEXCOORD2.xyz, u_xlat2.xyw);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.x = input.TEXCOORD0.w;
        u_xlat10.y = input.TEXCOORD1.w;
        u_xlat10.z = input.TEXCOORD2.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat10.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat2);
        u_xlat5.y = dot(u_xlat6, u_xlat2);
        u_xlat5.z = dot(u_xlat3, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat5.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat5.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD6.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat4.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 144
  Vector4 _TerrainHeightmapScale at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON LIGHTPROBE_SH
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_WorldTransformParams at 128
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    output.TEXCOORD0.x = u_xlat1.z;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = fma(u_xlat2.ywx, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.z = u_xlat2.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD1.z = u_xlat2.y;
    output.TEXCOORD2.z = u_xlat2.w;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = fma(u_xlat2.x, u_xlat2.x, (-u_xlat0.x));
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 5
Set 2D Texture "_Control" to slot 1 sampler slot 0
Set 2D Texture "_Splat0" to slot 2 sampler slot 1
Set 2D Texture "_Splat1" to slot 3 sampler slot 2
Set 2D Texture "_Splat2" to slot 4 sampler slot 3
Set 2D Texture "_Splat3" to slot 5 sampler slot 4

Constant Buffer "FGlobals" (112 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _Metallic0 at 80
  Float _Metallic1 at 84
  Float _Metallic2 at 88
  Float _Metallic3 at 92
  Float _Smoothness0 at 96
  Float _Smoothness1 at 100
  Float _Smoothness2 at 104
  Float _Smoothness3 at 108
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (5) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat2;
    float4 u_xlat3;
    float3 u_xlat5;
    float2 u_xlat6;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat0 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat1.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat1.xy = fma(input.TEXCOORD2.xy, u_xlat1.xy, float2(0.5, 0.5));
    u_xlat1.xy = u_xlat1.xy * FGlobals._Control_TexelSize.xy;
    u_xlat1 = _Control.sample(sampler_Control, u_xlat1.xy);
    u_xlat2 = dot(u_xlat1, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat6.x = u_xlat2 + 0.00100000005;
    u_xlat1 = u_xlat1 / u_xlat6.xxxx;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0.w = u_xlat0.w * FGlobals._Smoothness0;
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat6.xy);
    u_xlat3 = u_xlat1.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat3 = u_xlat1.zzzz * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness2;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat6.xy);
    u_xlat3 = u_xlat1.wwww * u_xlat3;
    u_xlat1.x = dot(u_xlat1, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat5.x = fma((-u_xlat1.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
    output.SV_Target0.xyz = float3(u_xlat2) * u_xlat5.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat5.xyz = u_xlat0.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(u_xlat1.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat2) * u_xlat0;
    u_xlat0.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat2) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat2);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: LIGHTPROBE_SH _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 6
Set 2D Texture "_Control" to slot 1
Set 2D Texture "_Splat0" to slot 2
Set 2D Texture "_Splat1" to slot 3
Set 2D Texture "_Splat2" to slot 4
Set 2D Texture "_Splat3" to slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0

Constant Buffer "FGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (6) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD2.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat2 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat2 = u_xlat0.zzzz * u_xlat2;
    u_xlat2.w = u_xlat2.w * FGlobals._Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat3 = u_xlat0.wwww * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat7.xyz = u_xlat4.xyz + input.TEXCOORD5.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.xyz = exp2((-u_xlat0.xyz));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat2.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON UNITY_HDR_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 144
  Vector4 _TerrainHeightmapScale at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON LIGHTPROBE_SH UNITY_HDR_ON
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_WorldTransformParams at 128
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    output.TEXCOORD0.x = u_xlat1.z;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = fma(u_xlat2.ywx, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.z = u_xlat2.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD1.z = u_xlat2.y;
    output.TEXCOORD2.z = u_xlat2.w;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = fma(u_xlat2.x, u_xlat2.x, (-u_xlat0.x));
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 144
  Vector4 _TerrainHeightmapScale at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON LIGHTPROBE_SH _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_WorldTransformParams at 128
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    output.TEXCOORD0.x = u_xlat1.z;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = fma(u_xlat2.ywx, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.z = u_xlat2.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD1.z = u_xlat2.y;
    output.TEXCOORD2.z = u_xlat2.w;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = fma(u_xlat2.x, u_xlat2.x, (-u_xlat0.x));
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON UNITY_HDR_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (176 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_MatrixVP at 80
  Vector4 unity_WorldTransformParams at 64
  Vector4 _TerrainHeightmapRecipSize at 144
  Vector4 _TerrainHeightmapScale at 160
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].zxy;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
    u_xlat3.xyz = fma(u_xlat1.zxy, u_xlat2.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.x = u_xlat2.z;
    output.TEXCOORD0.z = u_xlat1.y;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat2.x;
    output.TEXCOORD2.x = u_xlat2.y;
    output.TEXCOORD1.z = u_xlat1.z;
    output.TEXCOORD2.z = u_xlat1.x;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON LIGHTPROBE_SH UNITY_HDR_ON _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (240 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 64
  Matrix4x4 unity_MatrixVP at 144
  Vector4 unity_SHBr at 0
  Vector4 unity_SHBg at 16
  Vector4 unity_SHBb at 32
  Vector4 unity_SHC at 48
  Vector4 unity_WorldTransformParams at 128
  Vector4 _TerrainHeightmapRecipSize at 208
  Vector4 _TerrainHeightmapScale at 224
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 unity_WorldTransformParams;
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    int u_xlati0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float2 u_xlat4;
    float u_xlat12;
    u_xlati0 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xyxy;
    u_xlat4.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD3.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat4.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat4.xy);
    u_xlat12 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat4.xy, level(0.0)).x;
    output.TEXCOORD3.zw = u_xlat4.xy;
    u_xlat4.x = u_xlat12 * VGlobals._TerrainHeightmapScale.y;
    u_xlat1 = u_xlat4.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat4.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.xy;
    u_xlat4.xy = u_xlat4.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat0.xy = u_xlat4.xy * UnityInstancing_Terrain[u_xlati0]._TerrainPatchInstanceData.zz;
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.yyyy, u_xlat1);
    u_xlat0 = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    output.TEXCOORD0.w = u_xlat0.x;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat1.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].yzx;
    output.TEXCOORD0.x = u_xlat1.z;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat2 = u_xlat0.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyzz;
    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
    u_xlat3.xyz = fma(u_xlat2.ywx, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat3.xyz = u_xlat3.xyz * (-VGlobals.unity_WorldTransformParams.www);
    output.TEXCOORD0.y = u_xlat3.x;
    output.TEXCOORD0.z = u_xlat2.x;
    output.TEXCOORD1.w = u_xlat0.y;
    output.TEXCOORD2.w = u_xlat0.z;
    output.TEXCOORD1.x = u_xlat1.x;
    output.TEXCOORD2.x = u_xlat1.y;
    output.TEXCOORD1.y = u_xlat3.y;
    output.TEXCOORD2.y = u_xlat3.z;
    output.TEXCOORD1.z = u_xlat2.y;
    output.TEXCOORD2.z = u_xlat2.w;
    output.TEXCOORD5 = float4(0.0, 0.0, 0.0, 0.0);
    u_xlat0.x = u_xlat2.y * u_xlat2.y;
    u_xlat0.x = fma(u_xlat2.x, u_xlat2.x, (-u_xlat0.x));
    u_xlat1 = u_xlat2.ywzx * u_xlat2;
    u_xlat2.x = dot(VGlobals.unity_SHBr, u_xlat1);
    u_xlat2.y = dot(VGlobals.unity_SHBg, u_xlat1);
    u_xlat2.z = dot(VGlobals.unity_SHBb, u_xlat1);
    output.TEXCOORD6.xyz = fma(VGlobals.unity_SHC.xyz, u_xlat0.xxx, u_xlat2.xyz);
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: UNITY_HDR_ON _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 5
Set 2D Texture "_Control" to slot 1 sampler slot 0
Set 2D Texture "_Splat0" to slot 2 sampler slot 1
Set 2D Texture "_Splat1" to slot 3 sampler slot 2
Set 2D Texture "_Splat2" to slot 4 sampler slot 3
Set 2D Texture "_Splat3" to slot 5 sampler slot 4

Constant Buffer "FGlobals" (112 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _Metallic0 at 80
  Float _Metallic1 at 84
  Float _Metallic2 at 88
  Float _Metallic3 at 92
  Float _Smoothness0 at 96
  Float _Smoothness1 at 100
  Float _Smoothness2 at 104
  Float _Smoothness3 at 108
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (5) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat2;
    float4 u_xlat3;
    float3 u_xlat5;
    float2 u_xlat6;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat0 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat1.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat1.xy = fma(input.TEXCOORD2.xy, u_xlat1.xy, float2(0.5, 0.5));
    u_xlat1.xy = u_xlat1.xy * FGlobals._Control_TexelSize.xy;
    u_xlat1 = _Control.sample(sampler_Control, u_xlat1.xy);
    u_xlat2 = dot(u_xlat1, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat6.x = u_xlat2 + 0.00100000005;
    u_xlat1 = u_xlat1 / u_xlat6.xxxx;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0.w = u_xlat0.w * FGlobals._Smoothness0;
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat6.xy);
    u_xlat3 = u_xlat1.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat3 = u_xlat1.zzzz * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness2;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat6.xy);
    u_xlat3 = u_xlat1.wwww * u_xlat3;
    u_xlat1.x = dot(u_xlat1, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat5.x = fma((-u_xlat1.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
    output.SV_Target0.xyz = float3(u_xlat2) * u_xlat5.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat5.xyz = u_xlat0.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(u_xlat1.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat2) * u_xlat0;
    u_xlat0.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat2) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat2) * float4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: LIGHTPROBE_SH UNITY_HDR_ON _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 6
Set 2D Texture "_Control" to slot 1
Set 2D Texture "_Splat0" to slot 2
Set 2D Texture "_Splat1" to slot 3
Set 2D Texture "_Splat2" to slot 4
Set 2D Texture "_Splat3" to slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0

Constant Buffer "FGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float3 TEXCOORD5 [[ user(TEXCOORD5) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (6) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD2.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD2.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat2 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat2 = u_xlat0.zzzz * u_xlat2;
    u_xlat2.w = u_xlat2.w * FGlobals._Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat3 = u_xlat0.wwww * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.yyy * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD1.xxx, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD1.zzz, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : input.TEXCOORD1.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat6.xyz = input.TEXCOORD0.xyz;
        u_xlat6.w = 1.0;
        u_xlat4.x = dot(u_xlat4, u_xlat6);
        u_xlat4.y = dot(u_xlat5, u_xlat6);
        u_xlat4.z = dot(u_xlat3, u_xlat6);
    } else {
        u_xlat3.xyz = input.TEXCOORD0.xyz;
        u_xlat3.w = 1.0;
        u_xlat4.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat4.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat4.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat7.xyz = u_xlat4.xyz + input.TEXCOORD5.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(input.TEXCOORD0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat2.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 9
Set 2D Texture "_Control" to slot 1 sampler slot 0
Set 2D Texture "_Splat0" to slot 2 sampler slot 1
Set 2D Texture "_Splat1" to slot 3 sampler slot 2
Set 2D Texture "_Splat2" to slot 4 sampler slot 3
Set 2D Texture "_Splat3" to slot 5 sampler slot 4
Set 2D Texture "_Normal0" to slot 6 sampler slot 5
Set 2D Texture "_Normal1" to slot 7 sampler slot 6
Set 2D Texture "_Normal2" to slot 8 sampler slot 7
Set 2D Texture "_Normal3" to slot 9 sampler slot 8

Constant Buffer "FGlobals" (128 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _NormalScale0 at 80
  Float _NormalScale1 at 84
  Float _NormalScale2 at 88
  Float _NormalScale3 at 92
  Float _Metallic0 at 96
  Float _Metallic1 at 100
  Float _Metallic2 at 104
  Float _Metallic3 at 108
  Float _Smoothness0 at 112
  Float _Smoothness1 at 116
  Float _Smoothness2 at 120
  Float _Smoothness3 at 124
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler_Normal0 [[ sampler (5) ]],
    sampler sampler_Normal1 [[ sampler (6) ]],
    sampler sampler_Normal2 [[ sampler (7) ]],
    sampler sampler_Normal3 [[ sampler (8) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    float u_xlat22;
    float u_xlat24;
    float u_xlat25;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat1 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat0.xyz = _Normal0.sample(sampler_Normal0, u_xlat0.xy).xyw;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat21 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat21 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
    u_xlat1.w = u_xlat1.w * FGlobals._Smoothness0;
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat3.xy);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat3.xy).xyw;
    u_xlat4 = u_xlat2.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat1 = u_xlat1 + u_xlat4;
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat4.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat1 = u_xlat1 + u_xlat5;
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat5.xy);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat5.xy).xyw;
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat1 = u_xlat1 + u_xlat6;
    u_xlat24 = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat25 = fma((-u_xlat24), 0.779083729, 0.779083729);
    u_xlat6.xyz = u_xlat1.xyz * float3(u_xlat25);
    output.SV_Target0.xyz = float3(u_xlat21) * u_xlat6.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat6.xyz = u_xlat1.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = fma(float3(u_xlat24), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat21) * u_xlat1;
    u_xlat0.x = u_xlat0.z * u_xlat0.x;
    u_xlat0.xy = fma(u_xlat0.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat0.xy = u_xlat0.xy * float2(FGlobals._NormalScale0);
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat0.z = sqrt(u_xlat1.x);
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat1.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale1);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, u_xlat2.xxx, u_xlat1.xyz);
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat1.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale2);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat2.zzz, u_xlat0.xyz);
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat1.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale3);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat1.xyz = fma(u_xlat1.xyz, u_xlat2.www, u_xlat0.xyz);
    u_xlat1.w = u_xlat1.z + 9.99999975e-06;
    u_xlat0.x = dot(input.TEXCOORD0.xyz, u_xlat1.xyw);
    u_xlat0.y = dot(input.TEXCOORD1.xyz, u_xlat1.xyw);
    u_xlat0.z = dot(input.TEXCOORD2.xyz, u_xlat1.xyw);
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat21);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: LIGHTPROBE_SH _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 10
Set 2D Texture "_Control" to slot 1
Set 2D Texture "_Splat0" to slot 2
Set 2D Texture "_Splat1" to slot 3
Set 2D Texture "_Splat2" to slot 4
Set 2D Texture "_Splat3" to slot 5
Set 2D Texture "_Normal0" to slot 6
Set 2D Texture "_Normal1" to slot 7
Set 2D Texture "_Normal2" to slot 8
Set 2D Texture "_Normal3" to slot 9
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0

Constant Buffer "FGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _NormalScale0 at 240
  Float _NormalScale1 at 244
  Float _NormalScale2 at 248
  Float _NormalScale3 at 252
  Float _Metallic0 at 256
  Float _Metallic1 at 260
  Float _Metallic2 at 264
  Float _Metallic3 at 268
  Float _Smoothness0 at 272
  Float _Smoothness1 at 276
  Float _Smoothness2 at 280
  Float _Smoothness3 at 284
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler_Normal0 [[ sampler (6) ]],
    sampler sampler_Normal1 [[ sampler (7) ]],
    sampler sampler_Normal2 [[ sampler (8) ]],
    sampler sampler_Normal3 [[ sampler (9) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (10) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat10;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    float u_xlat23;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD3.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat5 = u_xlat0.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat5 = u_xlat0.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat8.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat8.xy * float2(FGlobals._NormalScale0);
    u_xlat8.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat5.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = _Normal1.sample(sampler_Normal1, u_xlat2.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat8.xy * float2(FGlobals._NormalScale1);
    u_xlat8.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat0.yyy * u_xlat6.xyz;
    u_xlat8.xyz = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat8.xyz);
    u_xlat2.xyz = _Normal2.sample(sampler_Normal2, u_xlat16.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale2);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat8.xyz = fma(u_xlat2.xyz, u_xlat0.zzz, u_xlat8.xyz);
    u_xlat2.xyz = _Normal3.sample(sampler_Normal3, u_xlat3.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale3);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.www, u_xlat8.xyz);
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat2.w = u_xlat2.z + 9.99999975e-06;
    u_xlat3.x = dot(input.TEXCOORD0.xyz, u_xlat2.xyw);
    u_xlat3.y = dot(input.TEXCOORD1.xyz, u_xlat2.xyw);
    u_xlat3.z = dot(input.TEXCOORD2.xyz, u_xlat2.xyw);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.x = input.TEXCOORD0.w;
        u_xlat10.y = input.TEXCOORD1.w;
        u_xlat10.z = input.TEXCOORD2.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat10.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat2);
        u_xlat5.y = dot(u_xlat6, u_xlat2);
        u_xlat5.z = dot(u_xlat3, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat5.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat5.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD6.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.xyz = exp2((-u_xlat0.xyz));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat4.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: UNITY_HDR_ON _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 9
Set 2D Texture "_Control" to slot 1 sampler slot 0
Set 2D Texture "_Splat0" to slot 2 sampler slot 1
Set 2D Texture "_Splat1" to slot 3 sampler slot 2
Set 2D Texture "_Splat2" to slot 4 sampler slot 3
Set 2D Texture "_Splat3" to slot 5 sampler slot 4
Set 2D Texture "_Normal0" to slot 6 sampler slot 5
Set 2D Texture "_Normal1" to slot 7 sampler slot 6
Set 2D Texture "_Normal2" to slot 8 sampler slot 7
Set 2D Texture "_Normal3" to slot 9 sampler slot 8

Constant Buffer "FGlobals" (128 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _NormalScale0 at 80
  Float _NormalScale1 at 84
  Float _NormalScale2 at 88
  Float _NormalScale3 at 92
  Float _Metallic0 at 96
  Float _Metallic1 at 100
  Float _Metallic2 at 104
  Float _Metallic3 at 108
  Float _Smoothness0 at 112
  Float _Smoothness1 at 116
  Float _Smoothness2 at 120
  Float _Smoothness3 at 124
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler_Normal0 [[ sampler (5) ]],
    sampler sampler_Normal1 [[ sampler (6) ]],
    sampler sampler_Normal2 [[ sampler (7) ]],
    sampler sampler_Normal3 [[ sampler (8) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (9) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat21;
    float u_xlat22;
    float u_xlat24;
    float u_xlat25;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat1 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat0.xyz = _Normal0.sample(sampler_Normal0, u_xlat0.xy).xyw;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat21 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat21 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
    u_xlat1.w = u_xlat1.w * FGlobals._Smoothness0;
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat3.xy);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat3.xy).xyw;
    u_xlat4 = u_xlat2.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat1 = u_xlat1 + u_xlat4;
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat4.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat1 = u_xlat1 + u_xlat5;
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat5.xy);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat5.xy).xyw;
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat1 = u_xlat1 + u_xlat6;
    u_xlat24 = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat25 = fma((-u_xlat24), 0.779083729, 0.779083729);
    u_xlat6.xyz = u_xlat1.xyz * float3(u_xlat25);
    output.SV_Target0.xyz = float3(u_xlat21) * u_xlat6.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat6.xyz = u_xlat1.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = fma(float3(u_xlat24), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat21) * u_xlat1;
    u_xlat0.x = u_xlat0.z * u_xlat0.x;
    u_xlat0.xy = fma(u_xlat0.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat0.xy = u_xlat0.xy * float2(FGlobals._NormalScale0);
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat0.z = sqrt(u_xlat1.x);
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat1.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale1);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, u_xlat2.xxx, u_xlat1.xyz);
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat1.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale2);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat2.zzz, u_xlat0.xyz);
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat1.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale3);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat1.xyz = fma(u_xlat1.xyz, u_xlat2.www, u_xlat0.xyz);
    u_xlat1.w = u_xlat1.z + 9.99999975e-06;
    u_xlat0.x = dot(input.TEXCOORD0.xyz, u_xlat1.xyw);
    u_xlat0.y = dot(input.TEXCOORD1.xyz, u_xlat1.xyw);
    u_xlat0.z = dot(input.TEXCOORD2.xyz, u_xlat1.xyw);
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat21) * float4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: LIGHTPROBE_SH UNITY_HDR_ON _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 10
Set 2D Texture "_Control" to slot 1
Set 2D Texture "_Splat0" to slot 2
Set 2D Texture "_Splat1" to slot 3
Set 2D Texture "_Splat2" to slot 4
Set 2D Texture "_Splat3" to slot 5
Set 2D Texture "_Normal0" to slot 6
Set 2D Texture "_Normal1" to slot 7
Set 2D Texture "_Normal2" to slot 8
Set 2D Texture "_Normal3" to slot 9
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0

Constant Buffer "FGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _NormalScale0 at 240
  Float _NormalScale1 at 244
  Float _NormalScale2 at 248
  Float _NormalScale3 at 252
  Float _Metallic0 at 256
  Float _Metallic1 at 260
  Float _Metallic2 at 264
  Float _Metallic3 at 268
  Float _Smoothness0 at 272
  Float _Smoothness1 at 276
  Float _Smoothness2 at 280
  Float _Smoothness3 at 284
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler_Normal0 [[ sampler (6) ]],
    sampler sampler_Normal1 [[ sampler (7) ]],
    sampler sampler_Normal2 [[ sampler (8) ]],
    sampler sampler_Normal3 [[ sampler (9) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (10) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat10;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    float u_xlat23;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD3.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat5 = u_xlat0.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat5 = u_xlat0.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat8.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat8.xy * float2(FGlobals._NormalScale0);
    u_xlat8.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat5.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = _Normal1.sample(sampler_Normal1, u_xlat2.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat8.xy * float2(FGlobals._NormalScale1);
    u_xlat8.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat0.yyy * u_xlat6.xyz;
    u_xlat8.xyz = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat8.xyz);
    u_xlat2.xyz = _Normal2.sample(sampler_Normal2, u_xlat16.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale2);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat8.xyz = fma(u_xlat2.xyz, u_xlat0.zzz, u_xlat8.xyz);
    u_xlat2.xyz = _Normal3.sample(sampler_Normal3, u_xlat3.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale3);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat2.xyz = fma(u_xlat2.xyz, u_xlat0.www, u_xlat8.xyz);
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat2.w = u_xlat2.z + 9.99999975e-06;
    u_xlat3.x = dot(input.TEXCOORD0.xyz, u_xlat2.xyw);
    u_xlat3.y = dot(input.TEXCOORD1.xyz, u_xlat2.xyw);
    u_xlat3.z = dot(input.TEXCOORD2.xyz, u_xlat2.xyw);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.x = input.TEXCOORD0.w;
        u_xlat10.y = input.TEXCOORD1.w;
        u_xlat10.z = input.TEXCOORD2.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat10.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat2);
        u_xlat5.y = dot(u_xlat6, u_xlat2);
        u_xlat5.z = dot(u_xlat3, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat5.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat5.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD6.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat4.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0
Set 2D Texture "_Splat0" to slot 1
Set 2D Texture "_Splat1" to slot 2
Set 2D Texture "_Splat2" to slot 3
Set 2D Texture "_Splat3" to slot 4
Set 2D Texture "_TerrainNormalmapTexture" to slot 5

Constant Buffer "FGlobals" (112 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _Metallic0 at 80
  Float _Metallic1 at 84
  Float _Metallic2 at 88
  Float _Metallic3 at 92
  Float _Smoothness0 at 96
  Float _Smoothness1 at 100
  Float _Smoothness2 at 104
  Float _Smoothness3 at 108
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (5) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat2;
    float4 u_xlat3;
    float3 u_xlat5;
    float2 u_xlat6;
    float u_xlat12;
    u_xlat0.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat0 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat1.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat1.xy = fma(input.TEXCOORD3.xy, u_xlat1.xy, float2(0.5, 0.5));
    u_xlat1.xy = u_xlat1.xy * FGlobals._Control_TexelSize.xy;
    u_xlat1 = _Control.sample(sampler_Control, u_xlat1.xy);
    u_xlat2 = dot(u_xlat1, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat6.x = u_xlat2 + 0.00100000005;
    u_xlat1 = u_xlat1 / u_xlat6.xxxx;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0.w = u_xlat0.w * FGlobals._Smoothness0;
    u_xlat6.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat6.xy);
    u_xlat3 = u_xlat1.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat3 = u_xlat1.zzzz * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness2;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat6.xy);
    u_xlat3 = u_xlat1.wwww * u_xlat3;
    u_xlat1.x = dot(u_xlat1, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat5.x = fma((-u_xlat1.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
    output.SV_Target0.xyz = float3(u_xlat2) * u_xlat5.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat5.xyz = u_xlat0.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(u_xlat1.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat2) * u_xlat0;
    u_xlat0.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat0.xyz = fma(u_xlat0.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = dot(input.TEXCOORD0.xyz, u_xlat0.xyz);
    u_xlat1.y = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat1.z = dot(input.TEXCOORD2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat2) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat2);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON LIGHTPROBE_SH
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 6

Constant Buffer "FGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (6) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat11;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD3.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat2 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat2 = u_xlat0.zzzz * u_xlat2;
    u_xlat2.w = u_xlat2.w * FGlobals._Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat3 = u_xlat0.wwww * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat8.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat8.xyz = fma(u_xlat8.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = dot(input.TEXCOORD0.xyz, u_xlat8.xyz);
    u_xlat3.y = dot(input.TEXCOORD1.xyz, u_xlat8.xyz);
    u_xlat3.z = dot(input.TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat11.x = input.TEXCOORD0.w;
        u_xlat11.y = input.TEXCOORD1.w;
        u_xlat11.z = input.TEXCOORD2.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat11.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat4.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat4.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
        u_xlat7.xyz = u_xlat4.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat4.xzw + float3(0.5, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat3.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat3);
        u_xlat5.y = dot(u_xlat6, u_xlat3);
        u_xlat5.z = dot(u_xlat4, u_xlat3);
    } else {
        u_xlat3.w = 1.0;
        u_xlat5.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat5.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat5.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD6.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(u_xlat3.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.xyz = exp2((-u_xlat0.xyz));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat4.w = u_xlat2.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat4;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON UNITY_HDR_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0
Set 2D Texture "_Splat0" to slot 1
Set 2D Texture "_Splat1" to slot 2
Set 2D Texture "_Splat2" to slot 3
Set 2D Texture "_Splat3" to slot 4
Set 2D Texture "_TerrainNormalmapTexture" to slot 5

Constant Buffer "FGlobals" (112 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _Metallic0 at 80
  Float _Metallic1 at 84
  Float _Metallic2 at 88
  Float _Metallic3 at 92
  Float _Smoothness0 at 96
  Float _Smoothness1 at 100
  Float _Smoothness2 at 104
  Float _Smoothness3 at 108
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (5) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(5) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float u_xlat2;
    float4 u_xlat3;
    float3 u_xlat5;
    float2 u_xlat6;
    float u_xlat12;
    u_xlat0.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat0 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat1.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat1.xy = fma(input.TEXCOORD3.xy, u_xlat1.xy, float2(0.5, 0.5));
    u_xlat1.xy = u_xlat1.xy * FGlobals._Control_TexelSize.xy;
    u_xlat1 = _Control.sample(sampler_Control, u_xlat1.xy);
    u_xlat2 = dot(u_xlat1, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat6.x = u_xlat2 + 0.00100000005;
    u_xlat1 = u_xlat1 / u_xlat6.xxxx;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0.w = u_xlat0.w * FGlobals._Smoothness0;
    u_xlat6.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat6.xy);
    u_xlat3 = u_xlat1.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat3 = u_xlat1.zzzz * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness2;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat6.xy);
    u_xlat3 = u_xlat1.wwww * u_xlat3;
    u_xlat1.x = dot(u_xlat1, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat5.x = fma((-u_xlat1.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
    output.SV_Target0.xyz = float3(u_xlat2) * u_xlat5.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat5.xyz = u_xlat0.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(u_xlat1.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat2) * u_xlat0;
    u_xlat0.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat0.xyz = fma(u_xlat0.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = dot(input.TEXCOORD0.xyz, u_xlat0.xyz);
    u_xlat1.y = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat1.z = dot(input.TEXCOORD2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat2) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat2) * float4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON LIGHTPROBE_SH UNITY_HDR_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 5 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 6

Constant Buffer "FGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (6) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(5) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat11;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD3.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat2 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat2 = u_xlat0.zzzz * u_xlat2;
    u_xlat2.w = u_xlat2.w * FGlobals._Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat3 = u_xlat0.wwww * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat8.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat8.xyz = fma(u_xlat8.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = dot(input.TEXCOORD0.xyz, u_xlat8.xyz);
    u_xlat3.y = dot(input.TEXCOORD1.xyz, u_xlat8.xyz);
    u_xlat3.z = dot(input.TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat11.x = input.TEXCOORD0.w;
        u_xlat11.y = input.TEXCOORD1.w;
        u_xlat11.z = input.TEXCOORD2.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat11.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat4.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat4.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
        u_xlat7.xyz = u_xlat4.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat4.xzw + float3(0.5, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat3.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat3);
        u_xlat5.y = dot(u_xlat6, u_xlat3);
        u_xlat5.z = dot(u_xlat4, u_xlat3);
    } else {
        u_xlat3.w = 1.0;
        u_xlat5.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat5.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat5.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD6.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(u_xlat3.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat4.w = u_xlat2.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat4;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0
Set 2D Texture "_Splat0" to slot 1
Set 2D Texture "_Splat1" to slot 2
Set 2D Texture "_Splat2" to slot 3
Set 2D Texture "_Splat3" to slot 4
Set 2D Texture "_Normal0" to slot 5 sampler slot 6
Set 2D Texture "_Normal1" to slot 6 sampler slot 7
Set 2D Texture "_Normal2" to slot 7 sampler slot 8
Set 2D Texture "_Normal3" to slot 8 sampler slot 9
Set 2D Texture "_TerrainNormalmapTexture" to slot 9 sampler slot 5

Constant Buffer "FGlobals" (128 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _NormalScale0 at 80
  Float _NormalScale1 at 84
  Float _NormalScale2 at 88
  Float _NormalScale3 at 92
  Float _Metallic0 at 96
  Float _Metallic1 at 100
  Float _Metallic2 at 104
  Float _Metallic3 at 108
  Float _Smoothness0 at 112
  Float _Smoothness1 at 116
  Float _Smoothness2 at 120
  Float _Smoothness3 at 124
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (5) ]],
    sampler sampler_Normal0 [[ sampler (6) ]],
    sampler sampler_Normal1 [[ sampler (7) ]],
    sampler sampler_Normal2 [[ sampler (8) ]],
    sampler sampler_Normal3 [[ sampler (9) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat14;
    float u_xlat21;
    float u_xlat22;
    float u_xlat24;
    float u_xlat25;
    u_xlat0.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat1 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat0.xyz = _Normal0.sample(sampler_Normal0, u_xlat0.xy).xyw;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat21 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat21 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
    u_xlat1.w = u_xlat1.w * FGlobals._Smoothness0;
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat3.xy);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat3.xy).xyw;
    u_xlat4 = u_xlat2.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat1 = u_xlat1 + u_xlat4;
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat4.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat1 = u_xlat1 + u_xlat5;
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat5.xy);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat5.xy).xyw;
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat1 = u_xlat1 + u_xlat6;
    u_xlat24 = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat25 = fma((-u_xlat24), 0.779083729, 0.779083729);
    u_xlat6.xyz = u_xlat1.xyz * float3(u_xlat25);
    output.SV_Target0.xyz = float3(u_xlat21) * u_xlat6.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat6.xyz = u_xlat1.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = fma(float3(u_xlat24), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat21) * u_xlat1;
    u_xlat0.x = u_xlat0.z * u_xlat0.x;
    u_xlat0.xy = fma(u_xlat0.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat0.xy = u_xlat0.xy * float2(FGlobals._NormalScale0);
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat0.z = sqrt(u_xlat1.x);
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat1.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale1);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, u_xlat2.xxx, u_xlat1.xyz);
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat1.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale2);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat2.zzz, u_xlat0.xyz);
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat1.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale3);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat2.www, u_xlat0.xyz);
    u_xlat14 = u_xlat0.z + 9.99999975e-06;
    u_xlat1.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat1.xyz = fma(u_xlat1.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat1.xyz = float3(u_xlat22) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.yzx * float3(0.0, 0.0, 1.0);
    u_xlat2.xyz = fma(u_xlat1.zxy, float3(1.0, 0.0, 0.0), (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat2.xz, u_xlat2.xz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat3.xyz = float3(u_xlat22) * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat0.yyy * u_xlat3.xyz;
    u_xlat2.xyz = fma(u_xlat0.xxx, u_xlat2.xyz, u_xlat3.xyz);
    u_xlat0.xyz = fma(float3(u_xlat14), u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(input.TEXCOORD0.xyz, u_xlat0.xyz);
    u_xlat1.y = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat1.z = dot(input.TEXCOORD2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat21);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON LIGHTPROBE_SH _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 2D Texture "_Normal0" to slot 5 sampler slot 7
Set 2D Texture "_Normal1" to slot 6 sampler slot 8
Set 2D Texture "_Normal2" to slot 7 sampler slot 9
Set 2D Texture "_Normal3" to slot 8 sampler slot 10
Set 3D Texture "unity_ProbeVolumeSH" to slot 9 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 10 sampler slot 6

Constant Buffer "FGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _NormalScale0 at 240
  Float _NormalScale1 at 244
  Float _NormalScale2 at 248
  Float _NormalScale3 at 252
  Float _Metallic0 at 256
  Float _Metallic1 at 260
  Float _Metallic2 at 264
  Float _Metallic3 at 268
  Float _Smoothness0 at 272
  Float _Smoothness1 at 276
  Float _Smoothness2 at 280
  Float _Smoothness3 at 284
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(9) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat10;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD3.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat5 = u_xlat0.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat5 = u_xlat0.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat8.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat8.xy * float2(FGlobals._NormalScale0);
    u_xlat8.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat5.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = _Normal1.sample(sampler_Normal1, u_xlat2.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat8.xy * float2(FGlobals._NormalScale1);
    u_xlat8.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat0.yyy * u_xlat6.xyz;
    u_xlat8.xyz = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat8.xyz);
    u_xlat2.xyz = _Normal2.sample(sampler_Normal2, u_xlat16.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale2);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat8.xyz = fma(u_xlat2.xyz, u_xlat0.zzz, u_xlat8.xyz);
    u_xlat2.xyz = _Normal3.sample(sampler_Normal3, u_xlat3.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale3);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat8.xyz = fma(u_xlat2.xyz, u_xlat0.www, u_xlat8.xyz);
    u_xlat22 = u_xlat8.z + 9.99999975e-06;
    u_xlat2.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat2.xyz = fma(u_xlat2.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat2.xyz = float3(u_xlat23) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat2.yzx * float3(0.0, 0.0, 1.0);
    u_xlat3.xyz = fma(u_xlat2.zxy, float3(1.0, 0.0, 0.0), (-u_xlat3.xyz));
    u_xlat23 = dot(u_xlat3.xz, u_xlat3.xz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat3.xyz = float3(u_xlat23) * u_xlat3.xyz;
    u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;
    u_xlat5.xyz = fma(u_xlat3.zxy, u_xlat2.yzx, (-u_xlat5.xyz));
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat5.xyz = float3(u_xlat23) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
    u_xlat3.xyz = fma(u_xlat8.xxx, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat8.xyz = fma(float3(u_xlat22), u_xlat2.xyz, u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat2.x = dot(input.TEXCOORD0.xyz, u_xlat8.xyz);
    u_xlat2.y = dot(input.TEXCOORD1.xyz, u_xlat8.xyz);
    u_xlat2.z = dot(input.TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat7.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat2.xyz;
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.x = input.TEXCOORD0.w;
        u_xlat10.y = input.TEXCOORD1.w;
        u_xlat10.z = input.TEXCOORD2.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat10.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat2);
        u_xlat5.y = dot(u_xlat6, u_xlat2);
        u_xlat5.z = dot(u_xlat3, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat5.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat5.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD6.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.xyz = exp2((-u_xlat0.xyz));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat4.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON UNITY_HDR_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0
Set 2D Texture "_Splat0" to slot 1
Set 2D Texture "_Splat1" to slot 2
Set 2D Texture "_Splat2" to slot 3
Set 2D Texture "_Splat3" to slot 4
Set 2D Texture "_Normal0" to slot 5 sampler slot 6
Set 2D Texture "_Normal1" to slot 6 sampler slot 7
Set 2D Texture "_Normal2" to slot 7 sampler slot 8
Set 2D Texture "_Normal3" to slot 8 sampler slot 9
Set 2D Texture "_TerrainNormalmapTexture" to slot 9 sampler slot 5

Constant Buffer "FGlobals" (128 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _NormalScale0 at 80
  Float _NormalScale1 at 84
  Float _NormalScale2 at 88
  Float _NormalScale3 at 92
  Float _Metallic0 at 96
  Float _Metallic1 at 100
  Float _Metallic2 at 104
  Float _Metallic3 at 108
  Float _Smoothness0 at 112
  Float _Smoothness1 at 116
  Float _Smoothness2 at 120
  Float _Smoothness3 at 124
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (5) ]],
    sampler sampler_Normal0 [[ sampler (6) ]],
    sampler sampler_Normal1 [[ sampler (7) ]],
    sampler sampler_Normal2 [[ sampler (8) ]],
    sampler sampler_Normal3 [[ sampler (9) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(9) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat14;
    float u_xlat21;
    float u_xlat22;
    float u_xlat24;
    float u_xlat25;
    u_xlat0.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat1 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat0.xyz = _Normal0.sample(sampler_Normal0, u_xlat0.xy).xyw;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat21 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat21 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
    u_xlat1.w = u_xlat1.w * FGlobals._Smoothness0;
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat3.xy);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat3.xy).xyw;
    u_xlat4 = u_xlat2.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat1 = u_xlat1 + u_xlat4;
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat4.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat1 = u_xlat1 + u_xlat5;
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat5.xy);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat5.xy).xyw;
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat1 = u_xlat1 + u_xlat6;
    u_xlat24 = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat25 = fma((-u_xlat24), 0.779083729, 0.779083729);
    u_xlat6.xyz = u_xlat1.xyz * float3(u_xlat25);
    output.SV_Target0.xyz = float3(u_xlat21) * u_xlat6.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat6.xyz = u_xlat1.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = fma(float3(u_xlat24), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat21) * u_xlat1;
    u_xlat0.x = u_xlat0.z * u_xlat0.x;
    u_xlat0.xy = fma(u_xlat0.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat0.xy = u_xlat0.xy * float2(FGlobals._NormalScale0);
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat0.z = sqrt(u_xlat1.x);
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat1.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale1);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, u_xlat2.xxx, u_xlat1.xyz);
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat1.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale2);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat2.zzz, u_xlat0.xyz);
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat1.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale3);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat2.www, u_xlat0.xyz);
    u_xlat14 = u_xlat0.z + 9.99999975e-06;
    u_xlat1.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat1.xyz = fma(u_xlat1.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat1.xyz = float3(u_xlat22) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.yzx * float3(0.0, 0.0, 1.0);
    u_xlat2.xyz = fma(u_xlat1.zxy, float3(1.0, 0.0, 0.0), (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat2.xz, u_xlat2.xz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat3.xyz = float3(u_xlat22) * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat0.yyy * u_xlat3.xyz;
    u_xlat2.xyz = fma(u_xlat0.xxx, u_xlat2.xyz, u_xlat3.xyz);
    u_xlat0.xyz = fma(float3(u_xlat14), u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(input.TEXCOORD0.xyz, u_xlat0.xyz);
    u_xlat1.y = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat1.z = dot(input.TEXCOORD2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat21) * float4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON LIGHTPROBE_SH UNITY_HDR_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_Control" to slot 0 sampler slot 1
Set 2D Texture "_Splat0" to slot 1 sampler slot 2
Set 2D Texture "_Splat1" to slot 2 sampler slot 3
Set 2D Texture "_Splat2" to slot 3 sampler slot 4
Set 2D Texture "_Splat3" to slot 4 sampler slot 5
Set 2D Texture "_Normal0" to slot 5 sampler slot 7
Set 2D Texture "_Normal1" to slot 6 sampler slot 8
Set 2D Texture "_Normal2" to slot 7 sampler slot 9
Set 2D Texture "_Normal3" to slot 8 sampler slot 10
Set 3D Texture "unity_ProbeVolumeSH" to slot 9 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 10 sampler slot 6

Constant Buffer "FGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _NormalScale0 at 240
  Float _NormalScale1 at 244
  Float _NormalScale2 at 248
  Float _NormalScale3 at 252
  Float _Metallic0 at 256
  Float _Metallic1 at 260
  Float _Metallic2 at 264
  Float _Metallic3 at 268
  Float _Smoothness0 at 272
  Float _Smoothness1 at 276
  Float _Smoothness2 at 280
  Float _Smoothness3 at 284
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    texture2d<float, access::sample > _Control [[ texture(0) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(8) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(9) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat10;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD3.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat5 = u_xlat0.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat5 = u_xlat0.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat8.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat8.xy * float2(FGlobals._NormalScale0);
    u_xlat8.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat5.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = _Normal1.sample(sampler_Normal1, u_xlat2.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat8.xy * float2(FGlobals._NormalScale1);
    u_xlat8.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat0.yyy * u_xlat6.xyz;
    u_xlat8.xyz = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat8.xyz);
    u_xlat2.xyz = _Normal2.sample(sampler_Normal2, u_xlat16.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale2);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat8.xyz = fma(u_xlat2.xyz, u_xlat0.zzz, u_xlat8.xyz);
    u_xlat2.xyz = _Normal3.sample(sampler_Normal3, u_xlat3.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale3);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat8.xyz = fma(u_xlat2.xyz, u_xlat0.www, u_xlat8.xyz);
    u_xlat22 = u_xlat8.z + 9.99999975e-06;
    u_xlat2.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat2.xyz = fma(u_xlat2.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat2.xyz = float3(u_xlat23) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat2.yzx * float3(0.0, 0.0, 1.0);
    u_xlat3.xyz = fma(u_xlat2.zxy, float3(1.0, 0.0, 0.0), (-u_xlat3.xyz));
    u_xlat23 = dot(u_xlat3.xz, u_xlat3.xz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat3.xyz = float3(u_xlat23) * u_xlat3.xyz;
    u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;
    u_xlat5.xyz = fma(u_xlat3.zxy, u_xlat2.yzx, (-u_xlat5.xyz));
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat5.xyz = float3(u_xlat23) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
    u_xlat3.xyz = fma(u_xlat8.xxx, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat8.xyz = fma(float3(u_xlat22), u_xlat2.xyz, u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat2.x = dot(input.TEXCOORD0.xyz, u_xlat8.xyz);
    u_xlat2.y = dot(input.TEXCOORD1.xyz, u_xlat8.xyz);
    u_xlat2.z = dot(input.TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat7.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat2.xyz;
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.x = input.TEXCOORD0.w;
        u_xlat10.y = input.TEXCOORD1.w;
        u_xlat10.z = input.TEXCOORD2.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat10.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat2);
        u_xlat5.y = dot(u_xlat6, u_xlat2);
        u_xlat5.z = dot(u_xlat3, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat5.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat5.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD6.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat4.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 6
Set 2D Texture "_Control" to slot 1 sampler slot 0
Set 2D Texture "_Splat0" to slot 2 sampler slot 1
Set 2D Texture "_Splat1" to slot 3 sampler slot 2
Set 2D Texture "_Splat2" to slot 4 sampler slot 3
Set 2D Texture "_Splat3" to slot 5 sampler slot 4
Set 2D Texture "_TerrainNormalmapTexture" to slot 6 sampler slot 5

Constant Buffer "FGlobals" (112 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _Metallic0 at 80
  Float _Metallic1 at 84
  Float _Metallic2 at 88
  Float _Metallic3 at 92
  Float _Smoothness0 at 96
  Float _Smoothness1 at 100
  Float _Smoothness2 at 104
  Float _Smoothness3 at 108
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (5) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (6) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat2;
    float4 u_xlat3;
    float3 u_xlat5;
    float2 u_xlat6;
    float u_xlat12;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat0 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat1.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat1.xy = fma(input.TEXCOORD3.xy, u_xlat1.xy, float2(0.5, 0.5));
    u_xlat1.xy = u_xlat1.xy * FGlobals._Control_TexelSize.xy;
    u_xlat1 = _Control.sample(sampler_Control, u_xlat1.xy);
    u_xlat2 = dot(u_xlat1, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat6.x = u_xlat2 + 0.00100000005;
    u_xlat1 = u_xlat1 / u_xlat6.xxxx;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0.w = u_xlat0.w * FGlobals._Smoothness0;
    u_xlat6.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat6.xy);
    u_xlat3 = u_xlat1.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat3 = u_xlat1.zzzz * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness2;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat6.xy);
    u_xlat3 = u_xlat1.wwww * u_xlat3;
    u_xlat1.x = dot(u_xlat1, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat5.x = fma((-u_xlat1.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
    output.SV_Target0.xyz = float3(u_xlat2) * u_xlat5.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat5.xyz = u_xlat0.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(u_xlat1.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat2) * u_xlat0;
    u_xlat0.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat0.xyz = fma(u_xlat0.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = dot(input.TEXCOORD0.xyz, u_xlat0.xyz);
    u_xlat1.y = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat1.z = dot(input.TEXCOORD2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat2) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat2);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON LIGHTPROBE_SH _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 7
Set 2D Texture "_Control" to slot 1
Set 2D Texture "_Splat0" to slot 2
Set 2D Texture "_Splat1" to slot 3
Set 2D Texture "_Splat2" to slot 4
Set 2D Texture "_Splat3" to slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 7 sampler slot 6

Constant Buffer "FGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (6) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (7) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat11;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD3.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat2 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat2 = u_xlat0.zzzz * u_xlat2;
    u_xlat2.w = u_xlat2.w * FGlobals._Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat3 = u_xlat0.wwww * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat8.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat8.xyz = fma(u_xlat8.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = dot(input.TEXCOORD0.xyz, u_xlat8.xyz);
    u_xlat3.y = dot(input.TEXCOORD1.xyz, u_xlat8.xyz);
    u_xlat3.z = dot(input.TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat11.x = input.TEXCOORD0.w;
        u_xlat11.y = input.TEXCOORD1.w;
        u_xlat11.z = input.TEXCOORD2.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat11.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat4.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat4.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
        u_xlat7.xyz = u_xlat4.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat4.xzw + float3(0.5, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat3.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat3);
        u_xlat5.y = dot(u_xlat6, u_xlat3);
        u_xlat5.z = dot(u_xlat4, u_xlat3);
    } else {
        u_xlat3.w = 1.0;
        u_xlat5.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat5.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat5.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD6.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(u_xlat3.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.xyz = exp2((-u_xlat0.xyz));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat4.w = u_xlat2.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat4;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON UNITY_HDR_ON _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 6
Set 2D Texture "_Control" to slot 1 sampler slot 0
Set 2D Texture "_Splat0" to slot 2 sampler slot 1
Set 2D Texture "_Splat1" to slot 3 sampler slot 2
Set 2D Texture "_Splat2" to slot 4 sampler slot 3
Set 2D Texture "_Splat3" to slot 5 sampler slot 4
Set 2D Texture "_TerrainNormalmapTexture" to slot 6 sampler slot 5

Constant Buffer "FGlobals" (112 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _Metallic0 at 80
  Float _Metallic1 at 84
  Float _Metallic2 at 88
  Float _Metallic3 at 92
  Float _Smoothness0 at 96
  Float _Smoothness1 at 100
  Float _Smoothness2 at 104
  Float _Smoothness3 at 108
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (5) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (6) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(6) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float u_xlat2;
    float4 u_xlat3;
    float3 u_xlat5;
    float2 u_xlat6;
    float u_xlat12;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat0 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat1.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat1.xy = fma(input.TEXCOORD3.xy, u_xlat1.xy, float2(0.5, 0.5));
    u_xlat1.xy = u_xlat1.xy * FGlobals._Control_TexelSize.xy;
    u_xlat1 = _Control.sample(sampler_Control, u_xlat1.xy);
    u_xlat2 = dot(u_xlat1, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat6.x = u_xlat2 + 0.00100000005;
    u_xlat1 = u_xlat1 / u_xlat6.xxxx;
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0.w = u_xlat0.w * FGlobals._Smoothness0;
    u_xlat6.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat3 = _Splat1.sample(sampler_Splat1, u_xlat6.xy);
    u_xlat3 = u_xlat1.yyyy * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness1;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3 = _Splat2.sample(sampler_Splat2, u_xlat6.xy);
    u_xlat3 = u_xlat1.zzzz * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness2;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat6.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat6.xy);
    u_xlat3 = u_xlat1.wwww * u_xlat3;
    u_xlat1.x = dot(u_xlat1, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat0 = u_xlat0 + u_xlat3;
    u_xlat5.x = fma((-u_xlat1.x), 0.779083729, 0.779083729);
    u_xlat5.xyz = u_xlat0.xyz * u_xlat5.xxx;
    output.SV_Target0.xyz = float3(u_xlat2) * u_xlat5.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat5.xyz = u_xlat0.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat0.xyz = fma(u_xlat1.xxx, u_xlat5.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat2) * u_xlat0;
    u_xlat0.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat0.xyz = fma(u_xlat0.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat12 = rsqrt(u_xlat12);
    u_xlat0.xyz = float3(u_xlat12) * u_xlat0.xyz;
    u_xlat1.x = dot(input.TEXCOORD0.xyz, u_xlat0.xyz);
    u_xlat1.y = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat1.z = dot(input.TEXCOORD2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat2) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat2) * float4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON LIGHTPROBE_SH UNITY_HDR_ON _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 7
Set 2D Texture "_Control" to slot 1
Set 2D Texture "_Splat0" to slot 2
Set 2D Texture "_Splat1" to slot 3
Set 2D Texture "_Splat2" to slot 4
Set 2D Texture "_Splat3" to slot 5
Set 3D Texture "unity_ProbeVolumeSH" to slot 6 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 7 sampler slot 6

Constant Buffer "FGlobals" (272 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _Metallic0 at 240
  Float _Metallic1 at 244
  Float _Metallic2 at 248
  Float _Metallic3 at 252
  Float _Smoothness0 at 256
  Float _Smoothness1 at 260
  Float _Smoothness2 at 264
  Float _Smoothness3 at 268
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (6) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (7) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(6) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(7) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat11;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD3.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat2 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat2 = u_xlat0.zzzz * u_xlat2;
    u_xlat2.w = u_xlat2.w * FGlobals._Smoothness2;
    u_xlat2 = u_xlat2 + u_xlat4;
    u_xlat3 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat3 = u_xlat0.wwww * u_xlat3;
    u_xlat3.w = u_xlat3.w * FGlobals._Smoothness3;
    u_xlat2 = u_xlat2 + u_xlat3;
    u_xlat8.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat8.xyz = fma(u_xlat8.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat3.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat3.x = rsqrt(u_xlat3.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat3.xxx;
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat3.x = dot(input.TEXCOORD0.xyz, u_xlat8.xyz);
    u_xlat3.y = dot(input.TEXCOORD1.xyz, u_xlat8.xyz);
    u_xlat3.z = dot(input.TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat11.x = input.TEXCOORD0.w;
        u_xlat11.y = input.TEXCOORD1.w;
        u_xlat11.z = input.TEXCOORD2.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat11.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat4.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat4.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat4.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat4.xzw);
        u_xlat7.xyz = u_xlat4.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat4.xzw + float3(0.5, 0.0, 0.0);
        u_xlat4 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat3.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat3);
        u_xlat5.y = dot(u_xlat6, u_xlat3);
        u_xlat5.z = dot(u_xlat4, u_xlat3);
    } else {
        u_xlat3.w = 1.0;
        u_xlat5.x = dot(FGlobals.unity_SHAr, u_xlat3);
        u_xlat5.y = dot(FGlobals.unity_SHAg, u_xlat3);
        u_xlat5.z = dot(FGlobals.unity_SHAb, u_xlat3);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD6.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat2.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat4.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(u_xlat3.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat4.w = u_xlat2.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat4;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 10
Set 2D Texture "_Control" to slot 1 sampler slot 0
Set 2D Texture "_Splat0" to slot 2 sampler slot 1
Set 2D Texture "_Splat1" to slot 3 sampler slot 2
Set 2D Texture "_Splat2" to slot 4 sampler slot 3
Set 2D Texture "_Splat3" to slot 5 sampler slot 4
Set 2D Texture "_Normal0" to slot 6
Set 2D Texture "_Normal1" to slot 7
Set 2D Texture "_Normal2" to slot 8
Set 2D Texture "_Normal3" to slot 9
Set 2D Texture "_TerrainNormalmapTexture" to slot 10 sampler slot 5

Constant Buffer "FGlobals" (128 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _NormalScale0 at 80
  Float _NormalScale1 at 84
  Float _NormalScale2 at 88
  Float _NormalScale3 at 92
  Float _Metallic0 at 96
  Float _Metallic1 at 100
  Float _Metallic2 at 104
  Float _Metallic3 at 108
  Float _Smoothness0 at 112
  Float _Smoothness1 at 116
  Float _Smoothness2 at 120
  Float _Smoothness3 at 124
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (5) ]],
    sampler sampler_Normal0 [[ sampler (6) ]],
    sampler sampler_Normal1 [[ sampler (7) ]],
    sampler sampler_Normal2 [[ sampler (8) ]],
    sampler sampler_Normal3 [[ sampler (9) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (10) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat14;
    float u_xlat21;
    float u_xlat22;
    float u_xlat24;
    float u_xlat25;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat1 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat0.xyz = _Normal0.sample(sampler_Normal0, u_xlat0.xy).xyw;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat21 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat21 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
    u_xlat1.w = u_xlat1.w * FGlobals._Smoothness0;
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat3.xy);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat3.xy).xyw;
    u_xlat4 = u_xlat2.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat1 = u_xlat1 + u_xlat4;
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat4.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat1 = u_xlat1 + u_xlat5;
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat5.xy);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat5.xy).xyw;
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat1 = u_xlat1 + u_xlat6;
    u_xlat24 = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat25 = fma((-u_xlat24), 0.779083729, 0.779083729);
    u_xlat6.xyz = u_xlat1.xyz * float3(u_xlat25);
    output.SV_Target0.xyz = float3(u_xlat21) * u_xlat6.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat6.xyz = u_xlat1.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = fma(float3(u_xlat24), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat21) * u_xlat1;
    u_xlat0.x = u_xlat0.z * u_xlat0.x;
    u_xlat0.xy = fma(u_xlat0.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat0.xy = u_xlat0.xy * float2(FGlobals._NormalScale0);
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat0.z = sqrt(u_xlat1.x);
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat1.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale1);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, u_xlat2.xxx, u_xlat1.xyz);
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat1.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale2);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat2.zzz, u_xlat0.xyz);
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat1.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale3);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat2.www, u_xlat0.xyz);
    u_xlat14 = u_xlat0.z + 9.99999975e-06;
    u_xlat1.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat1.xyz = fma(u_xlat1.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat1.xyz = float3(u_xlat22) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.yzx * float3(0.0, 0.0, 1.0);
    u_xlat2.xyz = fma(u_xlat1.zxy, float3(1.0, 0.0, 0.0), (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat2.xz, u_xlat2.xz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat3.xyz = float3(u_xlat22) * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat0.yyy * u_xlat3.xyz;
    u_xlat2.xyz = fma(u_xlat0.xxx, u_xlat2.xyz, u_xlat3.xyz);
    u_xlat0.xyz = fma(float3(u_xlat14), u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(input.TEXCOORD0.xyz, u_xlat0.xyz);
    u_xlat1.y = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat1.z = dot(input.TEXCOORD2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat21);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON LIGHTPROBE_SH _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 11
Set 2D Texture "_Control" to slot 1
Set 2D Texture "_Splat0" to slot 2
Set 2D Texture "_Splat1" to slot 3
Set 2D Texture "_Splat2" to slot 4
Set 2D Texture "_Splat3" to slot 5
Set 2D Texture "_Normal0" to slot 6 sampler slot 7
Set 2D Texture "_Normal1" to slot 7 sampler slot 8
Set 2D Texture "_Normal2" to slot 8 sampler slot 9
Set 2D Texture "_Normal3" to slot 9 sampler slot 10
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 11 sampler slot 6

Constant Buffer "FGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _NormalScale0 at 240
  Float _NormalScale1 at 244
  Float _NormalScale2 at 248
  Float _NormalScale3 at 252
  Float _Metallic0 at 256
  Float _Metallic1 at 260
  Float _Metallic2 at 264
  Float _Metallic3 at 268
  Float _Smoothness0 at 272
  Float _Smoothness1 at 276
  Float _Smoothness2 at 280
  Float _Smoothness3 at 284
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (11) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat10;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD3.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat5 = u_xlat0.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat5 = u_xlat0.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat8.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat8.xy * float2(FGlobals._NormalScale0);
    u_xlat8.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat5.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = _Normal1.sample(sampler_Normal1, u_xlat2.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat8.xy * float2(FGlobals._NormalScale1);
    u_xlat8.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat0.yyy * u_xlat6.xyz;
    u_xlat8.xyz = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat8.xyz);
    u_xlat2.xyz = _Normal2.sample(sampler_Normal2, u_xlat16.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale2);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat8.xyz = fma(u_xlat2.xyz, u_xlat0.zzz, u_xlat8.xyz);
    u_xlat2.xyz = _Normal3.sample(sampler_Normal3, u_xlat3.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale3);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat8.xyz = fma(u_xlat2.xyz, u_xlat0.www, u_xlat8.xyz);
    u_xlat22 = u_xlat8.z + 9.99999975e-06;
    u_xlat2.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat2.xyz = fma(u_xlat2.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat2.xyz = float3(u_xlat23) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat2.yzx * float3(0.0, 0.0, 1.0);
    u_xlat3.xyz = fma(u_xlat2.zxy, float3(1.0, 0.0, 0.0), (-u_xlat3.xyz));
    u_xlat23 = dot(u_xlat3.xz, u_xlat3.xz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat3.xyz = float3(u_xlat23) * u_xlat3.xyz;
    u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;
    u_xlat5.xyz = fma(u_xlat3.zxy, u_xlat2.yzx, (-u_xlat5.xyz));
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat5.xyz = float3(u_xlat23) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
    u_xlat3.xyz = fma(u_xlat8.xxx, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat8.xyz = fma(float3(u_xlat22), u_xlat2.xyz, u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat2.x = dot(input.TEXCOORD0.xyz, u_xlat8.xyz);
    u_xlat2.y = dot(input.TEXCOORD1.xyz, u_xlat8.xyz);
    u_xlat2.z = dot(input.TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat7.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat2.xyz;
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.x = input.TEXCOORD0.w;
        u_xlat10.y = input.TEXCOORD1.w;
        u_xlat10.z = input.TEXCOORD2.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat10.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat2);
        u_xlat5.y = dot(u_xlat6, u_xlat2);
        u_xlat5.z = dot(u_xlat3, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat5.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat5.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD6.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    u_xlat0.xyz = exp2((-u_xlat0.xyz));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat4.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON UNITY_HDR_ON _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 10
Set 2D Texture "_Control" to slot 1 sampler slot 0
Set 2D Texture "_Splat0" to slot 2 sampler slot 1
Set 2D Texture "_Splat1" to slot 3 sampler slot 2
Set 2D Texture "_Splat2" to slot 4 sampler slot 3
Set 2D Texture "_Splat3" to slot 5 sampler slot 4
Set 2D Texture "_Normal0" to slot 6
Set 2D Texture "_Normal1" to slot 7
Set 2D Texture "_Normal2" to slot 8
Set 2D Texture "_Normal3" to slot 9
Set 2D Texture "_TerrainNormalmapTexture" to slot 10 sampler slot 5

Constant Buffer "FGlobals" (128 bytes) on slot 0 {
  Vector4 _Control_TexelSize at 0
  Vector4 _Splat0_ST at 16
  Vector4 _Splat1_ST at 32
  Vector4 _Splat2_ST at 48
  Vector4 _Splat3_ST at 64
  Float _NormalScale0 at 80
  Float _NormalScale1 at 84
  Float _NormalScale2 at 88
  Float _NormalScale3 at 92
  Float _Metallic0 at 96
  Float _Metallic1 at 100
  Float _Metallic2 at 104
  Float _Metallic3 at 108
  Float _Smoothness0 at 112
  Float _Smoothness1 at 116
  Float _Smoothness2 at 120
  Float _Smoothness3 at 124
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler sampler_Control [[ sampler (0) ]],
    sampler sampler_Splat0 [[ sampler (1) ]],
    sampler sampler_Splat1 [[ sampler (2) ]],
    sampler sampler_Splat2 [[ sampler (3) ]],
    sampler sampler_Splat3 [[ sampler (4) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (5) ]],
    sampler sampler_Normal0 [[ sampler (6) ]],
    sampler sampler_Normal1 [[ sampler (7) ]],
    sampler sampler_Normal2 [[ sampler (8) ]],
    sampler sampler_Normal3 [[ sampler (9) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (10) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(10) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float3 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float u_xlat14;
    float u_xlat21;
    float u_xlat22;
    float u_xlat24;
    float u_xlat25;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat1 = _Splat0.sample(sampler_Splat0, u_xlat0.xy);
    u_xlat0.xyz = _Normal0.sample(sampler_Normal0, u_xlat0.xy).xyw;
    u_xlat2.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, u_xlat2.xy, float2(0.5, 0.5));
    u_xlat2.xy = u_xlat2.xy * FGlobals._Control_TexelSize.xy;
    u_xlat2 = _Control.sample(sampler_Control, u_xlat2.xy);
    u_xlat21 = dot(u_xlat2, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat3.x = u_xlat21 + 0.00100000005;
    u_xlat2 = u_xlat2 / u_xlat3.xxxx;
    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
    u_xlat1.w = u_xlat1.w * FGlobals._Smoothness0;
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat4 = _Splat1.sample(sampler_Splat1, u_xlat3.xy);
    u_xlat3.xyz = _Normal1.sample(sampler_Normal1, u_xlat3.xy).xyw;
    u_xlat4 = u_xlat2.yyyy * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness1;
    u_xlat1 = u_xlat1 + u_xlat4;
    u_xlat4.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat4.xy);
    u_xlat4.xyz = _Normal2.sample(sampler_Normal2, u_xlat4.xy).xyw;
    u_xlat5 = u_xlat2.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat1 = u_xlat1 + u_xlat5;
    u_xlat5.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat6 = _Splat3.sample(sampler_Splat3, u_xlat5.xy);
    u_xlat5.xyz = _Normal3.sample(sampler_Normal3, u_xlat5.xy).xyw;
    u_xlat6 = u_xlat2.wwww * u_xlat6;
    u_xlat6.w = u_xlat6.w * FGlobals._Smoothness3;
    u_xlat1 = u_xlat1 + u_xlat6;
    u_xlat24 = dot(u_xlat2, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat25 = fma((-u_xlat24), 0.779083729, 0.779083729);
    u_xlat6.xyz = u_xlat1.xyz * float3(u_xlat25);
    output.SV_Target0.xyz = float3(u_xlat21) * u_xlat6.xyz;
    output.SV_Target0.w = 1.0;
    u_xlat6.xyz = u_xlat1.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat1.xyz = fma(float3(u_xlat24), u_xlat6.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    output.SV_Target1 = float4(u_xlat21) * u_xlat1;
    u_xlat0.x = u_xlat0.z * u_xlat0.x;
    u_xlat0.xy = fma(u_xlat0.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat0.xy = u_xlat0.xy * float2(FGlobals._NormalScale0);
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat0.z = sqrt(u_xlat1.x);
    u_xlat3.x = u_xlat3.z * u_xlat3.x;
    u_xlat1.xy = fma(u_xlat3.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale1);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat1.xyz = u_xlat2.yyy * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, u_xlat2.xxx, u_xlat1.xyz);
    u_xlat4.x = u_xlat4.z * u_xlat4.x;
    u_xlat1.xy = fma(u_xlat4.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale2);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat2.zzz, u_xlat0.xyz);
    u_xlat5.x = u_xlat5.z * u_xlat5.x;
    u_xlat1.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat1.xy = u_xlat1.xy * float2(FGlobals._NormalScale3);
    u_xlat22 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat22 = min(u_xlat22, 1.0);
    u_xlat22 = (-u_xlat22) + 1.0;
    u_xlat1.z = sqrt(u_xlat22);
    u_xlat0.xyz = fma(u_xlat1.xyz, u_xlat2.www, u_xlat0.xyz);
    u_xlat14 = u_xlat0.z + 9.99999975e-06;
    u_xlat1.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat1.xyz = fma(u_xlat1.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat22 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat1.xyz = float3(u_xlat22) * u_xlat1.xyz;
    u_xlat2.xyz = u_xlat1.yzx * float3(0.0, 0.0, 1.0);
    u_xlat2.xyz = fma(u_xlat1.zxy, float3(1.0, 0.0, 0.0), (-u_xlat2.xyz));
    u_xlat22 = dot(u_xlat2.xz, u_xlat2.xz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat2.xyz = float3(u_xlat22) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx;
    u_xlat3.xyz = fma(u_xlat2.zxy, u_xlat1.yzx, (-u_xlat3.xyz));
    u_xlat22 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat22 = rsqrt(u_xlat22);
    u_xlat3.xyz = float3(u_xlat22) * u_xlat3.xyz;
    u_xlat3.xyz = u_xlat0.yyy * u_xlat3.xyz;
    u_xlat2.xyz = fma(u_xlat0.xxx, u_xlat2.xyz, u_xlat3.xyz);
    u_xlat0.xyz = fma(float3(u_xlat14), u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(input.TEXCOORD0.xyz, u_xlat0.xyz);
    u_xlat1.y = dot(input.TEXCOORD1.xyz, u_xlat0.xyz);
    u_xlat1.z = dot(input.TEXCOORD2.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xyz = fma(u_xlat0.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target2.xyz = float3(u_xlat21) * u_xlat0.xyz;
    output.SV_Target3 = float4(u_xlat21) * float4(0.0, 0.0, 0.0, 1.0);
    output.SV_Target2.w = 1.0;
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON LIGHTPROBE_SH UNITY_HDR_ON _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0 sampler slot 11
Set 2D Texture "_Control" to slot 1
Set 2D Texture "_Splat0" to slot 2
Set 2D Texture "_Splat1" to slot 3
Set 2D Texture "_Splat2" to slot 4
Set 2D Texture "_Splat3" to slot 5
Set 2D Texture "_Normal0" to slot 6 sampler slot 7
Set 2D Texture "_Normal1" to slot 7 sampler slot 8
Set 2D Texture "_Normal2" to slot 8 sampler slot 9
Set 2D Texture "_Normal3" to slot 9 sampler slot 10
Set 3D Texture "unity_ProbeVolumeSH" to slot 10 sampler slot 0
Set 2D Texture "_TerrainNormalmapTexture" to slot 11 sampler slot 6

Constant Buffer "FGlobals" (288 bytes) on slot 0 {
  Matrix4x4 unity_ProbeVolumeWorldToObject at 64
  Vector4 unity_SHAr at 0
  Vector4 unity_SHAg at 16
  Vector4 unity_SHAb at 32
  Vector4 unity_ProbeVolumeParams at 48
  Vector3 unity_ProbeVolumeSizeInv at 128
  Vector3 unity_ProbeVolumeMin at 144
  Vector4 _Control_TexelSize at 160
  Vector4 _Splat0_ST at 176
  Vector4 _Splat1_ST at 192
  Vector4 _Splat2_ST at 208
  Vector4 _Splat3_ST at 224
  Float _NormalScale0 at 240
  Float _NormalScale1 at 244
  Float _NormalScale2 at 248
  Float _NormalScale3 at 252
  Float _Metallic0 at 256
  Float _Metallic1 at 260
  Float _Metallic2 at 264
  Float _Metallic3 at 268
  Float _Smoothness0 at 272
  Float _Smoothness1 at 276
  Float _Smoothness2 at 280
  Float _Smoothness3 at 284
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct FGlobals_Type
{
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float3 unity_ProbeVolumeSizeInv;
    float3 unity_ProbeVolumeMin;
    float4 _Control_TexelSize;
    float4 _Splat0_ST;
    float4 _Splat1_ST;
    float4 _Splat2_ST;
    float4 _Splat3_ST;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
};

struct Mtl_FragmentIn
{
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
    float4 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]] ;
    float3 TEXCOORD6 [[ user(TEXCOORD6) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
    float4 SV_Target1 [[ color(xlt_remap_o[1]) ]];
    float4 SV_Target2 [[ color(xlt_remap_o[2]) ]];
    float4 SV_Target3 [[ color(xlt_remap_o[3]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant FGlobals_Type& FGlobals [[ buffer(0) ]],
    sampler samplerunity_ProbeVolumeSH [[ sampler (0) ]],
    sampler sampler_Control [[ sampler (1) ]],
    sampler sampler_Splat0 [[ sampler (2) ]],
    sampler sampler_Splat1 [[ sampler (3) ]],
    sampler sampler_Splat2 [[ sampler (4) ]],
    sampler sampler_Splat3 [[ sampler (5) ]],
    sampler sampler__TerrainNormalmapTexture [[ sampler (6) ]],
    sampler sampler_Normal0 [[ sampler (7) ]],
    sampler sampler_Normal1 [[ sampler (8) ]],
    sampler sampler_Normal2 [[ sampler (9) ]],
    sampler sampler_Normal3 [[ sampler (10) ]],
    sampler sampler_TerrainHolesTexture [[ sampler (11) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    texture2d<float, access::sample > _Control [[ texture(1) ]] ,
    texture2d<float, access::sample > _Splat0 [[ texture(2) ]] ,
    texture2d<float, access::sample > _Splat1 [[ texture(3) ]] ,
    texture2d<float, access::sample > _Splat2 [[ texture(4) ]] ,
    texture2d<float, access::sample > _Splat3 [[ texture(5) ]] ,
    texture2d<float, access::sample > _Normal0 [[ texture(6) ]] ,
    texture2d<float, access::sample > _Normal1 [[ texture(7) ]] ,
    texture2d<float, access::sample > _Normal2 [[ texture(8) ]] ,
    texture2d<float, access::sample > _Normal3 [[ texture(9) ]] ,
    texture3d<float, access::sample > unity_ProbeVolumeSH [[ texture(10) ]] ,
    texture2d<float, access::sample > _TerrainNormalmapTexture [[ texture(11) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    bool u_xlatb7;
    float3 u_xlat8;
    float3 u_xlat10;
    float u_xlat14;
    float2 u_xlat16;
    float u_xlat21;
    float u_xlat22;
    float u_xlat23;
    u_xlat0.x = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD3.xy).x;
    u_xlatb0 = u_xlat0.x==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    u_xlat0.xy = FGlobals._Control_TexelSize.zw + float2(-1.0, -1.0);
    u_xlat0.xy = fma(input.TEXCOORD3.xy, u_xlat0.xy, float2(0.5, 0.5));
    u_xlat0.xy = u_xlat0.xy * FGlobals._Control_TexelSize.xy;
    u_xlat0 = _Control.sample(sampler_Control, u_xlat0.xy);
    u_xlat1 = dot(u_xlat0, float4(1.0, 1.0, 1.0, 1.0));
    u_xlat8.x = u_xlat1 + 0.00100000005;
    u_xlat0 = u_xlat0 / u_xlat8.xxxx;
    u_xlat8.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat0_ST.xy, FGlobals._Splat0_ST.zw);
    u_xlat2.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat1_ST.xy, FGlobals._Splat1_ST.zw);
    u_xlat16.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat2_ST.xy, FGlobals._Splat2_ST.zw);
    u_xlat3.xy = fma(input.TEXCOORD3.xy, FGlobals._Splat3_ST.xy, FGlobals._Splat3_ST.zw);
    u_xlat4 = _Splat0.sample(sampler_Splat0, u_xlat8.xy);
    u_xlat4 = u_xlat0.xxxx * u_xlat4;
    u_xlat4.w = u_xlat4.w * FGlobals._Smoothness0;
    u_xlat5 = _Splat1.sample(sampler_Splat1, u_xlat2.xy);
    u_xlat5 = u_xlat0.yyyy * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness1;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat2.sample(sampler_Splat2, u_xlat16.xy);
    u_xlat5 = u_xlat0.zzzz * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness2;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat5 = _Splat3.sample(sampler_Splat3, u_xlat3.xy);
    u_xlat5 = u_xlat0.wwww * u_xlat5;
    u_xlat5.w = u_xlat5.w * FGlobals._Smoothness3;
    u_xlat4 = u_xlat4 + u_xlat5;
    u_xlat8.xyz = _Normal0.sample(sampler_Normal0, u_xlat8.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = u_xlat8.xy * float2(FGlobals._NormalScale0);
    u_xlat8.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat5.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = _Normal1.sample(sampler_Normal1, u_xlat2.xy).xyw;
    u_xlat8.x = u_xlat8.z * u_xlat8.x;
    u_xlat8.xy = fma(u_xlat8.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat6.xy = u_xlat8.xy * float2(FGlobals._NormalScale1);
    u_xlat8.x = dot(u_xlat6.xy, u_xlat6.xy);
    u_xlat8.x = min(u_xlat8.x, 1.0);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat6.z = sqrt(u_xlat8.x);
    u_xlat8.xyz = u_xlat0.yyy * u_xlat6.xyz;
    u_xlat8.xyz = fma(u_xlat5.xyz, u_xlat0.xxx, u_xlat8.xyz);
    u_xlat2.xyz = _Normal2.sample(sampler_Normal2, u_xlat16.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale2);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat8.xyz = fma(u_xlat2.xyz, u_xlat0.zzz, u_xlat8.xyz);
    u_xlat2.xyz = _Normal3.sample(sampler_Normal3, u_xlat3.xy).xyw;
    u_xlat2.x = u_xlat2.z * u_xlat2.x;
    u_xlat2.xy = fma(u_xlat2.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat2.xy = u_xlat2.xy * float2(FGlobals._NormalScale3);
    u_xlat23 = dot(u_xlat2.xy, u_xlat2.xy);
    u_xlat23 = min(u_xlat23, 1.0);
    u_xlat23 = (-u_xlat23) + 1.0;
    u_xlat2.z = sqrt(u_xlat23);
    u_xlat8.xyz = fma(u_xlat2.xyz, u_xlat0.www, u_xlat8.xyz);
    u_xlat22 = u_xlat8.z + 9.99999975e-06;
    u_xlat2.xyz = _TerrainNormalmapTexture.sample(sampler__TerrainNormalmapTexture, input.TEXCOORD3.zw).xyz;
    u_xlat2.xyz = fma(u_xlat2.xzy, float3(2.0, 2.0, 2.0), float3(-1.0, -1.0, -1.0));
    u_xlat23 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat2.xyz = float3(u_xlat23) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat2.yzx * float3(0.0, 0.0, 1.0);
    u_xlat3.xyz = fma(u_xlat2.zxy, float3(1.0, 0.0, 0.0), (-u_xlat3.xyz));
    u_xlat23 = dot(u_xlat3.xz, u_xlat3.xz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat3.xyz = float3(u_xlat23) * u_xlat3.xyz;
    u_xlat5.xyz = u_xlat2.zxy * u_xlat3.yzx;
    u_xlat5.xyz = fma(u_xlat3.zxy, u_xlat2.yzx, (-u_xlat5.xyz));
    u_xlat23 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat23 = rsqrt(u_xlat23);
    u_xlat5.xyz = float3(u_xlat23) * u_xlat5.xyz;
    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz;
    u_xlat3.xyz = fma(u_xlat8.xxx, u_xlat3.xyz, u_xlat5.xyz);
    u_xlat8.xyz = fma(float3(u_xlat22), u_xlat2.xyz, u_xlat3.xyz);
    u_xlat0.x = dot(u_xlat0, float4(FGlobals._Metallic0, FGlobals._Metallic1, FGlobals._Metallic2, FGlobals._Metallic3));
    u_xlat2.x = dot(input.TEXCOORD0.xyz, u_xlat8.xyz);
    u_xlat2.y = dot(input.TEXCOORD1.xyz, u_xlat8.xyz);
    u_xlat2.z = dot(input.TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat7.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7.x = rsqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat2.xyz;
    u_xlatb7 = FGlobals.unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb7){
        u_xlatb7 = FGlobals.unity_ProbeVolumeParams.y==1.0;
        u_xlat8.xyz = input.TEXCOORD1.www * FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[0].xyz, input.TEXCOORD0.www, u_xlat8.xyz);
        u_xlat8.xyz = fma(FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[2].xyz, input.TEXCOORD2.www, u_xlat8.xyz);
        u_xlat8.xyz = u_xlat8.xyz + FGlobals.hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat10.x = input.TEXCOORD0.w;
        u_xlat10.y = input.TEXCOORD1.w;
        u_xlat10.z = input.TEXCOORD2.w;
        u_xlat7.xyz = (bool(u_xlatb7)) ? u_xlat8.xyz : u_xlat10.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-FGlobals.unity_ProbeVolumeMin.xyzx.xyz);
        u_xlat3.yzw = u_xlat7.xyz * FGlobals.unity_ProbeVolumeSizeInv.xyzx.xyz;
        u_xlat7.x = u_xlat3.y * 0.25;
        u_xlat14 = FGlobals.unity_ProbeVolumeParams.z * 0.5;
        u_xlat21 = fma((-FGlobals.unity_ProbeVolumeParams.z), 0.5, 0.25);
        u_xlat7.x = max(u_xlat14, u_xlat7.x);
        u_xlat3.x = min(u_xlat21, u_xlat7.x);
        u_xlat5 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat3.xzw);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.25, 0.0, 0.0);
        u_xlat6 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat7.xyz = u_xlat3.xzw + float3(0.5, 0.0, 0.0);
        u_xlat3 = unity_ProbeVolumeSH.sample(samplerunity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(u_xlat5, u_xlat2);
        u_xlat5.y = dot(u_xlat6, u_xlat2);
        u_xlat5.z = dot(u_xlat3, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat5.x = dot(FGlobals.unity_SHAr, u_xlat2);
        u_xlat5.y = dot(FGlobals.unity_SHAg, u_xlat2);
        u_xlat5.z = dot(FGlobals.unity_SHAb, u_xlat2);
    }
    u_xlat7.xyz = u_xlat5.xyz + input.TEXCOORD6.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat7.xyz = log2(u_xlat7.xyz);
    u_xlat7.xyz = u_xlat7.xyz * float3(0.416666657, 0.416666657, 0.416666657);
    u_xlat7.xyz = exp2(u_xlat7.xyz);
    u_xlat7.xyz = fma(u_xlat7.xyz, float3(1.05499995, 1.05499995, 1.05499995), float3(-0.0549999997, -0.0549999997, -0.0549999997));
    u_xlat7.xyz = max(u_xlat7.xyz, float3(0.0, 0.0, 0.0));
    u_xlat8.xyz = u_xlat4.xyz + float3(-0.220916301, -0.220916301, -0.220916301);
    u_xlat3.xyz = fma(u_xlat0.xxx, u_xlat8.xyz, float3(0.220916301, 0.220916301, 0.220916301));
    u_xlat0.x = fma((-u_xlat0.x), 0.779083729, 0.779083729);
    u_xlat8.xyz = u_xlat0.xxx * u_xlat4.xyz;
    u_xlat0.xyz = u_xlat7.xyz * u_xlat8.xyz;
    u_xlat2.xyz = fma(u_xlat2.xyz, float3(0.5, 0.5, 0.5), float3(0.5, 0.5, 0.5));
    output.SV_Target0.xyz = float3(u_xlat1) * u_xlat8.xyz;
    u_xlat3.w = u_xlat4.w;
    output.SV_Target1 = float4(u_xlat1) * u_xlat3;
    output.SV_Target2.xyz = float3(u_xlat1) * u_xlat2.xyz;
    u_xlat0.w = 1.0;
    output.SV_Target3 = float4(u_xlat1) * u_xlat0;
    output.SV_Target0.w = 1.0;
    output.SV_Target2.w = 1.0;
    return output;
}


 }
 Pass {
  Name "ShadowCaster"
  Tags { "LIGHTMODE"="SHADOWCASTER" "QUEUE"="Geometry-100" "SHADOWSUPPORT"="true" "RenderType"="Opaque" "TerrainCompatible"="true" }
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
Keywords: SHADOWS_DEPTH
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (160 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat6;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat1);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = fma((-u_xlat9), u_xlat9, 1.0);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat1.x = VGlobals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat6);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat0.x, u_xlat6);
    u_xlat0.xyz = input.POSITION0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: SHADOWS_CUBE
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (160 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat1);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = fma((-u_xlat9), u_xlat9, 1.0);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat1.x, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.xyz = input.POSITION0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: SHADOWS_DEPTH _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (160 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat6;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat1);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = fma((-u_xlat9), u_xlat9, 1.0);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat1.x = VGlobals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat6 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat6);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat6) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat0.x, u_xlat6);
    u_xlat0.xyz = input.POSITION0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: SHADOWS_CUBE _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Normal"
Uses vertex data channel "TexCoord0"

Constant Buffer "VGlobals" (160 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    bool u_xlatb9;
    u_xlat0.xyz = input.NORMAL0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.NORMAL0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.NORMAL0.zzz, u_xlat0.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat1 = input.POSITION0.yyyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], input.POSITION0.xxxx, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], input.POSITION0.zzzz, u_xlat1);
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3], input.POSITION0.wwww, u_xlat1);
    u_xlat2.xyz = fma((-u_xlat1.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = rsqrt(u_xlat9);
    u_xlat2.xyz = float3(u_xlat9) * u_xlat2.xyz;
    u_xlat9 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat9 = fma((-u_xlat9), u_xlat9, 1.0);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat9), u_xlat1.xyz);
    u_xlatb9 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb9)) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat2 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat1.wwww, u_xlat0);
    u_xlat1.x = min(u_xlat0.w, u_xlat0.z);
    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat1.x, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.xyz = input.POSITION0.yyy * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.POSITION0.www, u_xlat0.xyz);
    output.TEXCOORD2.xy = input.TEXCOORD0.xy;
    output.TEXCOORD2.zw = float2(0.0, 0.0);
    return output;
}


-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _TerrainHeightmapRecipSize at 160
  Vector4 _TerrainHeightmapScale at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float2 u_xlat3;
    float4 u_xlat4;
    float u_xlat10;
    float u_xlat11;
    float u_xlat15;
    int u_xlati15;
    bool u_xlatb15;
    float u_xlat16;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlati15 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.xyxy;
    u_xlat2.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD2.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat1.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat2.xy);
    u_xlat11 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat1.xy, level(0.0)).x;
    output.TEXCOORD2.zw = u_xlat1.xy;
    u_xlat1.x = u_xlat11 * VGlobals._TerrainHeightmapScale.y;
    u_xlat2 = u_xlat1.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.xy;
    u_xlat3.xy = u_xlat3.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat3.xy = u_xlat3.xy * UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.zz;
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat3.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat3.yyyy, u_xlat2);
    u_xlat2 = u_xlat2 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4.xyz = fma((-u_xlat2.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * u_xlat4.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat15 = fma((-u_xlat15), u_xlat15, 1.0);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat15 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat15), u_xlat2.xyz);
    u_xlatb15 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat4 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat4);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat4);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat0);
    u_xlat16 = VGlobals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat16 = min(u_xlat16, 0.0);
    u_xlat16 = max(u_xlat16, -1.0);
    u_xlat10 = u_xlat0.z + u_xlat16;
    u_xlat16 = min(u_xlat0.w, u_xlat10);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat10) + u_xlat16;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat0.x, u_xlat10);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat3.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat3.yyy, u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: SHADOWS_DEPTH _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_TerrainHolesTexture [[ sampler (0) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float u_xlat0;
    bool u_xlatb0;
    u_xlat0 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb0 = u_xlat0==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_CUBE
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _TerrainHeightmapRecipSize at 160
  Vector4 _TerrainHeightmapScale at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float2 u_xlat3;
    float4 u_xlat4;
    float u_xlat11;
    float u_xlat15;
    int u_xlati15;
    bool u_xlatb15;
    float u_xlat16;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlati15 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.xyxy;
    u_xlat2.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD2.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat1.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat2.xy);
    u_xlat11 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat1.xy, level(0.0)).x;
    output.TEXCOORD2.zw = u_xlat1.xy;
    u_xlat1.x = u_xlat11 * VGlobals._TerrainHeightmapScale.y;
    u_xlat2 = u_xlat1.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.xy;
    u_xlat3.xy = u_xlat3.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat3.xy = u_xlat3.xy * UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.zz;
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat3.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat3.yyyy, u_xlat2);
    u_xlat2 = u_xlat2 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4.xyz = fma((-u_xlat2.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * u_xlat4.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat15 = fma((-u_xlat15), u_xlat15, 1.0);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat15 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat15), u_xlat2.xyz);
    u_xlatb15 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat4 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat4);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat4);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat0);
    u_xlat16 = min(u_xlat0.w, u_xlat0.z);
    u_xlat16 = (-u_xlat0.z) + u_xlat16;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat16, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat3.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat3.yyy, u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _TerrainHeightmapRecipSize at 160
  Vector4 _TerrainHeightmapScale at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float2 u_xlat3;
    float4 u_xlat4;
    float u_xlat10;
    float u_xlat11;
    float u_xlat15;
    int u_xlati15;
    bool u_xlatb15;
    float u_xlat16;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlati15 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.xyxy;
    u_xlat2.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD2.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat1.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat2.xy);
    u_xlat11 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat1.xy, level(0.0)).x;
    output.TEXCOORD2.zw = u_xlat1.xy;
    u_xlat1.x = u_xlat11 * VGlobals._TerrainHeightmapScale.y;
    u_xlat2 = u_xlat1.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.xy;
    u_xlat3.xy = u_xlat3.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat3.xy = u_xlat3.xy * UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.zz;
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat3.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat3.yyyy, u_xlat2);
    u_xlat2 = u_xlat2 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4.xyz = fma((-u_xlat2.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * u_xlat4.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat15 = fma((-u_xlat15), u_xlat15, 1.0);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat15 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat15), u_xlat2.xyz);
    u_xlatb15 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat4 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat4);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat4);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat0);
    u_xlat16 = VGlobals.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat16 = min(u_xlat16, 0.0);
    u_xlat16 = max(u_xlat16, -1.0);
    u_xlat10 = u_xlat0.z + u_xlat16;
    u_xlat16 = min(u_xlat0.w, u_xlat10);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat10) + u_xlat16;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat0.x, u_xlat10);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat3.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat3.yyy, u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_CUBE _NORMALMAP
-- Hardware tier variant: Tier 1
-- Vertex shader for "metal":
Uses vertex data channel "Vertex"

Set 2D Texture "_TerrainHeightmapTexture" to slot 0 sampler slot -1

Constant Buffer "VGlobals" (192 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 32
  Matrix4x4 unity_MatrixVP at 96
  Vector4 _WorldSpaceLightPos0 at 0
  Vector4 unity_LightShadowBias at 16
  Vector4 _TerrainHeightmapRecipSize at 160
  Vector4 _TerrainHeightmapScale at 176
}
Constant Buffer "UnityDrawCallInfo" (8 bytes) on slot 1 {
  ScalarInt unity_BaseInstanceID at 0
}
Constant Buffer "UnityInstancing_Terrain" (32 bytes) on slot 2 {
  Struct TerrainArray [16][2] at 0 {
    Vector4 _TerrainPatchInstanceData at 0
  }
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct VGlobals_Type
{
    float4 _WorldSpaceLightPos0;
    float4 unity_LightShadowBias;
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 _TerrainHeightmapRecipSize;
    float4 _TerrainHeightmapScale;
};

struct UnityDrawCallInfo_Type
{
    int unity_BaseInstanceID;
    int unity_InstanceCount;
};

struct TerrainArray_Type
{
    float4 _TerrainPatchInstanceData;
};

struct UnityInstancing_Terrain_Type
{
    TerrainArray_Type TerrainArray[2];
};

struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
};

struct Mtl_VertexOut
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    uint SV_InstanceID0 [[ user(SV_InstanceID0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityDrawCallInfo_Type& UnityDrawCallInfo [[ buffer(1) ]],
    const constant TerrainArray_Type* UnityInstancing_Terrain [[ buffer(2) ]],
    texture2d<float, access::sample > _TerrainHeightmapTexture [[ texture(0) ]] ,
    uint mtl_InstanceID [[ instance_id ]],
    uint mtl_BaseInstance [[ base_instance ]],
    Mtl_VertexIn input [[ stage_in ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseInstance = 0;
#endif
    mtl_InstanceID = mtl_InstanceID - mtl_BaseInstance;
    Mtl_VertexOut output;
    constexpr sampler vertex_linear_clamp_sampler(filter::linear,mip_filter::nearest,address::clamp_to_edge);
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float2 u_xlat3;
    float4 u_xlat4;
    float u_xlat11;
    float u_xlat15;
    int u_xlati15;
    bool u_xlatb15;
    float u_xlat16;
    u_xlat0.x = dot(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz, VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlati15 = int(mtl_InstanceID) + UnityDrawCallInfo.unity_BaseInstanceID;
    u_xlat1 = VGlobals._TerrainHeightmapRecipSize * UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.zzzz;
    u_xlat2 = u_xlat1 * UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.xyxy;
    u_xlat2.xy = fma(VGlobals._TerrainHeightmapRecipSize.xy, float2(0.5, 0.5), u_xlat2.xy);
    output.TEXCOORD2.xy = fma(input.POSITION0.xy, u_xlat1.zw, u_xlat2.zw);
    u_xlat1.xy = fma(input.POSITION0.xy, u_xlat1.xy, u_xlat2.xy);
    u_xlat11 = _TerrainHeightmapTexture.sample(vertex_linear_clamp_sampler, u_xlat1.xy, level(0.0)).x;
    output.TEXCOORD2.zw = u_xlat1.xy;
    u_xlat1.x = u_xlat11 * VGlobals._TerrainHeightmapScale.y;
    u_xlat2 = u_xlat1.xxxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1.xyz = u_xlat1.xxx * VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat3.xy = input.POSITION0.xy + UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.xy;
    u_xlat3.xy = u_xlat3.xy * VGlobals._TerrainHeightmapScale.xz;
    u_xlat3.xy = u_xlat3.xy * UnityInstancing_Terrain[u_xlati15]._TerrainPatchInstanceData.zz;
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat3.xxxx, u_xlat2);
    u_xlat2 = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat3.yyyy, u_xlat2);
    u_xlat2 = u_xlat2 + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat4.xyz = fma((-u_xlat2.xyz), VGlobals._WorldSpaceLightPos0.www, VGlobals._WorldSpaceLightPos0.xyz);
    u_xlat15 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat4.xyz = float3(u_xlat15) * u_xlat4.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat4.xyz);
    u_xlat15 = fma((-u_xlat15), u_xlat15, 1.0);
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = u_xlat15 * VGlobals.unity_LightShadowBias.z;
    u_xlat0.xyz = fma((-u_xlat0.xyz), float3(u_xlat15), u_xlat2.xyz);
    u_xlatb15 = VGlobals.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb15)) ? u_xlat0.xyz : u_xlat2.xyz;
    u_xlat4 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat4 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat4);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat4);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat2.wwww, u_xlat0);
    u_xlat16 = min(u_xlat0.w, u_xlat0.z);
    u_xlat16 = (-u_xlat0.z) + u_xlat16;
    output.mtl_Position.z = fma(VGlobals.unity_LightShadowBias.y, u_xlat16, u_xlat0.z);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat3.xxx, u_xlat1.xyz);
    u_xlat0.xyz = fma(VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat3.yyy, u_xlat0.xyz);
    output.TEXCOORD1.xyz = u_xlat0.xyz + VGlobals.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.SV_InstanceID0 = mtl_InstanceID;
    return output;
}


-- Fragment shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

//////////////////////////////////////////////////////
Keywords: SHADOWS_CUBE _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_TerrainHolesTexture [[ sampler (0) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float u_xlat0;
    bool u_xlatb0;
    u_xlat0 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb0 = u_xlat0==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: SHADOWS_DEPTH _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_TerrainHolesTexture [[ sampler (0) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float u_xlat0;
    bool u_xlatb0;
    u_xlat0 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb0 = u_xlat0==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: SHADOWS_CUBE _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_TerrainHolesTexture [[ sampler (0) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float u_xlat0;
    bool u_xlatb0;
    u_xlat0 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb0 = u_xlat0==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_CUBE
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_CUBE _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
)
{
    Mtl_FragmentOut output;
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_TerrainHolesTexture [[ sampler (0) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float u_xlat0;
    bool u_xlatb0;
    u_xlat0 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb0 = u_xlat0==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_CUBE _ALPHATEST_ON
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_TerrainHolesTexture [[ sampler (0) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float u_xlat0;
    bool u_xlatb0;
    u_xlat0 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb0 = u_xlat0==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_DEPTH _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_TerrainHolesTexture [[ sampler (0) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float u_xlat0;
    bool u_xlatb0;
    u_xlat0 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb0 = u_xlat0==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


//////////////////////////////////////////////////////
Keywords: INSTANCING_ON SHADOWS_CUBE _ALPHATEST_ON _NORMALMAP
-- Vertex shader for "metal":
// No shader variant for this keyword set. The closest match will be used instead.

-- Hardware tier variant: Tier 1
-- Fragment shader for "metal":
Set 2D Texture "_TerrainHolesTexture" to slot 0

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct Mtl_FragmentIn
{
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    sampler sampler_TerrainHolesTexture [[ sampler (0) ]],
    texture2d<float, access::sample > _TerrainHolesTexture [[ texture(0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float u_xlat0;
    bool u_xlatb0;
    u_xlat0 = _TerrainHolesTexture.sample(sampler_TerrainHolesTexture, input.TEXCOORD2.xy).x;
    u_xlatb0 = u_xlat0==0.0;
    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard_fragment();}
    output.SV_Target0 = float4(0.0, 0.0, 0.0, 0.0);
    return output;
}


 }
 UsePass "Hidden/Nature/Terrain/Utilities/PICKING"
 UsePass "Hidden/Nature/Terrain/Utilities/SELECTION"
}
Dependency "AddPassShader" = "Hidden/TerrainEngine/Splatmap/Standard-AddPass"
Dependency "BaseMapShader" = "Hidden/TerrainEngine/Splatmap/Standard-Base"
Dependency "BaseMapGenShader" = "Hidden/TerrainEngine/Splatmap/Standard-BaseGen"
Fallback "Nature/Terrain/Diffuse"
}